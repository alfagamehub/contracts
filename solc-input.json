{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/Balances.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IPancakeRouter} from \"./store/interfaces/IPancakeRouter.sol\";\n\n/// @notice Container for a token balance and its quoted value in USDT.\n/// @dev All amounts are in raw on-chain units (smallest decimals) for each token.\n/// @param tokenAddress The ERC-20 token contract address.\n/// @param balance The holder's token balance (raw units).\n/// @param priceInUSDT The quoted value of `balance` in USDT (raw units of USDT).\nstruct TokenBalance {\n    address tokenAddress;\n    uint256 balance;\n    uint256 priceInUSDT;\n}\n\n/// @title Portfolio balances with USDT quotes (PancakeSwap V2, BSC)\n/// @notice Fetches ERC-20 balances and quotes their value in USDT using PancakeSwap V2 routes.\n/// @dev Designed for BNB Smart Chain mainnet. Quotes are instantaneous spot estimates from `IPancakeRouter.getAmountsOut`.\n/// @custom:network BNB Smart Chain (BSC) mainnet\n/// @custom:router PancakeSwap V2 Router at 0x10ED...024E\n/// @custom:assumptions Liquidity exists on the attempted route(s); tokens adhere to ERC‑20 `balanceOf`.\n/// @custom:security Quotes exclude price impact, slippage, fees, and MEV. Router calls may revert; callers should handle failures.\ncontract Balances {\n\n    address private constant PANCAKE_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E; /// @dev PancakeSwap V2 Router (BSC mainnet).\n    address private constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; /// @dev Wrapped BNB (WBNB) token address (BSC mainnet).\n    address private constant USDT = 0x55d398326f99059fF775485246999027B3197955; /// @dev Binance-Peg USDT token address (BSC mainnet).\n\n    /// @dev Cached interface instance for the PancakeSwap V2 Router.\n    IPancakeRouter private constant router = IPancakeRouter(PANCAKE_ROUTER);\n\n    /// @notice Returns raw ERC-20 balances for `recipient` over `tokens`.\n    /// @dev If a token call fails, its balance is returned as zero.\n    /// @param recipient Address whose balances are queried.\n    /// @param tokens List of ERC-20 token addresses to query.\n    /// @return response Array of balances in raw units, aligned with `tokens`.\n    function getBalances(address recipient, address[] calldata tokens) public view returns (uint[] memory) {\n        uint length = tokens.length;\n        uint[] memory response = new uint[](length);\n        for (uint i = 0; i < length; i++) {\n            response[i] = _getTokenBalance(recipient, tokens[i]);\n        }\n        return response;\n    }\n\n    /// @notice Returns balances and their USDT quotes, plus the USDT total.\n    /// @dev For each token, balance is fetched via `IERC20.balanceOf` and quoted to USDT via PancakeSwap routes.\n    ///      If a token call fails, its balance is set to zero and excluded from the total.\n    /// @param recipient Address whose balances are queried.\n    /// @param tokens List of ERC-20 token addresses to query.\n    /// @return response Array of {token, balance, priceInUSDT} for each input token.\n    /// @return totalUSDT Sum of all `priceInUSDT` values (raw USDT units).\n    function getBalancesWithPrices(address recipient, address[] calldata tokens) public view returns (TokenBalance[] memory, uint256 totalUSDT) {\n        uint length = tokens.length;\n        TokenBalance[] memory response = new TokenBalance[](length);\n        for (uint i = 0; i < length; i++) {\n            response[i].tokenAddress = tokens[i];\n            response[i].balance = _getTokenBalance(recipient, tokens[i]);\n            response[i].priceInUSDT = _getTokenUSDTAmount(tokens[i], response[i].balance);\n            totalUSDT += response[i].priceInUSDT;\n        }\n        return (response, totalUSDT);\n    }\n\n    /// @notice Safe balance lookup supporting native BNB and ERC‑20 tokens.\n    /// @dev If `tokenAddress == address(0)`, returns the native BNB balance of `recipient`.\n    ///      ERC‑20 reads are wrapped in `try/catch` to tolerate non‑standard tokens; on failure returns 0.\n    /// @param recipient The account whose balance is requested.\n    /// @param tokenAddress The ERC‑20 token address or `address(0)` for native BNB.\n    /// @return balance The balance in raw on‑chain units (BNB has 18 decimals).\n    function _getTokenBalance(address recipient, address tokenAddress) internal view returns (uint256) {\n        if (tokenAddress == address(0)) {\n            return recipient.balance;\n        } else {\n            try IERC20(tokenAddress).balanceOf(recipient) returns (uint balance) {\n                return balance;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    /// @notice Quotes how many USDT can be obtained for `amountOut` of `tokenOut`.\n    /// @dev Uses direct `tokenOut→USDT` route when available, otherwise falls back to `tokenOut→WBNB→USDT`.\n    ///      For native BNB/WBNB, uses `WBNB→USDT`.\n    /// @param tokenOut ERC-20 token address (use `address(0)` or `WBNB` for BNB/WBNB).\n    /// @param amountOut Amount of `tokenOut` to convert (raw units).\n    /// @return priceInUSDT Quoted amount of USDT (raw units) obtainable for `amountOut`.\n    function _getTokenUSDTAmount(address tokenOut, uint256 amountOut) internal view returns (uint256 priceInUSDT) {\n        if (tokenOut == address(0) || tokenOut == WBNB) {\n            return _quoteBNBForUSDT(amountOut);\n        } else {\n            return _quoteTokenForUSDT(tokenOut, amountOut);\n        }\n    }\n\n    /// @notice Quotes how many USDT are obtained for `amountOut` units of `tokenOut`.\n    /// @dev First tries the direct path `tokenOut→USDT` via `router.getAmountsOut`; if it reverts, falls back to `tokenOut→WBNB→USDT`.\n    /// @param tokenOut ERC-20 token address to sell for USDT.\n    /// @param amountOut Amount of `tokenOut` to sell (raw units).\n    /// @return priceInUSDT Quoted USDT amount (raw units) obtainable for `amountOut`.\n    function _quoteTokenForUSDT(address tokenOut, uint256 amountOut) internal view returns (uint256 priceInUSDT) {\n        if (tokenOut == USDT) {\n            // 1 USDT = 1 USDT\n            return amountOut;\n        }\n\n        // 1) Try direct tokenOut -> USDT path\n        {\n            address[] memory path = new address[](2);\n            path[0] = tokenOut;\n            path[1] = USDT;\n            try router.getAmountsOut(amountOut, path) returns (uint[] memory amounts) {\n                return amounts[amounts.length - 1];\n            } catch { /* fallback below */ }\n        }\n\n        // 2) Fallback via WBNB: tokenOut -> WBNB -> USDT\n        {\n            address[] memory path = new address[](3);\n            path[0] = tokenOut;\n            path[1] = WBNB;\n            path[2] = USDT;\n            uint[] memory amounts = router.getAmountsOut(amountOut, path);\n            return amounts[amounts.length - 1];\n        }\n    }\n\n    /// @notice Quotes how many USDT are obtained for `amountOut` of BNB (via WBNB).\n    /// @dev Uses the path `WBNB→USDT` with `router.getAmountsOut`.\n    /// @param amountOut The amount of BNB/WBNB to convert (raw 18‑decimals units).\n    /// @return priceInUSDT Quoted USDT amount (raw units) obtainable for `amountOut`.\n    function _quoteBNBForUSDT(uint256 amountOut) internal view returns (uint256 priceInUSDT) {\n        address[] memory path = new address[](2);\n        path[0] = WBNB;\n        path[1] = USDT;\n        uint[] memory amounts = router.getAmountsOut(amountOut, path);\n        return amounts[amounts.length - 1];\n    }\n\n}"
    },
    "contracts/store/interfaces/IPancakeRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface IPancakeRouter {\n    function getAmountsOut(uint amountIn, address[] calldata path)\n        external\n        view\n        returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    }
  },
  "settings": {
    "viaIR": false,
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "evmVersion": "cancun",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}