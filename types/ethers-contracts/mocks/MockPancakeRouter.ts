/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface MockPancakeRouterInterface extends Interface {
    getFunction(nameOrSignature: "getAmountsOut" | "rate" | "setRate" | "setRates"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "RateSet"): EventFragment;

    encodeFunctionData(functionFragment: 'getAmountsOut', values: [BigNumberish, AddressLike[]]): string;
encodeFunctionData(functionFragment: 'rate', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'setRate', values: [AddressLike, AddressLike, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'setRates', values: [AddressLike[], AddressLike[], BigNumberish[], BigNumberish[]]): string;

    decodeFunctionResult(functionFragment: 'getAmountsOut', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setRate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setRates', data: BytesLike): Result;
  }

  
    export namespace RateSetEvent {
      export type InputTuple = [tokenIn: AddressLike, tokenOut: AddressLike, num: BigNumberish, den: BigNumberish];
      export type OutputTuple = [tokenIn: string, tokenOut: string, num: bigint, den: bigint];
      export interface OutputObject {tokenIn: string, tokenOut: string, num: bigint, den: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MockPancakeRouter extends BaseContract {
    
    connect(runner?: ContractRunner | null): MockPancakeRouter;
    waitForDeployment(): Promise<this>;

    interface: MockPancakeRouterInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    getAmountsOut: TypedContractMethod<
      [amountIn: BigNumberish, path: AddressLike[], ],
      [bigint[]],
      'view'
    >
    

    
    rate: TypedContractMethod<
      [arg0: AddressLike, arg1: AddressLike, ],
      [[bigint, bigint] & {num: bigint, den: bigint }],
      'view'
    >
    

    
    setRate: TypedContractMethod<
      [tokenIn: AddressLike, tokenOut: AddressLike, num: BigNumberish, den: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setRates: TypedContractMethod<
      [ins: AddressLike[], outs: AddressLike[], nums: BigNumberish[], dens: BigNumberish[], ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'getAmountsOut'): TypedContractMethod<
      [amountIn: BigNumberish, path: AddressLike[], ],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'rate'): TypedContractMethod<
      [arg0: AddressLike, arg1: AddressLike, ],
      [[bigint, bigint] & {num: bigint, den: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'setRate'): TypedContractMethod<
      [tokenIn: AddressLike, tokenOut: AddressLike, num: BigNumberish, den: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setRates'): TypedContractMethod<
      [ins: AddressLike[], outs: AddressLike[], nums: BigNumberish[], dens: BigNumberish[], ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'RateSet'): TypedContractEvent<RateSetEvent.InputTuple, RateSetEvent.OutputTuple, RateSetEvent.OutputObject>;

    filters: {
      
      'RateSet(address,address,uint256,uint256)': TypedContractEvent<RateSetEvent.InputTuple, RateSetEvent.OutputTuple, RateSetEvent.OutputObject>;
      RateSet: TypedContractEvent<RateSetEvent.InputTuple, RateSetEvent.OutputTuple, RateSetEvent.OutputObject>;
    
    };
  }