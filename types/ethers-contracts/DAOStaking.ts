/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
    export type StakeStruct = {index: BigNumberish, months: BigNumberish, tokenAmount: BigNumberish, lockTimestamp: BigNumberish}

    export type StakeStructOutput = [index: bigint, months: bigint, tokenAmount: bigint, lockTimestamp: bigint] & {index: bigint, months: bigint, tokenAmount: bigint, lockTimestamp: bigint }
  

    export type StakeVariantStruct = {months: BigNumberish, votesMultiplier: BigNumberish, yearRewardMultiplier: BigNumberish}

    export type StakeVariantStructOutput = [months: bigint, votesMultiplier: bigint, yearRewardMultiplier: bigint] & {months: bigint, votesMultiplier: bigint, yearRewardMultiplier: bigint }
  

  export interface DAOStakingInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "accountVotes" | "addStakingVariant" | "commonVotes" | "editStakingVariant" | "getAccountShare" | "getAccountStakes" | "getAccountStakesLength" | "getAvailablePoolBalance" | "getLockedPoolBalance" | "getRoleAdmin" | "getStakeVariants" | "getVariantStakes" | "grantRole" | "hasRole" | "removeStakingVariant" | "renounceRole" | "revokeRole" | "stake" | "supportsInterface" | "token" | "unstake" | "unstakeAvailable" | "withdraw"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "Staked" | "StakingVariandRemoved" | "StakingVariantAdded" | "StakingVariantEdited" | "Unstaked" | "Withdraw"): EventFragment;

    encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'accountVotes', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'addStakingVariant', values: [BigNumberish, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'commonVotes', values?: undefined): string;
encodeFunctionData(functionFragment: 'editStakingVariant', values: [BigNumberish, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getAccountShare', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getAccountStakes', values: [AddressLike, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getAccountStakesLength', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getAvailablePoolBalance', values?: undefined): string;
encodeFunctionData(functionFragment: 'getLockedPoolBalance', values?: undefined): string;
encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getStakeVariants', values?: undefined): string;
encodeFunctionData(functionFragment: 'getVariantStakes', values: [BigNumberish, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'removeStakingVariant', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'stake', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'token', values?: undefined): string;
encodeFunctionData(functionFragment: 'unstake', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'unstakeAvailable', values?: undefined): string;
encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'accountVotes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addStakingVariant', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'commonVotes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'editStakingVariant', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAccountShare', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAccountStakes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAccountStakesLength', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAvailablePoolBalance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getLockedPoolBalance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getStakeVariants', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getVariantStakes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeStakingVariant', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unstakeAvailable', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  }

  
    export namespace RoleAdminChangedEvent {
      export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
      export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
      export interface OutputObject {role: string, previousAdminRole: string, newAdminRole: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleGrantedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRevokedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace StakedEvent {
      export type InputTuple = [account: AddressLike, months: BigNumberish, tokenAmount: BigNumberish, rewardAmount: BigNumberish, lockAmount: BigNumberish, votesAmount: BigNumberish, lockTimestamp: BigNumberish];
      export type OutputTuple = [account: string, months: bigint, tokenAmount: bigint, rewardAmount: bigint, lockAmount: bigint, votesAmount: bigint, lockTimestamp: bigint];
      export interface OutputObject {account: string, months: bigint, tokenAmount: bigint, rewardAmount: bigint, lockAmount: bigint, votesAmount: bigint, lockTimestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace StakingVariandRemovedEvent {
      export type InputTuple = [months: BigNumberish];
      export type OutputTuple = [months: bigint];
      export interface OutputObject {months: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace StakingVariantAddedEvent {
      export type InputTuple = [months: BigNumberish, votesMultiplier: BigNumberish, yearRewardMultiplier: BigNumberish];
      export type OutputTuple = [months: bigint, votesMultiplier: bigint, yearRewardMultiplier: bigint];
      export interface OutputObject {months: bigint, votesMultiplier: bigint, yearRewardMultiplier: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace StakingVariantEditedEvent {
      export type InputTuple = [months: BigNumberish, votesMultiplier: BigNumberish, yearRewardMultiplier: BigNumberish];
      export type OutputTuple = [months: bigint, votesMultiplier: bigint, yearRewardMultiplier: bigint];
      export interface OutputObject {months: bigint, votesMultiplier: bigint, yearRewardMultiplier: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UnstakedEvent {
      export type InputTuple = [account: AddressLike, months: BigNumberish, tokenAmount: BigNumberish, rewardAmount: BigNumberish, transferAmount: BigNumberish, votesAmount: BigNumberish, lockTimestamp: BigNumberish, unlockTimestamp: BigNumberish];
      export type OutputTuple = [account: string, months: bigint, tokenAmount: bigint, rewardAmount: bigint, transferAmount: bigint, votesAmount: bigint, lockTimestamp: bigint, unlockTimestamp: bigint];
      export interface OutputObject {account: string, months: bigint, tokenAmount: bigint, rewardAmount: bigint, transferAmount: bigint, votesAmount: bigint, lockTimestamp: bigint, unlockTimestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WithdrawEvent {
      export type InputTuple = [account: AddressLike, tokenAmount: BigNumberish];
      export type OutputTuple = [account: string, tokenAmount: bigint];
      export interface OutputObject {account: string, tokenAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface DAOStaking extends BaseContract {
    
    connect(runner?: ContractRunner | null): DAOStaking;
    waitForDeployment(): Promise<this>;

    interface: DAOStakingInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    DEFAULT_ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    accountVotes: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    addStakingVariant: TypedContractMethod<
      [months: BigNumberish, votesMultiplier: BigNumberish, yearRewardMultiplier: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    commonVotes: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    editStakingVariant: TypedContractMethod<
      [months: BigNumberish, votesMultiplier: BigNumberish, yearRewardMultiplier: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getAccountShare: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getAccountStakes: TypedContractMethod<
      [account: AddressLike, offset: BigNumberish, limit: BigNumberish, ],
      [StakeStructOutput[]],
      'view'
    >
    

    
    getAccountStakesLength: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getAvailablePoolBalance: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getLockedPoolBalance: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getRoleAdmin: TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >
    

    
    getStakeVariants: TypedContractMethod<
      [],
      [StakeVariantStructOutput[]],
      'view'
    >
    

    
    getVariantStakes: TypedContractMethod<
      [months: BigNumberish, offset: BigNumberish, limit: BigNumberish, ],
      [StakeStructOutput[]],
      'view'
    >
    

    
    grantRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    hasRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    removeStakingVariant: TypedContractMethod<
      [months: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    renounceRole: TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    revokeRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    stake: TypedContractMethod<
      [months: BigNumberish, tokenAmount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    token: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    unstake: TypedContractMethod<
      [index: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    unstakeAvailable: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    withdraw: TypedContractMethod<
      [tokenAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'DEFAULT_ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'accountVotes'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'addStakingVariant'): TypedContractMethod<
      [months: BigNumberish, votesMultiplier: BigNumberish, yearRewardMultiplier: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'commonVotes'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'editStakingVariant'): TypedContractMethod<
      [months: BigNumberish, votesMultiplier: BigNumberish, yearRewardMultiplier: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getAccountShare'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getAccountStakes'): TypedContractMethod<
      [account: AddressLike, offset: BigNumberish, limit: BigNumberish, ],
      [StakeStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'getAccountStakesLength'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getAvailablePoolBalance'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getLockedPoolBalance'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleAdmin'): TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getStakeVariants'): TypedContractMethod<
      [],
      [StakeVariantStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'getVariantStakes'): TypedContractMethod<
      [months: BigNumberish, offset: BigNumberish, limit: BigNumberish, ],
      [StakeStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'grantRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'hasRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'removeStakingVariant'): TypedContractMethod<
      [months: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceRole'): TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'stake'): TypedContractMethod<
      [months: BigNumberish, tokenAmount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'token'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'unstake'): TypedContractMethod<
      [index: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'unstakeAvailable'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdraw'): TypedContractMethod<
      [tokenAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'RoleAdminChanged'): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
getEvent(key: 'RoleGranted'): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
getEvent(key: 'RoleRevoked'): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
getEvent(key: 'Staked'): TypedContractEvent<StakedEvent.InputTuple, StakedEvent.OutputTuple, StakedEvent.OutputObject>;
getEvent(key: 'StakingVariandRemoved'): TypedContractEvent<StakingVariandRemovedEvent.InputTuple, StakingVariandRemovedEvent.OutputTuple, StakingVariandRemovedEvent.OutputObject>;
getEvent(key: 'StakingVariantAdded'): TypedContractEvent<StakingVariantAddedEvent.InputTuple, StakingVariantAddedEvent.OutputTuple, StakingVariantAddedEvent.OutputObject>;
getEvent(key: 'StakingVariantEdited'): TypedContractEvent<StakingVariantEditedEvent.InputTuple, StakingVariantEditedEvent.OutputTuple, StakingVariantEditedEvent.OutputObject>;
getEvent(key: 'Unstaked'): TypedContractEvent<UnstakedEvent.InputTuple, UnstakedEvent.OutputTuple, UnstakedEvent.OutputObject>;
getEvent(key: 'Withdraw'): TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;

    filters: {
      
      'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
      RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    

      'RoleGranted(bytes32,address,address)': TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
      RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    

      'RoleRevoked(bytes32,address,address)': TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
      RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    

      'Staked(address,uint8,uint256,uint256,uint256,uint256,uint256)': TypedContractEvent<StakedEvent.InputTuple, StakedEvent.OutputTuple, StakedEvent.OutputObject>;
      Staked: TypedContractEvent<StakedEvent.InputTuple, StakedEvent.OutputTuple, StakedEvent.OutputObject>;
    

      'StakingVariandRemoved(uint8)': TypedContractEvent<StakingVariandRemovedEvent.InputTuple, StakingVariandRemovedEvent.OutputTuple, StakingVariandRemovedEvent.OutputObject>;
      StakingVariandRemoved: TypedContractEvent<StakingVariandRemovedEvent.InputTuple, StakingVariandRemovedEvent.OutputTuple, StakingVariandRemovedEvent.OutputObject>;
    

      'StakingVariantAdded(uint8,uint24,uint24)': TypedContractEvent<StakingVariantAddedEvent.InputTuple, StakingVariantAddedEvent.OutputTuple, StakingVariantAddedEvent.OutputObject>;
      StakingVariantAdded: TypedContractEvent<StakingVariantAddedEvent.InputTuple, StakingVariantAddedEvent.OutputTuple, StakingVariantAddedEvent.OutputObject>;
    

      'StakingVariantEdited(uint8,uint24,uint24)': TypedContractEvent<StakingVariantEditedEvent.InputTuple, StakingVariantEditedEvent.OutputTuple, StakingVariantEditedEvent.OutputObject>;
      StakingVariantEdited: TypedContractEvent<StakingVariantEditedEvent.InputTuple, StakingVariantEditedEvent.OutputTuple, StakingVariantEditedEvent.OutputObject>;
    

      'Unstaked(address,uint8,uint256,uint256,uint256,uint256,uint256,uint256)': TypedContractEvent<UnstakedEvent.InputTuple, UnstakedEvent.OutputTuple, UnstakedEvent.OutputObject>;
      Unstaked: TypedContractEvent<UnstakedEvent.InputTuple, UnstakedEvent.OutputTuple, UnstakedEvent.OutputObject>;
    

      'Withdraw(address,uint256)': TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;
      Withdraw: TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;
    
    };
  }