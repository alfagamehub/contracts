/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { MockPancakeRouter, MockPancakeRouterInterface } from "../../mocks/MockPancakeRouter.js";

  const _abi = [
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "tokenIn",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "tokenOut",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "num",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "den",
        "type": "uint256"
      }
    ],
    "name": "RateSet",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "amountIn",
        "type": "uint256"
      },
      {
        "internalType": "address[]",
        "name": "path",
        "type": "address[]"
      }
    ],
    "name": "getAmountsOut",
    "outputs": [
      {
        "internalType": "uint256[]",
        "name": "amounts",
        "type": "uint256[]"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "rate",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "num",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "den",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "tokenIn",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "tokenOut",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "num",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "den",
        "type": "uint256"
      }
    ],
    "name": "setRate",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address[]",
        "name": "ins",
        "type": "address[]"
      },
      {
        "internalType": "address[]",
        "name": "outs",
        "type": "address[]"
      },
      {
        "internalType": "uint256[]",
        "name": "nums",
        "type": "uint256[]"
      },
      {
        "internalType": "uint256[]",
        "name": "dens",
        "type": "uint256[]"
      }
    ],
    "name": "setRates",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
] as const;

  const _bytecode = "0x608060405234801561000f575f80fd5b50610dd48061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c806307039a2b1461004e57806350e300421461006a578063a36b7d7f1461009b578063d06ca61f146100b7575b5f80fd5b610068600480360381019061006391906106bb565b6100e7565b005b610084600480360381019061007f91906107f9565b610202565b60405161009292919061084f565b60405180910390f35b6100b560048036038101906100b091906108a0565b61022c565b005b6100d160048036038101906100cc9190610904565b61037c565b6040516100de9190610a18565b60405180910390f35b858590508888905014801561010157508383905088889050145b801561011257508181905084849050145b610151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014890610a92565b60405180910390fd5b5f5b888890508110156101f7576101ea89898381811061017457610173610ab0565b5b90506020020160208101906101899190610add565b88888481811061019c5761019b610ab0565b5b90506020020160208101906101b19190610add565b8787858181106101c4576101c3610ab0565b5b905060200201358686868181106101de576101dd610ab0565b5b9050602002013561022c565b8080600101915050610153565b505050505050505050565b5f602052815f5260405f20602052805f5260405f205f9150915050805f0154908060010154905082565b5f810361026e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026590610b52565b60405180910390fd5b6040518060400160405280838152602001828152505f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f0155602082015181600101559050508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167ff7e06908c466f8ecd19cb46c7e97598dc5a8760f637bb764d91fc4b6da7664ef848460405161036e92919061084f565b60405180910390a350505050565b606060028383905010156103c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bc90610bba565b60405180910390fd5b8282905067ffffffffffffffff8111156103e2576103e1610bd8565b5b6040519080825280602002602001820160405280156104105781602001602082028036833780820191505090505b50905083815f8151811061042757610426610ab0565b5b6020026020010181815250505f5b6001848490506104459190610c32565b8110156105f5575f805f86868581811061046257610461610ab0565b5b90506020020160208101906104779190610add565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f86866001866104c09190610c65565b8181106104d0576104cf610ab0565b5b90506020020160208101906104e59190610add565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060400160405290815f820154815260200160018201548152505090505f816020015103610584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057b90610ce2565b60405180910390fd5b8060200151815f01518484815181106105a05761059f610ab0565b5b60200260200101516105b29190610d00565b6105bc9190610d6e565b836001846105ca9190610c65565b815181106105db576105da610ab0565b5b602002602001018181525050508080600101915050610435565b509392505050565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261062657610625610605565b5b8235905067ffffffffffffffff81111561064357610642610609565b5b60208301915083602082028301111561065f5761065e61060d565b5b9250929050565b5f8083601f84011261067b5761067a610605565b5b8235905067ffffffffffffffff81111561069857610697610609565b5b6020830191508360208202830111156106b4576106b361060d565b5b9250929050565b5f805f805f805f806080898b0312156106d7576106d66105fd565b5b5f89013567ffffffffffffffff8111156106f4576106f3610601565b5b6107008b828c01610611565b9850985050602089013567ffffffffffffffff81111561072357610722610601565b5b61072f8b828c01610611565b9650965050604089013567ffffffffffffffff81111561075257610751610601565b5b61075e8b828c01610666565b9450945050606089013567ffffffffffffffff81111561078157610780610601565b5b61078d8b828c01610666565b92509250509295985092959890939650565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6107c88261079f565b9050919050565b6107d8816107be565b81146107e2575f80fd5b50565b5f813590506107f3816107cf565b92915050565b5f806040838503121561080f5761080e6105fd565b5b5f61081c858286016107e5565b925050602061082d858286016107e5565b9150509250929050565b5f819050919050565b61084981610837565b82525050565b5f6040820190506108625f830185610840565b61086f6020830184610840565b9392505050565b61087f81610837565b8114610889575f80fd5b50565b5f8135905061089a81610876565b92915050565b5f805f80608085870312156108b8576108b76105fd565b5b5f6108c5878288016107e5565b94505060206108d6878288016107e5565b93505060406108e78782880161088c565b92505060606108f88782880161088c565b91505092959194509250565b5f805f6040848603121561091b5761091a6105fd565b5b5f6109288682870161088c565b935050602084013567ffffffffffffffff81111561094957610948610601565b5b61095586828701610611565b92509250509250925092565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61099381610837565b82525050565b5f6109a4838361098a565b60208301905092915050565b5f602082019050919050565b5f6109c682610961565b6109d0818561096b565b93506109db8361097b565b805f5b83811015610a0b5781516109f28882610999565b97506109fd836109b0565b9250506001810190506109de565b5085935050505092915050565b5f6020820190508181035f830152610a3081846109bc565b905092915050565b5f82825260208201905092915050565b7f4c454e00000000000000000000000000000000000000000000000000000000005f82015250565b5f610a7c600383610a38565b9150610a8782610a48565b602082019050919050565b5f6020820190508181035f830152610aa981610a70565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215610af257610af16105fd565b5b5f610aff848285016107e5565b91505092915050565b7f44454e3d300000000000000000000000000000000000000000000000000000005f82015250565b5f610b3c600583610a38565b9150610b4782610b08565b602082019050919050565b5f6020820190508181035f830152610b6981610b30565b9050919050565b7f50415448000000000000000000000000000000000000000000000000000000005f82015250565b5f610ba4600483610a38565b9150610baf82610b70565b602082019050919050565b5f6020820190508181035f830152610bd181610b98565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610c3c82610837565b9150610c4783610837565b9250828203905081811115610c5f57610c5e610c05565b5b92915050565b5f610c6f82610837565b9150610c7a83610837565b9250828201905080821115610c9257610c91610c05565b5b92915050565b7f4e4f5f52415445000000000000000000000000000000000000000000000000005f82015250565b5f610ccc600783610a38565b9150610cd782610c98565b602082019050919050565b5f6020820190508181035f830152610cf981610cc0565b9050919050565b5f610d0a82610837565b9150610d1583610837565b9250828202610d2381610837565b91508282048414831517610d3a57610d39610c05565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f610d7882610837565b9150610d8383610837565b925082610d9357610d92610d41565b5b82820490509291505056fea2646970667358221220dccec7fc943c3f10715e84aba93cf17a71d6027981f616591ab25c7c3862ee6664736f6c63430008180033";

  
      type MockPancakeRouterConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: MockPancakeRouterConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class MockPancakeRouter__factory extends ContractFactory {
    
      constructor(...args: MockPancakeRouterConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<MockPancakeRouter & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): MockPancakeRouter__factory {
      return super.connect(runner) as MockPancakeRouter__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockPancakeRouterInterface {
      return new Interface(_abi) as MockPancakeRouterInterface;
    }
    
    override attach(address: string | Addressable): MockPancakeRouter {
      return super.attach(address) as MockPancakeRouter;
    }
  static connect(address: string, runner?: ContractRunner | null): MockPancakeRouter {
      return new Contract(address, _abi, runner) as unknown as MockPancakeRouter;
    }
  }

  
  