/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { MockUSDT, MockUSDTInterface } from "../../mocks/MockUSDT.js";

  const _abi = [
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "owner",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "spender",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "Approval",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "from",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "Transfer",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "allowance",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "spender",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "approve",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "balanceOf",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "from",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "burn",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "decimals",
    "outputs": [
      {
        "internalType": "uint8",
        "name": "",
        "type": "uint8"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "_name",
        "type": "string"
      },
      {
        "internalType": "string",
        "name": "_symbol",
        "type": "string"
      },
      {
        "internalType": "uint8",
        "name": "_decimals",
        "type": "uint8"
      }
    ],
    "name": "initialize",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint8",
        "name": "usdtDecimals",
        "type": "uint8"
      }
    ],
    "name": "initialize",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "mint",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "name",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "symbol",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "totalSupply",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "transfer",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "from",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "transferFrom",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  }
] as const;

  const _bytecode = "0x608060405234801561000f575f80fd5b506114da8061001d5f395ff3fe608060405234801561000f575f80fd5b50600436106100cd575f3560e01c806340c10f191161008a57806395d89b411161006457806395d89b411461020f5780639dc29fac1461022d578063a9059cbb14610249578063dd62ed3e14610279576100cd565b806340c10f19146101a75780634351e6b6146101c357806370a08231146101df576100cd565b806306fdde03146100d1578063095ea7b3146100ef5780631624f6c61461011f57806318160ddd1461013b57806323b872dd14610159578063313ce56714610189575b5f80fd5b6100d96102a9565b6040516100e69190610bc3565b60405180910390f35b61010960048036038101906101049190610c81565b610334565b6040516101169190610cd9565b60405180910390f35b61013960048036038101906101349190610e54565b610421565b005b6101436104b1565b6040516101509190610eeb565b60405180910390f35b610173600480360381019061016e9190610f04565b6104b7565b6040516101809190610cd9565b60405180910390f35b61019161063e565b60405161019e9190610f63565b60405180910390f35b6101c160048036038101906101bc9190610c81565b610650565b005b6101dd60048036038101906101d89190610f7c565b610724565b005b6101f960048036038101906101f49190610fa7565b61077e565b6040516102069190610eeb565b60405180910390f35b610217610793565b6040516102249190610bc3565b60405180910390f35b61024760048036038101906102429190610c81565b61081f565b005b610263600480360381019061025e9190610c81565b610973565b6040516102709190610cd9565b60405180910390f35b610293600480360381019061028e9190610fd2565b610989565b6040516102a09190610eeb565b60405180910390f35b5f80546102b59061103d565b80601f01602080910402602001604051908101604052809291908181526020018280546102e19061103d565b801561032c5780601f106103035761010080835404028352916020019161032c565b820191905f5260205f20905b81548152906001019060200180831161030f57829003601f168201915b505050505081565b5f8160045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161040f9190610eeb565b60405180910390a36001905092915050565b5f80805461042e9061103d565b905014801561044a57505f600180546104469061103d565b9050145b610489576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610480906110b7565b60405180910390fd5b825f90816104979190611272565b5081600190816104a79190611272565b5080600255505050565b60055481565b5f8060045f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082811015610577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056e9061138b565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106275782816105aa91906113d6565b60045f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505b6106328585856109a9565b60019150509392505050565b60025f9054906101000a900460ff1681565b8060055f8282546106619190611409565b925050819055508060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546106b49190611409565b925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516107189190610eeb565b60405180910390a35050565b5f60025f9054906101000a900460ff1660ff1614610777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076e906110b7565b60405180910390fd5b8060025550565b6003602052805f5260405f205f915090505481565b600180546107a09061103d565b80601f01602080910402602001604051908101604052809291908181526020018280546107cc9061103d565b80156108175780601f106107ee57610100808354040283529160200191610817565b820191905f5260205f20905b8154815290600101906020018083116107fa57829003601f168201915b505050505081565b8060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054101561089f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089690611486565b60405180910390fd5b8060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546108eb91906113d6565b925050819055508060055f82825461090391906113d6565b925050819055505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516109679190610eeb565b60405180910390a35050565b5f61097f3384846109a9565b6001905092915050565b6004602052815f5260405f20602052805f5260405f205f91509150505481565b8060035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541015610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2090611486565b60405180910390fd5b8060035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610a7591906113d6565b925050819055508060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610ac89190611409565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b2c9190610eeb565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610b70578082015181840152602081019050610b55565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610b9582610b39565b610b9f8185610b43565b9350610baf818560208601610b53565b610bb881610b7b565b840191505092915050565b5f6020820190508181035f830152610bdb8184610b8b565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610c1d82610bf4565b9050919050565b610c2d81610c13565b8114610c37575f80fd5b50565b5f81359050610c4881610c24565b92915050565b5f819050919050565b610c6081610c4e565b8114610c6a575f80fd5b50565b5f81359050610c7b81610c57565b92915050565b5f8060408385031215610c9757610c96610bec565b5b5f610ca485828601610c3a565b9250506020610cb585828601610c6d565b9150509250929050565b5f8115159050919050565b610cd381610cbf565b82525050565b5f602082019050610cec5f830184610cca565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610d3082610b7b565b810181811067ffffffffffffffff82111715610d4f57610d4e610cfa565b5b80604052505050565b5f610d61610be3565b9050610d6d8282610d27565b919050565b5f67ffffffffffffffff821115610d8c57610d8b610cfa565b5b610d9582610b7b565b9050602081019050919050565b828183375f83830152505050565b5f610dc2610dbd84610d72565b610d58565b905082815260208101848484011115610dde57610ddd610cf6565b5b610de9848285610da2565b509392505050565b5f82601f830112610e0557610e04610cf2565b5b8135610e15848260208601610db0565b91505092915050565b5f60ff82169050919050565b610e3381610e1e565b8114610e3d575f80fd5b50565b5f81359050610e4e81610e2a565b92915050565b5f805f60608486031215610e6b57610e6a610bec565b5b5f84013567ffffffffffffffff811115610e8857610e87610bf0565b5b610e9486828701610df1565b935050602084013567ffffffffffffffff811115610eb557610eb4610bf0565b5b610ec186828701610df1565b9250506040610ed286828701610e40565b9150509250925092565b610ee581610c4e565b82525050565b5f602082019050610efe5f830184610edc565b92915050565b5f805f60608486031215610f1b57610f1a610bec565b5b5f610f2886828701610c3a565b9350506020610f3986828701610c3a565b9250506040610f4a86828701610c6d565b9150509250925092565b610f5d81610e1e565b82525050565b5f602082019050610f765f830184610f54565b92915050565b5f60208284031215610f9157610f90610bec565b5b5f610f9e84828501610e40565b91505092915050565b5f60208284031215610fbc57610fbb610bec565b5b5f610fc984828501610c3a565b91505092915050565b5f8060408385031215610fe857610fe7610bec565b5b5f610ff585828601610c3a565b925050602061100685828601610c3a565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061105457607f821691505b60208210810361106757611066611010565b5b50919050565b7f416c726561647920696e697469616c697a6564000000000000000000000000005f82015250565b5f6110a1601383610b43565b91506110ac8261106d565b602082019050919050565b5f6020820190508181035f8301526110ce81611095565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026111317fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826110f6565b61113b86836110f6565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61117661117161116c84610c4e565b611153565b610c4e565b9050919050565b5f819050919050565b61118f8361115c565b6111a361119b8261117d565b848454611102565b825550505050565b5f90565b6111b76111ab565b6111c2818484611186565b505050565b5b818110156111e5576111da5f826111af565b6001810190506111c8565b5050565b601f82111561122a576111fb816110d5565b611204846110e7565b81016020851015611213578190505b61122761121f856110e7565b8301826111c7565b50505b505050565b5f82821c905092915050565b5f61124a5f198460080261122f565b1980831691505092915050565b5f611262838361123b565b9150826002028217905092915050565b61127b82610b39565b67ffffffffffffffff81111561129457611293610cfa565b5b61129e825461103d565b6112a98282856111e9565b5f60209050601f8311600181146112da575f84156112c8578287015190505b6112d28582611257565b865550611339565b601f1984166112e8866110d5565b5f5b8281101561130f578489015182556001820191506020850194506020810190506112ea565b8683101561132c5784890151611328601f89168261123b565b8355505b6001600288020188555050505b505050505050565b7f414c4c4f57414e434500000000000000000000000000000000000000000000005f82015250565b5f611375600983610b43565b915061138082611341565b602082019050919050565b5f6020820190508181035f8301526113a281611369565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6113e082610c4e565b91506113eb83610c4e565b9250828203905081811115611403576114026113a9565b5b92915050565b5f61141382610c4e565b915061141e83610c4e565b9250828201905080821115611436576114356113a9565b5b92915050565b7f42414c5f4c4f57000000000000000000000000000000000000000000000000005f82015250565b5f611470600783610b43565b915061147b8261143c565b602082019050919050565b5f6020820190508181035f83015261149d81611464565b905091905056fea2646970667358221220182199ff93f96f99fc355f940bde2bc76ecce3102b7ecb8183fbee49ee330d2e64736f6c63430008180033";

  
      type MockUSDTConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: MockUSDTConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class MockUSDT__factory extends ContractFactory {
    
      constructor(...args: MockUSDTConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<MockUSDT & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): MockUSDT__factory {
      return super.connect(runner) as MockUSDT__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockUSDTInterface {
      return new Interface(_abi) as MockUSDTInterface;
    }
    
    override attach(address: string | Addressable): MockUSDT {
      return super.attach(address) as MockUSDT;
    }
  static connect(address: string, runner?: ContractRunner | null): MockUSDT {
      return new Contract(address, _abi, runner) as unknown as MockUSDT;
    }
  }

  
  