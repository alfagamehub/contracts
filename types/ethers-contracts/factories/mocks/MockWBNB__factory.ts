/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { MockWBNB, MockWBNBInterface } from "../../mocks/MockWBNB.js";

  const _abi = [
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "owner",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "spender",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "Approval",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "from",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "Transfer",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "allowance",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "spender",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "approve",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "balanceOf",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "from",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "burn",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "decimals",
    "outputs": [
      {
        "internalType": "uint8",
        "name": "",
        "type": "uint8"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "deposit",
    "outputs": [],
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "_name",
        "type": "string"
      },
      {
        "internalType": "string",
        "name": "_symbol",
        "type": "string"
      },
      {
        "internalType": "uint8",
        "name": "_decimals",
        "type": "uint8"
      }
    ],
    "name": "initialize",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "initialize",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "mint",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "name",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "symbol",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "totalSupply",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "transfer",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "from",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "transferFrom",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "wad",
        "type": "uint256"
      }
    ],
    "name": "withdraw",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "stateMutability": "payable",
    "type": "receive"
  }
] as const;

  const _bytecode = "0x608060405234801561000f575f80fd5b50611a738061001d5f395ff3fe6080604052600436106100eb575f3560e01c806340c10f19116100895780639dc29fac116100585780639dc29fac146102ea578063a9059cbb14610312578063d0e30db01461034e578063dd62ed3e14610358576100fc565b806340c10f191461024657806370a082311461026e5780638129fc1c146102aa57806395d89b41146102c0576100fc565b806318160ddd116100c557806318160ddd1461018e57806323b872dd146101b85780632e1a7d4d146101f4578063313ce5671461021c576100fc565b806306fdde0314610100578063095ea7b31461012a5780631624f6c614610166576100fc565b366100fc576100fa3334610394565b005b5f80fd5b34801561010b575f80fd5b50610114610468565b6040516101219190610fa7565b60405180910390f35b348015610135575f80fd5b50610150600480360381019061014b9190611065565b6104f3565b60405161015d91906110bd565b60405180910390f35b348015610171575f80fd5b5061018c60048036038101906101879190611238565b6105e0565b005b348015610199575f80fd5b506101a2610670565b6040516101af91906112cf565b60405180910390f35b3480156101c3575f80fd5b506101de60048036038101906101d991906112e8565b610676565b6040516101eb91906110bd565b60405180910390f35b3480156101ff575f80fd5b5061021a60048036038101906102159190611338565b6107fd565b005b348015610227575f80fd5b50610230610933565b60405161023d9190611372565b60405180910390f35b348015610251575f80fd5b5061026c60048036038101906102679190611065565b610945565b005b348015610279575f80fd5b50610294600480360381019061028f919061138b565b610a19565b6040516102a191906112cf565b60405180910390f35b3480156102b5575f80fd5b506102be610a2e565b005b3480156102cb575f80fd5b506102d4610a97565b6040516102e19190610fa7565b60405180910390f35b3480156102f5575f80fd5b50610310600480360381019061030b9190611065565b610b23565b005b34801561031d575f80fd5b5061033860048036038101906103339190611065565b610c77565b60405161034591906110bd565b60405180910390f35b610356610c8d565b005b348015610363575f80fd5b5061037e600480360381019061037991906113b6565b610c99565b60405161038b91906112cf565b60405180910390f35b8060055f8282546103a59190611421565b925050819055508060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546103f89190611421565b925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161045c91906112cf565b60405180910390a35050565b5f805461047490611481565b80601f01602080910402602001604051908101604052809291908181526020018280546104a090611481565b80156104eb5780601f106104c2576101008083540402835291602001916104eb565b820191905f5260205f20905b8154815290600101906020018083116104ce57829003601f168201915b505050505081565b5f8160045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516105ce91906112cf565b60405180910390a36001905092915050565b5f8080546105ed90611481565b905014801561060957505f6001805461060590611481565b9050145b610648576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063f906114fb565b60405180910390fd5b825f908161065691906116b6565b50816001908161066691906116b6565b5080600255505050565b60055481565b5f8060045f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082811015610736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072d906117cf565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107e657828161076991906117ed565b60045f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505b6107f1858585610cb9565b60019150509392505050565b8060035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054101561087d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108749061186a565b60405180910390fd5b6108873382610e49565b5f3373ffffffffffffffffffffffffffffffffffffffff16826040516108ac906118b5565b5f6040518083038185875af1925050503d805f81146108e6576040519150601f19603f3d011682016040523d82523d5f602084013e6108eb565b606091505b505090508061092f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092690611913565b60405180910390fd5b5050565b60025f9054906101000a900460ff1681565b8060055f8282546109569190611421565b925050819055508060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546109a99190611421565b925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a0d91906112cf565b60405180910390a35050565b6003602052805f5260405f205f915090505481565b3073ffffffffffffffffffffffffffffffffffffffff16631624f6c660126040518263ffffffff1660e01b8152600401610a6891906119fe565b5f604051808303815f87803b158015610a7f575f80fd5b505af1158015610a91573d5f803e3d5ffd5b50505050565b60018054610aa490611481565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad090611481565b8015610b1b5780601f10610af257610100808354040283529160200191610b1b565b820191905f5260205f20905b815481529060010190602001808311610afe57829003601f168201915b505050505081565b8060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541015610ba3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9a9061186a565b60405180910390fd5b8060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610bef91906117ed565b925050819055508060055f828254610c0791906117ed565b925050819055505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610c6b91906112cf565b60405180910390a35050565b5f610c83338484610cb9565b6001905092915050565b610c973334610394565b565b6004602052815f5260405f20602052805f5260405f205f91509150505481565b8060035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541015610d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d309061186a565b60405180910390fd5b8060035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610d8591906117ed565b925050819055508060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610dd89190611421565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e3c91906112cf565b60405180910390a3505050565b8060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610e9591906117ed565b925050819055508060055f828254610ead91906117ed565b925050819055505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610f1191906112cf565b60405180910390a35050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610f54578082015181840152602081019050610f39565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610f7982610f1d565b610f838185610f27565b9350610f93818560208601610f37565b610f9c81610f5f565b840191505092915050565b5f6020820190508181035f830152610fbf8184610f6f565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61100182610fd8565b9050919050565b61101181610ff7565b811461101b575f80fd5b50565b5f8135905061102c81611008565b92915050565b5f819050919050565b61104481611032565b811461104e575f80fd5b50565b5f8135905061105f8161103b565b92915050565b5f806040838503121561107b5761107a610fd0565b5b5f6110888582860161101e565b925050602061109985828601611051565b9150509250929050565b5f8115159050919050565b6110b7816110a3565b82525050565b5f6020820190506110d05f8301846110ae565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61111482610f5f565b810181811067ffffffffffffffff82111715611133576111326110de565b5b80604052505050565b5f611145610fc7565b9050611151828261110b565b919050565b5f67ffffffffffffffff8211156111705761116f6110de565b5b61117982610f5f565b9050602081019050919050565b828183375f83830152505050565b5f6111a66111a184611156565b61113c565b9050828152602081018484840111156111c2576111c16110da565b5b6111cd848285611186565b509392505050565b5f82601f8301126111e9576111e86110d6565b5b81356111f9848260208601611194565b91505092915050565b5f60ff82169050919050565b61121781611202565b8114611221575f80fd5b50565b5f813590506112328161120e565b92915050565b5f805f6060848603121561124f5761124e610fd0565b5b5f84013567ffffffffffffffff81111561126c5761126b610fd4565b5b611278868287016111d5565b935050602084013567ffffffffffffffff81111561129957611298610fd4565b5b6112a5868287016111d5565b92505060406112b686828701611224565b9150509250925092565b6112c981611032565b82525050565b5f6020820190506112e25f8301846112c0565b92915050565b5f805f606084860312156112ff576112fe610fd0565b5b5f61130c8682870161101e565b935050602061131d8682870161101e565b925050604061132e86828701611051565b9150509250925092565b5f6020828403121561134d5761134c610fd0565b5b5f61135a84828501611051565b91505092915050565b61136c81611202565b82525050565b5f6020820190506113855f830184611363565b92915050565b5f602082840312156113a05761139f610fd0565b5b5f6113ad8482850161101e565b91505092915050565b5f80604083850312156113cc576113cb610fd0565b5b5f6113d98582860161101e565b92505060206113ea8582860161101e565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61142b82611032565b915061143683611032565b925082820190508082111561144e5761144d6113f4565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061149857607f821691505b6020821081036114ab576114aa611454565b5b50919050565b7f416c726561647920696e697469616c697a6564000000000000000000000000005f82015250565b5f6114e5601383610f27565b91506114f0826114b1565b602082019050919050565b5f6020820190508181035f830152611512816114d9565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026115757fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261153a565b61157f868361153a565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6115ba6115b56115b084611032565b611597565b611032565b9050919050565b5f819050919050565b6115d3836115a0565b6115e76115df826115c1565b848454611546565b825550505050565b5f90565b6115fb6115ef565b6116068184846115ca565b505050565b5b818110156116295761161e5f826115f3565b60018101905061160c565b5050565b601f82111561166e5761163f81611519565b6116488461152b565b81016020851015611657578190505b61166b6116638561152b565b83018261160b565b50505b505050565b5f82821c905092915050565b5f61168e5f1984600802611673565b1980831691505092915050565b5f6116a6838361167f565b9150826002028217905092915050565b6116bf82610f1d565b67ffffffffffffffff8111156116d8576116d76110de565b5b6116e28254611481565b6116ed82828561162d565b5f60209050601f83116001811461171e575f841561170c578287015190505b611716858261169b565b86555061177d565b601f19841661172c86611519565b5f5b828110156117535784890151825560018201915060208501945060208101905061172e565b86831015611770578489015161176c601f89168261167f565b8355505b6001600288020188555050505b505050505050565b7f414c4c4f57414e434500000000000000000000000000000000000000000000005f82015250565b5f6117b9600983610f27565b91506117c482611785565b602082019050919050565b5f6020820190508181035f8301526117e6816117ad565b9050919050565b5f6117f782611032565b915061180283611032565b925082820390508181111561181a576118196113f4565b5b92915050565b7f42414c5f4c4f57000000000000000000000000000000000000000000000000005f82015250565b5f611854600783610f27565b915061185f82611820565b602082019050919050565b5f6020820190508181035f83015261188181611848565b9050919050565b5f81905092915050565b50565b5f6118a05f83611888565b91506118ab82611892565b5f82019050919050565b5f6118bf82611895565b9150819050919050565b7f53454e445f4641494c00000000000000000000000000000000000000000000005f82015250565b5f6118fd600983610f27565b9150611908826118c9565b602082019050919050565b5f6020820190508181035f83015261192a816118f1565b9050919050565b7f5772617070656420424e4220284d6f636b2900000000000000000000000000005f82015250565b5f611965601283610f27565b915061197082611931565b602082019050919050565b7f57424e42000000000000000000000000000000000000000000000000000000005f82015250565b5f6119af600483610f27565b91506119ba8261197b565b602082019050919050565b5f819050919050565b5f6119e86119e36119de846119c5565b611597565b611202565b9050919050565b6119f8816119ce565b82525050565b5f6060820190508181035f830152611a1581611959565b90508181036020830152611a28816119a3565b9050611a3760408301846119ef565b9291505056fea2646970667358221220e6a3a48fc770f4a7bba8d0c761db35507c949a46de7f3ad435d1207c9173085664736f6c63430008180033";

  
      type MockWBNBConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: MockWBNBConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class MockWBNB__factory extends ContractFactory {
    
      constructor(...args: MockWBNBConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<MockWBNB & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): MockWBNB__factory {
      return super.connect(runner) as MockWBNB__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockWBNBInterface {
      return new Interface(_abi) as MockWBNBInterface;
    }
    
    override attach(address: string | Addressable): MockWBNB {
      return super.attach(address) as MockWBNB;
    }
  static connect(address: string, runner?: ContractRunner | null): MockWBNB {
      return new Contract(address, _abi, runner) as unknown as MockWBNB;
    }
  }

  
  