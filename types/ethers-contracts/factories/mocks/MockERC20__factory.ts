/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { MockERC20, MockERC20Interface } from "../../mocks/MockERC20.js";

  const _abi = [
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "owner",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "spender",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "Approval",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "from",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "Transfer",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "allowance",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "spender",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "approve",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "balanceOf",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "from",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "burn",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "decimals",
    "outputs": [
      {
        "internalType": "uint8",
        "name": "",
        "type": "uint8"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "_name",
        "type": "string"
      },
      {
        "internalType": "string",
        "name": "_symbol",
        "type": "string"
      },
      {
        "internalType": "uint8",
        "name": "_decimals",
        "type": "uint8"
      }
    ],
    "name": "initialize",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "mint",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "name",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "symbol",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "totalSupply",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "transfer",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "from",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "transferFrom",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  }
] as const;

  const _bytecode = "0x608060405234801561000f575f80fd5b5061141e8061001d5f395ff3fe608060405234801561000f575f80fd5b50600436106100b2575f3560e01c806340c10f191161006f57806340c10f191461018c57806370a08231146101a857806395d89b41146101d85780639dc29fac146101f6578063a9059cbb14610212578063dd62ed3e14610242576100b2565b806306fdde03146100b6578063095ea7b3146100d45780631624f6c61461010457806318160ddd1461012057806323b872dd1461013e578063313ce5671461016e575b5f80fd5b6100be610272565b6040516100cb9190610b32565b60405180910390f35b6100ee60048036038101906100e99190610bf0565b6102fd565b6040516100fb9190610c48565b60405180910390f35b61011e60048036038101906101199190610dc3565b6103ea565b005b61012861047a565b6040516101359190610e5a565b60405180910390f35b61015860048036038101906101539190610e73565b610480565b6040516101659190610c48565b60405180910390f35b610176610607565b6040516101839190610ed2565b60405180910390f35b6101a660048036038101906101a19190610bf0565b610619565b005b6101c260048036038101906101bd9190610eeb565b6106ed565b6040516101cf9190610e5a565b60405180910390f35b6101e0610702565b6040516101ed9190610b32565b60405180910390f35b610210600480360381019061020b9190610bf0565b61078e565b005b61022c60048036038101906102279190610bf0565b6108e2565b6040516102399190610c48565b60405180910390f35b61025c60048036038101906102579190610f16565b6108f8565b6040516102699190610e5a565b60405180910390f35b5f805461027e90610f81565b80601f01602080910402602001604051908101604052809291908181526020018280546102aa90610f81565b80156102f55780601f106102cc576101008083540402835291602001916102f5565b820191905f5260205f20905b8154815290600101906020018083116102d857829003601f168201915b505050505081565b5f8160045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103d89190610e5a565b60405180910390a36001905092915050565b5f8080546103f790610f81565b905014801561041357505f6001805461040f90610f81565b9050145b610452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044990610ffb565b60405180910390fd5b825f908161046091906111b6565b50816001908161047091906111b6565b5080600255505050565b60055481565b5f8060045f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082811015610540576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610537906112cf565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146105f0578281610573919061131a565b60045f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505b6105fb858585610918565b60019150509392505050565b60025f9054906101000a900460ff1681565b8060055f82825461062a919061134d565b925050819055508060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461067d919061134d565b925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516106e19190610e5a565b60405180910390a35050565b6003602052805f5260405f205f915090505481565b6001805461070f90610f81565b80601f016020809104026020016040519081016040528092919081815260200182805461073b90610f81565b80156107865780601f1061075d57610100808354040283529160200191610786565b820191905f5260205f20905b81548152906001019060200180831161076957829003601f168201915b505050505081565b8060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054101561080e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610805906113ca565b60405180910390fd5b8060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461085a919061131a565b925050819055508060055f828254610872919061131a565b925050819055505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516108d69190610e5a565b60405180910390a35050565b5f6108ee338484610918565b6001905092915050565b6004602052815f5260405f20602052805f5260405f205f91509150505481565b8060035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541015610998576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906113ca565b60405180910390fd5b8060035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546109e4919061131a565b925050819055508060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610a37919061134d565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a9b9190610e5a565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610adf578082015181840152602081019050610ac4565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610b0482610aa8565b610b0e8185610ab2565b9350610b1e818560208601610ac2565b610b2781610aea565b840191505092915050565b5f6020820190508181035f830152610b4a8184610afa565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610b8c82610b63565b9050919050565b610b9c81610b82565b8114610ba6575f80fd5b50565b5f81359050610bb781610b93565b92915050565b5f819050919050565b610bcf81610bbd565b8114610bd9575f80fd5b50565b5f81359050610bea81610bc6565b92915050565b5f8060408385031215610c0657610c05610b5b565b5b5f610c1385828601610ba9565b9250506020610c2485828601610bdc565b9150509250929050565b5f8115159050919050565b610c4281610c2e565b82525050565b5f602082019050610c5b5f830184610c39565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610c9f82610aea565b810181811067ffffffffffffffff82111715610cbe57610cbd610c69565b5b80604052505050565b5f610cd0610b52565b9050610cdc8282610c96565b919050565b5f67ffffffffffffffff821115610cfb57610cfa610c69565b5b610d0482610aea565b9050602081019050919050565b828183375f83830152505050565b5f610d31610d2c84610ce1565b610cc7565b905082815260208101848484011115610d4d57610d4c610c65565b5b610d58848285610d11565b509392505050565b5f82601f830112610d7457610d73610c61565b5b8135610d84848260208601610d1f565b91505092915050565b5f60ff82169050919050565b610da281610d8d565b8114610dac575f80fd5b50565b5f81359050610dbd81610d99565b92915050565b5f805f60608486031215610dda57610dd9610b5b565b5b5f84013567ffffffffffffffff811115610df757610df6610b5f565b5b610e0386828701610d60565b935050602084013567ffffffffffffffff811115610e2457610e23610b5f565b5b610e3086828701610d60565b9250506040610e4186828701610daf565b9150509250925092565b610e5481610bbd565b82525050565b5f602082019050610e6d5f830184610e4b565b92915050565b5f805f60608486031215610e8a57610e89610b5b565b5b5f610e9786828701610ba9565b9350506020610ea886828701610ba9565b9250506040610eb986828701610bdc565b9150509250925092565b610ecc81610d8d565b82525050565b5f602082019050610ee55f830184610ec3565b92915050565b5f60208284031215610f0057610eff610b5b565b5b5f610f0d84828501610ba9565b91505092915050565b5f8060408385031215610f2c57610f2b610b5b565b5b5f610f3985828601610ba9565b9250506020610f4a85828601610ba9565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610f9857607f821691505b602082108103610fab57610faa610f54565b5b50919050565b7f416c726561647920696e697469616c697a6564000000000000000000000000005f82015250565b5f610fe5601383610ab2565b9150610ff082610fb1565b602082019050919050565b5f6020820190508181035f83015261101281610fd9565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026110757fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261103a565b61107f868361103a565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6110ba6110b56110b084610bbd565b611097565b610bbd565b9050919050565b5f819050919050565b6110d3836110a0565b6110e76110df826110c1565b848454611046565b825550505050565b5f90565b6110fb6110ef565b6111068184846110ca565b505050565b5b818110156111295761111e5f826110f3565b60018101905061110c565b5050565b601f82111561116e5761113f81611019565b6111488461102b565b81016020851015611157578190505b61116b6111638561102b565b83018261110b565b50505b505050565b5f82821c905092915050565b5f61118e5f1984600802611173565b1980831691505092915050565b5f6111a6838361117f565b9150826002028217905092915050565b6111bf82610aa8565b67ffffffffffffffff8111156111d8576111d7610c69565b5b6111e28254610f81565b6111ed82828561112d565b5f60209050601f83116001811461121e575f841561120c578287015190505b611216858261119b565b86555061127d565b601f19841661122c86611019565b5f5b828110156112535784890151825560018201915060208501945060208101905061122e565b86831015611270578489015161126c601f89168261117f565b8355505b6001600288020188555050505b505050505050565b7f414c4c4f57414e434500000000000000000000000000000000000000000000005f82015250565b5f6112b9600983610ab2565b91506112c482611285565b602082019050919050565b5f6020820190508181035f8301526112e6816112ad565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61132482610bbd565b915061132f83610bbd565b9250828203905081811115611347576113466112ed565b5b92915050565b5f61135782610bbd565b915061136283610bbd565b925082820190508082111561137a576113796112ed565b5b92915050565b7f42414c5f4c4f57000000000000000000000000000000000000000000000000005f82015250565b5f6113b4600783610ab2565b91506113bf82611380565b602082019050919050565b5f6020820190508181035f8301526113e1816113a8565b905091905056fea2646970667358221220e6b6009e83896d98057113ff8a2f69ec03fcaf6b670933cfe331382591a3e8f364736f6c63430008180033";

  
      type MockERC20ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: MockERC20ConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class MockERC20__factory extends ContractFactory {
    
      constructor(...args: MockERC20ConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): MockERC20__factory {
      return super.connect(runner) as MockERC20__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockERC20Interface {
      return new Interface(_abi) as MockERC20Interface;
    }
    
    override attach(address: string | Addressable): MockERC20 {
      return super.attach(address) as MockERC20;
    }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
      return new Contract(address, _abi, runner) as unknown as MockERC20;
    }
  }

  
  