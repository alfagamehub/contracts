/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
    export type UpgradeChanceStruct = {typeId: BigNumberish, chance: BigNumberish}

    export type UpgradeChanceStructOutput = [typeId: bigint, chance: bigint] & {typeId: bigint, chance: bigint }
  

    export type UpgradePriceStruct = {typeId: BigNumberish, tokenAddress: AddressLike, amount: BigNumberish}

    export type UpgradePriceStructOutput = [typeId: bigint, tokenAddress: string, amount: bigint] & {typeId: bigint, tokenAddress: string, amount: bigint }
  

  export interface IALFAForgeInterface extends Interface {
    getFunction(nameOrSignature: "addToken" | "burnAccount" | "burnShare" | "getPrices" | "getTokenAvailable" | "key" | "removeToken" | "setBurnAccount" | "setBurnShare" | "setPrices" | "setTeamAccount" | "setTokenDiscount" | "teamAccount" | "upgrade(uint256[])" | "upgrade(uint256[],address)" | "vault"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "BurnAccountRefilled" | "BurnAccountSet" | "BurnShareSet" | "KeyBurned" | "KeyUpgraded" | "PriceSet" | "ReferralRewardSent" | "TeamAccountSet" | "TeamRewardSent" | "TokenAdded" | "TokenDiscountSet" | "TokenRemoved" | "TypeDropAdded" | "TypeDropCleared"): EventFragment;

    encodeFunctionData(functionFragment: 'addToken', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'burnAccount', values?: undefined): string;
encodeFunctionData(functionFragment: 'burnShare', values?: undefined): string;
encodeFunctionData(functionFragment: 'getPrices', values?: undefined): string;
encodeFunctionData(functionFragment: 'getTokenAvailable', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'key', values?: undefined): string;
encodeFunctionData(functionFragment: 'removeToken', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'setBurnAccount', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'setBurnShare', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setPrices', values: [BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'setTeamAccount', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'setTokenDiscount', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'teamAccount', values?: undefined): string;
encodeFunctionData(functionFragment: 'upgrade(uint256[])', values: [BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'upgrade(uint256[],address)', values: [BigNumberish[], AddressLike]): string;
encodeFunctionData(functionFragment: 'vault', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'addToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'burnAccount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'burnShare', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPrices', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTokenAvailable', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'key', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setBurnAccount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setBurnShare', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setPrices', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setTeamAccount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setTokenDiscount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'teamAccount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'upgrade(uint256[])', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'upgrade(uint256[],address)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'vault', data: BytesLike): Result;
  }

  
    export namespace BurnAccountRefilledEvent {
      export type InputTuple = [holder: AddressLike, tokenAddress: AddressLike, tokenAmount: BigNumberish];
      export type OutputTuple = [holder: string, tokenAddress: string, tokenAmount: bigint];
      export interface OutputObject {holder: string, tokenAddress: string, tokenAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace BurnAccountSetEvent {
      export type InputTuple = [accountAddress: AddressLike];
      export type OutputTuple = [accountAddress: string];
      export interface OutputObject {accountAddress: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace BurnShareSetEvent {
      export type InputTuple = [sharePercents: BigNumberish];
      export type OutputTuple = [sharePercents: bigint];
      export interface OutputObject {sharePercents: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace KeyBurnedEvent {
      export type InputTuple = [holder: AddressLike, typeId: BigNumberish, tokenId: BigNumberish];
      export type OutputTuple = [holder: string, typeId: bigint, tokenId: bigint];
      export interface OutputObject {holder: string, typeId: bigint, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace KeyUpgradedEvent {
      export type InputTuple = [holder: AddressLike, typeId: BigNumberish, tokenId: BigNumberish[], newTypeId: BigNumberish, newTokenId: BigNumberish];
      export type OutputTuple = [holder: string, typeId: bigint, tokenId: bigint[], newTypeId: bigint, newTokenId: bigint];
      export interface OutputObject {holder: string, typeId: bigint, tokenId: bigint[], newTypeId: bigint, newTokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PriceSetEvent {
      export type InputTuple = [typeId: BigNumberish, price: BigNumberish];
      export type OutputTuple = [typeId: bigint, price: bigint];
      export interface OutputObject {typeId: bigint, price: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ReferralRewardSentEvent {
      export type InputTuple = [holder: AddressLike, receiver: AddressLike, child: AddressLike, tokenAddress: AddressLike, tokenAmount: BigNumberish];
      export type OutputTuple = [holder: string, receiver: string, child: string, tokenAddress: string, tokenAmount: bigint];
      export interface OutputObject {holder: string, receiver: string, child: string, tokenAddress: string, tokenAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TeamAccountSetEvent {
      export type InputTuple = [accountAddress: AddressLike];
      export type OutputTuple = [accountAddress: string];
      export interface OutputObject {accountAddress: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TeamRewardSentEvent {
      export type InputTuple = [holder: AddressLike, teamAccount: AddressLike, tokenAddress: AddressLike, tokenAmount: BigNumberish];
      export type OutputTuple = [holder: string, teamAccount: string, tokenAddress: string, tokenAmount: bigint];
      export interface OutputObject {holder: string, teamAccount: string, tokenAddress: string, tokenAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokenAddedEvent {
      export type InputTuple = [tokenAddress: AddressLike];
      export type OutputTuple = [tokenAddress: string];
      export interface OutputObject {tokenAddress: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokenDiscountSetEvent {
      export type InputTuple = [tokenAddress: AddressLike, discountPercents: BigNumberish];
      export type OutputTuple = [tokenAddress: string, discountPercents: bigint];
      export interface OutputObject {tokenAddress: string, discountPercents: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokenRemovedEvent {
      export type InputTuple = [tokenAddress: AddressLike];
      export type OutputTuple = [tokenAddress: string];
      export interface OutputObject {tokenAddress: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TypeDropAddedEvent {
      export type InputTuple = [typeId: BigNumberish, dropIndex: BigNumberish, drop: UpgradeChanceStruct];
      export type OutputTuple = [typeId: bigint, dropIndex: bigint, drop: UpgradeChanceStructOutput];
      export interface OutputObject {typeId: bigint, dropIndex: bigint, drop: UpgradeChanceStructOutput };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TypeDropClearedEvent {
      export type InputTuple = [typeId: BigNumberish];
      export type OutputTuple = [typeId: bigint];
      export interface OutputObject {typeId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface IALFAForge extends BaseContract {
    
    connect(runner?: ContractRunner | null): IALFAForge;
    waitForDeployment(): Promise<this>;

    interface: IALFAForgeInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addToken: TypedContractMethod<
      [tokenAddress: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    burnAccount: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    burnShare: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getPrices: TypedContractMethod<
      [],
      [UpgradePriceStructOutput[][]],
      'view'
    >
    

    
    getTokenAvailable: TypedContractMethod<
      [tokenAddress: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    key: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    removeToken: TypedContractMethod<
      [tokenAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    setBurnAccount: TypedContractMethod<
      [accountAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    setBurnShare: TypedContractMethod<
      [sharePercents: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setPrices: TypedContractMethod<
      [prices: BigNumberish[], ],
      [void],
      'nonpayable'
    >
    

    
    setTeamAccount: TypedContractMethod<
      [accountAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    setTokenDiscount: TypedContractMethod<
      [tokenAddress: AddressLike, discountPercents: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    teamAccount: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    "upgrade(uint256[])": TypedContractMethod<
      [tokenId: BigNumberish[], ],
      [bigint],
      'payable'
    >
    

    
    "upgrade(uint256[],address)": TypedContractMethod<
      [tokenId: BigNumberish[], tokenAddress: AddressLike, ],
      [bigint],
      'nonpayable'
    >
    

    
    vault: TypedContractMethod<
      [],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addToken'): TypedContractMethod<
      [tokenAddress: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'burnAccount'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'burnShare'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getPrices'): TypedContractMethod<
      [],
      [UpgradePriceStructOutput[][]],
      'view'
    >;
getFunction(nameOrSignature: 'getTokenAvailable'): TypedContractMethod<
      [tokenAddress: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'key'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'removeToken'): TypedContractMethod<
      [tokenAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setBurnAccount'): TypedContractMethod<
      [accountAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setBurnShare'): TypedContractMethod<
      [sharePercents: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setPrices'): TypedContractMethod<
      [prices: BigNumberish[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setTeamAccount'): TypedContractMethod<
      [accountAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setTokenDiscount'): TypedContractMethod<
      [tokenAddress: AddressLike, discountPercents: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'teamAccount'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'upgrade(uint256[])'): TypedContractMethod<
      [tokenId: BigNumberish[], ],
      [bigint],
      'payable'
    >;
getFunction(nameOrSignature: 'upgrade(uint256[],address)'): TypedContractMethod<
      [tokenId: BigNumberish[], tokenAddress: AddressLike, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'vault'): TypedContractMethod<
      [],
      [string],
      'view'
    >;

    getEvent(key: 'BurnAccountRefilled'): TypedContractEvent<BurnAccountRefilledEvent.InputTuple, BurnAccountRefilledEvent.OutputTuple, BurnAccountRefilledEvent.OutputObject>;
getEvent(key: 'BurnAccountSet'): TypedContractEvent<BurnAccountSetEvent.InputTuple, BurnAccountSetEvent.OutputTuple, BurnAccountSetEvent.OutputObject>;
getEvent(key: 'BurnShareSet'): TypedContractEvent<BurnShareSetEvent.InputTuple, BurnShareSetEvent.OutputTuple, BurnShareSetEvent.OutputObject>;
getEvent(key: 'KeyBurned'): TypedContractEvent<KeyBurnedEvent.InputTuple, KeyBurnedEvent.OutputTuple, KeyBurnedEvent.OutputObject>;
getEvent(key: 'KeyUpgraded'): TypedContractEvent<KeyUpgradedEvent.InputTuple, KeyUpgradedEvent.OutputTuple, KeyUpgradedEvent.OutputObject>;
getEvent(key: 'PriceSet'): TypedContractEvent<PriceSetEvent.InputTuple, PriceSetEvent.OutputTuple, PriceSetEvent.OutputObject>;
getEvent(key: 'ReferralRewardSent'): TypedContractEvent<ReferralRewardSentEvent.InputTuple, ReferralRewardSentEvent.OutputTuple, ReferralRewardSentEvent.OutputObject>;
getEvent(key: 'TeamAccountSet'): TypedContractEvent<TeamAccountSetEvent.InputTuple, TeamAccountSetEvent.OutputTuple, TeamAccountSetEvent.OutputObject>;
getEvent(key: 'TeamRewardSent'): TypedContractEvent<TeamRewardSentEvent.InputTuple, TeamRewardSentEvent.OutputTuple, TeamRewardSentEvent.OutputObject>;
getEvent(key: 'TokenAdded'): TypedContractEvent<TokenAddedEvent.InputTuple, TokenAddedEvent.OutputTuple, TokenAddedEvent.OutputObject>;
getEvent(key: 'TokenDiscountSet'): TypedContractEvent<TokenDiscountSetEvent.InputTuple, TokenDiscountSetEvent.OutputTuple, TokenDiscountSetEvent.OutputObject>;
getEvent(key: 'TokenRemoved'): TypedContractEvent<TokenRemovedEvent.InputTuple, TokenRemovedEvent.OutputTuple, TokenRemovedEvent.OutputObject>;
getEvent(key: 'TypeDropAdded'): TypedContractEvent<TypeDropAddedEvent.InputTuple, TypeDropAddedEvent.OutputTuple, TypeDropAddedEvent.OutputObject>;
getEvent(key: 'TypeDropCleared'): TypedContractEvent<TypeDropClearedEvent.InputTuple, TypeDropClearedEvent.OutputTuple, TypeDropClearedEvent.OutputObject>;

    filters: {
      
      'BurnAccountRefilled(address,address,uint256)': TypedContractEvent<BurnAccountRefilledEvent.InputTuple, BurnAccountRefilledEvent.OutputTuple, BurnAccountRefilledEvent.OutputObject>;
      BurnAccountRefilled: TypedContractEvent<BurnAccountRefilledEvent.InputTuple, BurnAccountRefilledEvent.OutputTuple, BurnAccountRefilledEvent.OutputObject>;
    

      'BurnAccountSet(address)': TypedContractEvent<BurnAccountSetEvent.InputTuple, BurnAccountSetEvent.OutputTuple, BurnAccountSetEvent.OutputObject>;
      BurnAccountSet: TypedContractEvent<BurnAccountSetEvent.InputTuple, BurnAccountSetEvent.OutputTuple, BurnAccountSetEvent.OutputObject>;
    

      'BurnShareSet(uint256)': TypedContractEvent<BurnShareSetEvent.InputTuple, BurnShareSetEvent.OutputTuple, BurnShareSetEvent.OutputObject>;
      BurnShareSet: TypedContractEvent<BurnShareSetEvent.InputTuple, BurnShareSetEvent.OutputTuple, BurnShareSetEvent.OutputObject>;
    

      'KeyBurned(address,uint256,uint256)': TypedContractEvent<KeyBurnedEvent.InputTuple, KeyBurnedEvent.OutputTuple, KeyBurnedEvent.OutputObject>;
      KeyBurned: TypedContractEvent<KeyBurnedEvent.InputTuple, KeyBurnedEvent.OutputTuple, KeyBurnedEvent.OutputObject>;
    

      'KeyUpgraded(address,uint256,uint256[],uint256,uint256)': TypedContractEvent<KeyUpgradedEvent.InputTuple, KeyUpgradedEvent.OutputTuple, KeyUpgradedEvent.OutputObject>;
      KeyUpgraded: TypedContractEvent<KeyUpgradedEvent.InputTuple, KeyUpgradedEvent.OutputTuple, KeyUpgradedEvent.OutputObject>;
    

      'PriceSet(uint256,uint256)': TypedContractEvent<PriceSetEvent.InputTuple, PriceSetEvent.OutputTuple, PriceSetEvent.OutputObject>;
      PriceSet: TypedContractEvent<PriceSetEvent.InputTuple, PriceSetEvent.OutputTuple, PriceSetEvent.OutputObject>;
    

      'ReferralRewardSent(address,address,address,address,uint256)': TypedContractEvent<ReferralRewardSentEvent.InputTuple, ReferralRewardSentEvent.OutputTuple, ReferralRewardSentEvent.OutputObject>;
      ReferralRewardSent: TypedContractEvent<ReferralRewardSentEvent.InputTuple, ReferralRewardSentEvent.OutputTuple, ReferralRewardSentEvent.OutputObject>;
    

      'TeamAccountSet(address)': TypedContractEvent<TeamAccountSetEvent.InputTuple, TeamAccountSetEvent.OutputTuple, TeamAccountSetEvent.OutputObject>;
      TeamAccountSet: TypedContractEvent<TeamAccountSetEvent.InputTuple, TeamAccountSetEvent.OutputTuple, TeamAccountSetEvent.OutputObject>;
    

      'TeamRewardSent(address,address,address,uint256)': TypedContractEvent<TeamRewardSentEvent.InputTuple, TeamRewardSentEvent.OutputTuple, TeamRewardSentEvent.OutputObject>;
      TeamRewardSent: TypedContractEvent<TeamRewardSentEvent.InputTuple, TeamRewardSentEvent.OutputTuple, TeamRewardSentEvent.OutputObject>;
    

      'TokenAdded(address)': TypedContractEvent<TokenAddedEvent.InputTuple, TokenAddedEvent.OutputTuple, TokenAddedEvent.OutputObject>;
      TokenAdded: TypedContractEvent<TokenAddedEvent.InputTuple, TokenAddedEvent.OutputTuple, TokenAddedEvent.OutputObject>;
    

      'TokenDiscountSet(address,uint256)': TypedContractEvent<TokenDiscountSetEvent.InputTuple, TokenDiscountSetEvent.OutputTuple, TokenDiscountSetEvent.OutputObject>;
      TokenDiscountSet: TypedContractEvent<TokenDiscountSetEvent.InputTuple, TokenDiscountSetEvent.OutputTuple, TokenDiscountSetEvent.OutputObject>;
    

      'TokenRemoved(address)': TypedContractEvent<TokenRemovedEvent.InputTuple, TokenRemovedEvent.OutputTuple, TokenRemovedEvent.OutputObject>;
      TokenRemoved: TypedContractEvent<TokenRemovedEvent.InputTuple, TokenRemovedEvent.OutputTuple, TokenRemovedEvent.OutputObject>;
    

      'TypeDropAdded(uint256,uint256,tuple)': TypedContractEvent<TypeDropAddedEvent.InputTuple, TypeDropAddedEvent.OutputTuple, TypeDropAddedEvent.OutputObject>;
      TypeDropAdded: TypedContractEvent<TypeDropAddedEvent.InputTuple, TypeDropAddedEvent.OutputTuple, TypeDropAddedEvent.OutputObject>;
    

      'TypeDropCleared(uint256)': TypedContractEvent<TypeDropClearedEvent.InputTuple, TypeDropClearedEvent.OutputTuple, TypeDropClearedEvent.OutputObject>;
      TypeDropCleared: TypedContractEvent<TypeDropClearedEvent.InputTuple, TypeDropClearedEvent.OutputTuple, TypeDropClearedEvent.OutputObject>;
    
    };
  }