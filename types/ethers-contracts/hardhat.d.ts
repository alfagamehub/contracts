/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */


import { ethers } from 'ethers'
import { DeployContractOptions, FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from "./index.js";

declare module "@nomicfoundation/hardhat-ethers/types" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
  getContractFactory(name: 'AccessControl', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.AccessControl__factory>
getContractFactory(name: 'IAccessControl', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IAccessControl__factory>
getContractFactory(name: 'IERC20', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IERC20__factory>
getContractFactory(name: 'ERC165', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ERC165__factory>
getContractFactory(name: 'IERC165', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IERC165__factory>
getContractFactory(name: 'SafeCast', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.SafeCast__factory>
getContractFactory(name: 'ALFAGame', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ALFAGame__factory>
getContractFactory(name: 'DAOStaking', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.DAOStaking__factory>
getContractFactory(name: 'ALFAKey', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ALFAKey__factory>
getContractFactory(name: 'IALFAKey', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IALFAKey__factory>
getContractFactory(name: 'ALFALootbox', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ALFALootbox__factory>
getContractFactory(name: 'IALFALootbox', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IALFALootbox__factory>
getContractFactory(name: 'ALFAForge', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ALFAForge__factory>
getContractFactory(name: 'IALFAForge', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IALFAForge__factory>
getContractFactory(name: 'MockERC20', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockERC20__factory>
getContractFactory(name: 'MockPancakeRouter', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockPancakeRouter__factory>
getContractFactory(name: 'MockUSDT', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockUSDT__factory>
getContractFactory(name: 'MockWBNB', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockWBNB__factory>
getContractFactory(name: 'ALFAReferral', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ALFAReferral__factory>
getContractFactory(name: 'IALFAReferral', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IALFAReferral__factory>
getContractFactory(name: 'IALFAReferralPercents', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IALFAReferralPercents__factory>
getContractFactory(name: 'ALFAStore', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ALFAStore__factory>
getContractFactory(name: 'IALFAStore', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IALFAStore__factory>
getContractFactory(name: 'IPancakeRouter', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IPancakeRouter__factory>
getContractFactory(name: 'ALFAVault', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ALFAVault__factory>
getContractFactory(name: 'IALFAVault', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IALFAVault__factory>

  getContractAt(name: 'AccessControl', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.AccessControl>
getContractAt(name: 'IAccessControl', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IAccessControl>
getContractAt(name: 'IERC20', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IERC20>
getContractAt(name: 'ERC165', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ERC165>
getContractAt(name: 'IERC165', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IERC165>
getContractAt(name: 'SafeCast', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.SafeCast>
getContractAt(name: 'ALFAGame', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ALFAGame>
getContractAt(name: 'DAOStaking', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.DAOStaking>
getContractAt(name: 'ALFAKey', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ALFAKey>
getContractAt(name: 'IALFAKey', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IALFAKey>
getContractAt(name: 'ALFALootbox', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ALFALootbox>
getContractAt(name: 'IALFALootbox', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IALFALootbox>
getContractAt(name: 'ALFAForge', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ALFAForge>
getContractAt(name: 'IALFAForge', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IALFAForge>
getContractAt(name: 'MockERC20', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockERC20>
getContractAt(name: 'MockPancakeRouter', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockPancakeRouter>
getContractAt(name: 'MockUSDT', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockUSDT>
getContractAt(name: 'MockWBNB', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockWBNB>
getContractAt(name: 'ALFAReferral', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ALFAReferral>
getContractAt(name: 'IALFAReferral', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IALFAReferral>
getContractAt(name: 'IALFAReferralPercents', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IALFAReferralPercents>
getContractAt(name: 'ALFAStore', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ALFAStore>
getContractAt(name: 'IALFAStore', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IALFAStore>
getContractAt(name: 'IPancakeRouter', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IPancakeRouter>
getContractAt(name: 'ALFAVault', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ALFAVault>
getContractAt(name: 'IALFAVault', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IALFAVault>

  deployContract(name: 'AccessControl', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.AccessControl>
deployContract(name: 'IAccessControl', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IAccessControl>
deployContract(name: 'IERC20', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IERC20>
deployContract(name: 'ERC165', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ERC165>
deployContract(name: 'IERC165', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IERC165>
deployContract(name: 'SafeCast', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.SafeCast>
deployContract(name: 'ALFAGame', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ALFAGame>
deployContract(name: 'DAOStaking', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.DAOStaking>
deployContract(name: 'ALFAKey', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ALFAKey>
deployContract(name: 'IALFAKey', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IALFAKey>
deployContract(name: 'ALFALootbox', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ALFALootbox>
deployContract(name: 'IALFALootbox', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IALFALootbox>
deployContract(name: 'ALFAForge', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ALFAForge>
deployContract(name: 'IALFAForge', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IALFAForge>
deployContract(name: 'MockERC20', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockERC20>
deployContract(name: 'MockPancakeRouter', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockPancakeRouter>
deployContract(name: 'MockUSDT', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockUSDT>
deployContract(name: 'MockWBNB', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockWBNB>
deployContract(name: 'ALFAReferral', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ALFAReferral>
deployContract(name: 'IALFAReferral', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IALFAReferral>
deployContract(name: 'IALFAReferralPercents', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IALFAReferralPercents>
deployContract(name: 'ALFAStore', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ALFAStore>
deployContract(name: 'IALFAStore', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IALFAStore>
deployContract(name: 'IPancakeRouter', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPancakeRouter>
deployContract(name: 'ALFAVault', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ALFAVault>
deployContract(name: 'IALFAVault', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IALFAVault>

  deployContract(name: 'AccessControl', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.AccessControl>
deployContract(name: 'IAccessControl', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IAccessControl>
deployContract(name: 'IERC20', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IERC20>
deployContract(name: 'ERC165', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ERC165>
deployContract(name: 'IERC165', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IERC165>
deployContract(name: 'SafeCast', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.SafeCast>
deployContract(name: 'ALFAGame', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ALFAGame>
deployContract(name: 'DAOStaking', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.DAOStaking>
deployContract(name: 'ALFAKey', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ALFAKey>
deployContract(name: 'IALFAKey', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IALFAKey>
deployContract(name: 'ALFALootbox', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ALFALootbox>
deployContract(name: 'IALFALootbox', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IALFALootbox>
deployContract(name: 'ALFAForge', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ALFAForge>
deployContract(name: 'IALFAForge', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IALFAForge>
deployContract(name: 'MockERC20', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockERC20>
deployContract(name: 'MockPancakeRouter', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockPancakeRouter>
deployContract(name: 'MockUSDT', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockUSDT>
deployContract(name: 'MockWBNB', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockWBNB>
deployContract(name: 'ALFAReferral', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ALFAReferral>
deployContract(name: 'IALFAReferral', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IALFAReferral>
deployContract(name: 'IALFAReferralPercents', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IALFAReferralPercents>
deployContract(name: 'ALFAStore', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ALFAStore>
deployContract(name: 'IALFAStore', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IALFAStore>
deployContract(name: 'IPancakeRouter', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IPancakeRouter>
deployContract(name: 'ALFAVault', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ALFAVault>
deployContract(name: 'IALFAVault', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IALFAVault>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
  