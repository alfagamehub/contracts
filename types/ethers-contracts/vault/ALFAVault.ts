/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
    export type TokenInfoStruct = {tokenAddress: AddressLike, amount: BigNumberish}

    export type TokenInfoStructOutput = [tokenAddress: string, amount: bigint] & {tokenAddress: string, amount: bigint }
  

  export interface ALFAVaultInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "addToken" | "getHolderShare" | "getInfo" | "getKeysTotalAmount" | "getRoleAdmin" | "getTokenAvailable" | "getVaultTokens" | "grantRole" | "hasRole" | "redeem" | "redeemUntilDate" | "removeToken" | "renounceRole" | "revokeRole" | "setMasterKey" | "setRedeemUntilDate" | "setUnlockDate" | "supportsInterface" | "unlockDate" | "withdraw()" | "withdraw(address)" | "withdraw(address,uint256)"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "MasterKeySet" | "RedeemUntilDateSet" | "RewardRedeemed" | "RewardWithdrawn" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "TokenAdded" | "TokenRemoved" | "UnlockDateSet"): EventFragment;

    encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'addToken', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getHolderShare', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getInfo', values?: undefined): string;
encodeFunctionData(functionFragment: 'getKeysTotalAmount', values?: undefined): string;
encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getTokenAvailable', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getVaultTokens', values?: undefined): string;
encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'redeem', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'redeemUntilDate', values?: undefined): string;
encodeFunctionData(functionFragment: 'removeToken', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'setMasterKey', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setRedeemUntilDate', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setUnlockDate', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'unlockDate', values?: undefined): string;
encodeFunctionData(functionFragment: 'withdraw()', values?: undefined): string;
encodeFunctionData(functionFragment: 'withdraw(address)', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'withdraw(address,uint256)', values: [AddressLike, BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getHolderShare', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getKeysTotalAmount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTokenAvailable', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getVaultTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'redeemUntilDate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setMasterKey', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setRedeemUntilDate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setUnlockDate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unlockDate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw()', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw(address)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw(address,uint256)', data: BytesLike): Result;
  }

  
    export namespace MasterKeySetEvent {
      export type InputTuple = [keyIndex: BigNumberish];
      export type OutputTuple = [keyIndex: bigint];
      export interface OutputObject {keyIndex: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RedeemUntilDateSetEvent {
      export type InputTuple = [redeemUntilDateSeconds: BigNumberish];
      export type OutputTuple = [redeemUntilDateSeconds: bigint];
      export interface OutputObject {redeemUntilDateSeconds: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RewardRedeemedEvent {
      export type InputTuple = [holder: AddressLike, tokenAddres: AddressLike, amount: BigNumberish, keyTokenId: BigNumberish];
      export type OutputTuple = [holder: string, tokenAddres: string, amount: bigint, keyTokenId: bigint];
      export interface OutputObject {holder: string, tokenAddres: string, amount: bigint, keyTokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RewardWithdrawnEvent {
      export type InputTuple = [tokenAddress: AddressLike, amount: BigNumberish, receiver: AddressLike];
      export type OutputTuple = [tokenAddress: string, amount: bigint, receiver: string];
      export interface OutputObject {tokenAddress: string, amount: bigint, receiver: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleAdminChangedEvent {
      export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
      export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
      export interface OutputObject {role: string, previousAdminRole: string, newAdminRole: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleGrantedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRevokedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokenAddedEvent {
      export type InputTuple = [tokenAddress: AddressLike];
      export type OutputTuple = [tokenAddress: string];
      export interface OutputObject {tokenAddress: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokenRemovedEvent {
      export type InputTuple = [tokenAddress: AddressLike];
      export type OutputTuple = [tokenAddress: string];
      export interface OutputObject {tokenAddress: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UnlockDateSetEvent {
      export type InputTuple = [unlockDateSeconds: BigNumberish];
      export type OutputTuple = [unlockDateSeconds: bigint];
      export interface OutputObject {unlockDateSeconds: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface ALFAVault extends BaseContract {
    
    connect(runner?: ContractRunner | null): ALFAVault;
    waitForDeployment(): Promise<this>;

    interface: ALFAVaultInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    DEFAULT_ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    addToken: TypedContractMethod<
      [tokenAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    getHolderShare: TypedContractMethod<
      [holder: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getInfo: TypedContractMethod<
      [],
      [[TokenInfoStructOutput[], bigint, bigint, bigint] & {tokens: TokenInfoStructOutput[], keysTotalAmount: bigint, unlockDateSeconds: bigint, redeemUntilDateSeconds: bigint }],
      'view'
    >
    

    
    getKeysTotalAmount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getRoleAdmin: TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >
    

    
    getTokenAvailable: TypedContractMethod<
      [tokenAddress: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    getVaultTokens: TypedContractMethod<
      [],
      [TokenInfoStructOutput[]],
      'view'
    >
    

    
    grantRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    hasRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    redeem: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    redeemUntilDate: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    removeToken: TypedContractMethod<
      [tokenAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    renounceRole: TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    revokeRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    setMasterKey: TypedContractMethod<
      [masterKeyIndex: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setRedeemUntilDate: TypedContractMethod<
      [redeemUntilDateSeconds: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setUnlockDate: TypedContractMethod<
      [unlockDateSeconds: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    unlockDate: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    "withdraw()": TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    "withdraw(address)": TypedContractMethod<
      [tokenAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    "withdraw(address,uint256)": TypedContractMethod<
      [tokenAddress: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'DEFAULT_ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'addToken'): TypedContractMethod<
      [tokenAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getHolderShare'): TypedContractMethod<
      [holder: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getInfo'): TypedContractMethod<
      [],
      [[TokenInfoStructOutput[], bigint, bigint, bigint] & {tokens: TokenInfoStructOutput[], keysTotalAmount: bigint, unlockDateSeconds: bigint, redeemUntilDateSeconds: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getKeysTotalAmount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleAdmin'): TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getTokenAvailable'): TypedContractMethod<
      [tokenAddress: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'getVaultTokens'): TypedContractMethod<
      [],
      [TokenInfoStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'grantRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'hasRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'redeem'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'redeemUntilDate'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'removeToken'): TypedContractMethod<
      [tokenAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceRole'): TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setMasterKey'): TypedContractMethod<
      [masterKeyIndex: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setRedeemUntilDate'): TypedContractMethod<
      [redeemUntilDateSeconds: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setUnlockDate'): TypedContractMethod<
      [unlockDateSeconds: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'unlockDate'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'withdraw()'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdraw(address)'): TypedContractMethod<
      [tokenAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdraw(address,uint256)'): TypedContractMethod<
      [tokenAddress: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'MasterKeySet'): TypedContractEvent<MasterKeySetEvent.InputTuple, MasterKeySetEvent.OutputTuple, MasterKeySetEvent.OutputObject>;
getEvent(key: 'RedeemUntilDateSet'): TypedContractEvent<RedeemUntilDateSetEvent.InputTuple, RedeemUntilDateSetEvent.OutputTuple, RedeemUntilDateSetEvent.OutputObject>;
getEvent(key: 'RewardRedeemed'): TypedContractEvent<RewardRedeemedEvent.InputTuple, RewardRedeemedEvent.OutputTuple, RewardRedeemedEvent.OutputObject>;
getEvent(key: 'RewardWithdrawn'): TypedContractEvent<RewardWithdrawnEvent.InputTuple, RewardWithdrawnEvent.OutputTuple, RewardWithdrawnEvent.OutputObject>;
getEvent(key: 'RoleAdminChanged'): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
getEvent(key: 'RoleGranted'): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
getEvent(key: 'RoleRevoked'): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
getEvent(key: 'TokenAdded'): TypedContractEvent<TokenAddedEvent.InputTuple, TokenAddedEvent.OutputTuple, TokenAddedEvent.OutputObject>;
getEvent(key: 'TokenRemoved'): TypedContractEvent<TokenRemovedEvent.InputTuple, TokenRemovedEvent.OutputTuple, TokenRemovedEvent.OutputObject>;
getEvent(key: 'UnlockDateSet'): TypedContractEvent<UnlockDateSetEvent.InputTuple, UnlockDateSetEvent.OutputTuple, UnlockDateSetEvent.OutputObject>;

    filters: {
      
      'MasterKeySet(uint256)': TypedContractEvent<MasterKeySetEvent.InputTuple, MasterKeySetEvent.OutputTuple, MasterKeySetEvent.OutputObject>;
      MasterKeySet: TypedContractEvent<MasterKeySetEvent.InputTuple, MasterKeySetEvent.OutputTuple, MasterKeySetEvent.OutputObject>;
    

      'RedeemUntilDateSet(uint256)': TypedContractEvent<RedeemUntilDateSetEvent.InputTuple, RedeemUntilDateSetEvent.OutputTuple, RedeemUntilDateSetEvent.OutputObject>;
      RedeemUntilDateSet: TypedContractEvent<RedeemUntilDateSetEvent.InputTuple, RedeemUntilDateSetEvent.OutputTuple, RedeemUntilDateSetEvent.OutputObject>;
    

      'RewardRedeemed(address,address,uint256,uint256)': TypedContractEvent<RewardRedeemedEvent.InputTuple, RewardRedeemedEvent.OutputTuple, RewardRedeemedEvent.OutputObject>;
      RewardRedeemed: TypedContractEvent<RewardRedeemedEvent.InputTuple, RewardRedeemedEvent.OutputTuple, RewardRedeemedEvent.OutputObject>;
    

      'RewardWithdrawn(address,uint256,address)': TypedContractEvent<RewardWithdrawnEvent.InputTuple, RewardWithdrawnEvent.OutputTuple, RewardWithdrawnEvent.OutputObject>;
      RewardWithdrawn: TypedContractEvent<RewardWithdrawnEvent.InputTuple, RewardWithdrawnEvent.OutputTuple, RewardWithdrawnEvent.OutputObject>;
    

      'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
      RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    

      'RoleGranted(bytes32,address,address)': TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
      RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    

      'RoleRevoked(bytes32,address,address)': TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
      RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    

      'TokenAdded(address)': TypedContractEvent<TokenAddedEvent.InputTuple, TokenAddedEvent.OutputTuple, TokenAddedEvent.OutputObject>;
      TokenAdded: TypedContractEvent<TokenAddedEvent.InputTuple, TokenAddedEvent.OutputTuple, TokenAddedEvent.OutputObject>;
    

      'TokenRemoved(address)': TypedContractEvent<TokenRemovedEvent.InputTuple, TokenRemovedEvent.OutputTuple, TokenRemovedEvent.OutputObject>;
      TokenRemoved: TypedContractEvent<TokenRemovedEvent.InputTuple, TokenRemovedEvent.OutputTuple, TokenRemovedEvent.OutputObject>;
    

      'UnlockDateSet(uint256)': TypedContractEvent<UnlockDateSetEvent.InputTuple, UnlockDateSetEvent.OutputTuple, UnlockDateSetEvent.OutputObject>;
      UnlockDateSet: TypedContractEvent<UnlockDateSetEvent.InputTuple, UnlockDateSetEvent.OutputTuple, UnlockDateSetEvent.OutputObject>;
    
    };
  }