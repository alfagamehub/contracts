/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common.js"
  
    export type LootBoxPriceStruct = {typeId: BigNumberish, tokenAddress: AddressLike, amount: BigNumberish}

    export type LootBoxPriceStructOutput = [typeId: bigint, tokenAddress: string, amount: bigint] & {typeId: bigint, tokenAddress: string, amount: bigint }
  

  export interface IALFAStoreInterface extends Interface {
    getFunction(nameOrSignature: "buy(uint256,uint256,address[])" | "buy(uint256,address,uint256,address[])" | "getPrices" | "setPrices" | "setTeamAccount" | "setVaultShare" | "teamAccount" | "vaultShare"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "LootBoxSold" | "PriceSet" | "ReferralRewardSent" | "TeamAccountSet" | "TeamRewardSent" | "VaultRefilled" | "VaultShareSet"): EventFragment;

    encodeFunctionData(functionFragment: 'buy(uint256,uint256,address[])', values: [BigNumberish, BigNumberish, AddressLike[]]): string;
encodeFunctionData(functionFragment: 'buy(uint256,address,uint256,address[])', values: [BigNumberish, AddressLike, BigNumberish, AddressLike[]]): string;
encodeFunctionData(functionFragment: 'getPrices', values?: undefined): string;
encodeFunctionData(functionFragment: 'setPrices', values: [BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'setTeamAccount', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'setVaultShare', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'teamAccount', values?: undefined): string;
encodeFunctionData(functionFragment: 'vaultShare', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'buy(uint256,uint256,address[])', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'buy(uint256,address,uint256,address[])', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPrices', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setPrices', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setTeamAccount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setVaultShare', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'teamAccount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'vaultShare', data: BytesLike): Result;
  }

  
    export namespace LootBoxSoldEvent {
      export type InputTuple = [holder: AddressLike, typeId: BigNumberish, tokenId: BigNumberish[], tokenAddress: AddressLike, tokenAmount: BigNumberish];
      export type OutputTuple = [holder: string, typeId: bigint, tokenId: bigint[], tokenAddress: string, tokenAmount: bigint];
      export interface OutputObject {holder: string, typeId: bigint, tokenId: bigint[], tokenAddress: string, tokenAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PriceSetEvent {
      export type InputTuple = [typeId: BigNumberish, price: BigNumberish];
      export type OutputTuple = [typeId: bigint, price: bigint];
      export interface OutputObject {typeId: bigint, price: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ReferralRewardSentEvent {
      export type InputTuple = [holder: AddressLike, receiver: AddressLike, child: AddressLike, tokenAddress: AddressLike, tokenAmount: BigNumberish];
      export type OutputTuple = [holder: string, receiver: string, child: string, tokenAddress: string, tokenAmount: bigint];
      export interface OutputObject {holder: string, receiver: string, child: string, tokenAddress: string, tokenAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TeamAccountSetEvent {
      export type InputTuple = [accountAddress: AddressLike];
      export type OutputTuple = [accountAddress: string];
      export interface OutputObject {accountAddress: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TeamRewardSentEvent {
      export type InputTuple = [holder: AddressLike, teamAccount: AddressLike, tokenAddress: AddressLike, tokenAmount: BigNumberish];
      export type OutputTuple = [holder: string, teamAccount: string, tokenAddress: string, tokenAmount: bigint];
      export interface OutputObject {holder: string, teamAccount: string, tokenAddress: string, tokenAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VaultRefilledEvent {
      export type InputTuple = [holder: AddressLike, tokenAddress: AddressLike, tokenAmount: BigNumberish];
      export type OutputTuple = [holder: string, tokenAddress: string, tokenAmount: bigint];
      export interface OutputObject {holder: string, tokenAddress: string, tokenAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VaultShareSetEvent {
      export type InputTuple = [sharePercents: BigNumberish];
      export type OutputTuple = [sharePercents: bigint];
      export interface OutputObject {sharePercents: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface IALFAStore extends BaseContract {
    
    connect(runner?: ContractRunner | null): IALFAStore;
    waitForDeployment(): Promise<this>;

    interface: IALFAStoreInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    "buy(uint256,uint256,address[])": TypedContractMethod<
      [typeId: BigNumberish, boxAmount: BigNumberish, parents: AddressLike[], ],
      [bigint[]],
      'payable'
    >
    

    
    "buy(uint256,address,uint256,address[])": TypedContractMethod<
      [typeId: BigNumberish, tokenAddress: AddressLike, boxAmount: BigNumberish, parents: AddressLike[], ],
      [bigint[]],
      'nonpayable'
    >
    

    
    getPrices: TypedContractMethod<
      [],
      [LootBoxPriceStructOutput[][]],
      'view'
    >
    

    
    setPrices: TypedContractMethod<
      [prices: BigNumberish[], ],
      [void],
      'nonpayable'
    >
    

    
    setTeamAccount: TypedContractMethod<
      [accountAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    setVaultShare: TypedContractMethod<
      [sharePercents: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    teamAccount: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    vaultShare: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'buy(uint256,uint256,address[])'): TypedContractMethod<
      [typeId: BigNumberish, boxAmount: BigNumberish, parents: AddressLike[], ],
      [bigint[]],
      'payable'
    >;
getFunction(nameOrSignature: 'buy(uint256,address,uint256,address[])'): TypedContractMethod<
      [typeId: BigNumberish, tokenAddress: AddressLike, boxAmount: BigNumberish, parents: AddressLike[], ],
      [bigint[]],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getPrices'): TypedContractMethod<
      [],
      [LootBoxPriceStructOutput[][]],
      'view'
    >;
getFunction(nameOrSignature: 'setPrices'): TypedContractMethod<
      [prices: BigNumberish[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setTeamAccount'): TypedContractMethod<
      [accountAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setVaultShare'): TypedContractMethod<
      [sharePercents: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'teamAccount'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'vaultShare'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;

    getEvent(key: 'LootBoxSold'): TypedContractEvent<LootBoxSoldEvent.InputTuple, LootBoxSoldEvent.OutputTuple, LootBoxSoldEvent.OutputObject>;
getEvent(key: 'PriceSet'): TypedContractEvent<PriceSetEvent.InputTuple, PriceSetEvent.OutputTuple, PriceSetEvent.OutputObject>;
getEvent(key: 'ReferralRewardSent'): TypedContractEvent<ReferralRewardSentEvent.InputTuple, ReferralRewardSentEvent.OutputTuple, ReferralRewardSentEvent.OutputObject>;
getEvent(key: 'TeamAccountSet'): TypedContractEvent<TeamAccountSetEvent.InputTuple, TeamAccountSetEvent.OutputTuple, TeamAccountSetEvent.OutputObject>;
getEvent(key: 'TeamRewardSent'): TypedContractEvent<TeamRewardSentEvent.InputTuple, TeamRewardSentEvent.OutputTuple, TeamRewardSentEvent.OutputObject>;
getEvent(key: 'VaultRefilled'): TypedContractEvent<VaultRefilledEvent.InputTuple, VaultRefilledEvent.OutputTuple, VaultRefilledEvent.OutputObject>;
getEvent(key: 'VaultShareSet'): TypedContractEvent<VaultShareSetEvent.InputTuple, VaultShareSetEvent.OutputTuple, VaultShareSetEvent.OutputObject>;

    filters: {
      
      'LootBoxSold(address,uint256,uint256[],address,uint256)': TypedContractEvent<LootBoxSoldEvent.InputTuple, LootBoxSoldEvent.OutputTuple, LootBoxSoldEvent.OutputObject>;
      LootBoxSold: TypedContractEvent<LootBoxSoldEvent.InputTuple, LootBoxSoldEvent.OutputTuple, LootBoxSoldEvent.OutputObject>;
    

      'PriceSet(uint256,uint256)': TypedContractEvent<PriceSetEvent.InputTuple, PriceSetEvent.OutputTuple, PriceSetEvent.OutputObject>;
      PriceSet: TypedContractEvent<PriceSetEvent.InputTuple, PriceSetEvent.OutputTuple, PriceSetEvent.OutputObject>;
    

      'ReferralRewardSent(address,address,address,address,uint256)': TypedContractEvent<ReferralRewardSentEvent.InputTuple, ReferralRewardSentEvent.OutputTuple, ReferralRewardSentEvent.OutputObject>;
      ReferralRewardSent: TypedContractEvent<ReferralRewardSentEvent.InputTuple, ReferralRewardSentEvent.OutputTuple, ReferralRewardSentEvent.OutputObject>;
    

      'TeamAccountSet(address)': TypedContractEvent<TeamAccountSetEvent.InputTuple, TeamAccountSetEvent.OutputTuple, TeamAccountSetEvent.OutputObject>;
      TeamAccountSet: TypedContractEvent<TeamAccountSetEvent.InputTuple, TeamAccountSetEvent.OutputTuple, TeamAccountSetEvent.OutputObject>;
    

      'TeamRewardSent(address,address,address,uint256)': TypedContractEvent<TeamRewardSentEvent.InputTuple, TeamRewardSentEvent.OutputTuple, TeamRewardSentEvent.OutputObject>;
      TeamRewardSent: TypedContractEvent<TeamRewardSentEvent.InputTuple, TeamRewardSentEvent.OutputTuple, TeamRewardSentEvent.OutputObject>;
    

      'VaultRefilled(address,address,uint256)': TypedContractEvent<VaultRefilledEvent.InputTuple, VaultRefilledEvent.OutputTuple, VaultRefilledEvent.OutputObject>;
      VaultRefilled: TypedContractEvent<VaultRefilledEvent.InputTuple, VaultRefilledEvent.OutputTuple, VaultRefilledEvent.OutputObject>;
    

      'VaultShareSet(uint256)': TypedContractEvent<VaultShareSetEvent.InputTuple, VaultShareSetEvent.OutputTuple, VaultShareSetEvent.OutputObject>;
      VaultShareSet: TypedContractEvent<VaultShareSetEvent.InputTuple, VaultShareSetEvent.OutputTuple, VaultShareSetEvent.OutputObject>;
    
    };
  }