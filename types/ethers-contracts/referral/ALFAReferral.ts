/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
    export type ReferralPercentsStruct = {parentAddress: AddressLike, percents: BigNumberish}

    export type ReferralPercentsStructOutput = [parentAddress: string, percents: bigint] & {parentAddress: string, percents: bigint }
  

  export interface ALFAReferralInterface extends Interface {
    getFunction(nameOrSignature: "CONNECTOR_ROLE" | "DEFAULT_ADMIN_ROLE" | "addRelation" | "getChildren" | "getChildrenCount" | "getParent" | "getPercents" | "getReferralPercents" | "getRoleAdmin" | "grantRole" | "hasRole" | "renounceRole" | "revokeRole" | "setPercents" | "setSequence" | "supportsInterface"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "PercentsSet" | "RelationAdded" | "RelationRemoved" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked"): EventFragment;

    encodeFunctionData(functionFragment: 'CONNECTOR_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'addRelation', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'getChildren', values: [AddressLike, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getChildrenCount', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getParent', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getPercents', values?: undefined): string;
encodeFunctionData(functionFragment: 'getReferralPercents', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'setPercents', values: [BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'setSequence', values: [AddressLike[]]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;

    decodeFunctionResult(functionFragment: 'CONNECTOR_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addRelation', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getChildren', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getChildrenCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getParent', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPercents', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getReferralPercents', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setPercents', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setSequence', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  }

  
    export namespace PercentsSetEvent {
      export type InputTuple = [percents: BigNumberish[]];
      export type OutputTuple = [percents: bigint[]];
      export interface OutputObject {percents: bigint[] };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RelationAddedEvent {
      export type InputTuple = [parent: AddressLike, child: AddressLike];
      export type OutputTuple = [parent: string, child: string];
      export interface OutputObject {parent: string, child: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RelationRemovedEvent {
      export type InputTuple = [parent: AddressLike, child: AddressLike];
      export type OutputTuple = [parent: string, child: string];
      export interface OutputObject {parent: string, child: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleAdminChangedEvent {
      export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
      export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
      export interface OutputObject {role: string, previousAdminRole: string, newAdminRole: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleGrantedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRevokedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface ALFAReferral extends BaseContract {
    
    connect(runner?: ContractRunner | null): ALFAReferral;
    waitForDeployment(): Promise<this>;

    interface: ALFAReferralInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    CONNECTOR_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    DEFAULT_ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    addRelation: TypedContractMethod<
      [parentAddress: AddressLike, childAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    getChildren: TypedContractMethod<
      [parentAddress: AddressLike, offset: BigNumberish, limit: BigNumberish, ],
      [string[]],
      'view'
    >
    

    
    getChildrenCount: TypedContractMethod<
      [parentAddress: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getParent: TypedContractMethod<
      [childAddress: AddressLike, ],
      [string],
      'view'
    >
    

    
    getPercents: TypedContractMethod<
      [],
      [bigint[]],
      'view'
    >
    

    
    getReferralPercents: TypedContractMethod<
      [childAddress: AddressLike, ],
      [ReferralPercentsStructOutput[]],
      'view'
    >
    

    
    getRoleAdmin: TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >
    

    
    grantRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    hasRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    renounceRole: TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    revokeRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    setPercents: TypedContractMethod<
      [percents: BigNumberish[], ],
      [void],
      'nonpayable'
    >
    

    
    setSequence: TypedContractMethod<
      [sequence: AddressLike[], ],
      [void],
      'nonpayable'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'CONNECTOR_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'DEFAULT_ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'addRelation'): TypedContractMethod<
      [parentAddress: AddressLike, childAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getChildren'): TypedContractMethod<
      [parentAddress: AddressLike, offset: BigNumberish, limit: BigNumberish, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getChildrenCount'): TypedContractMethod<
      [parentAddress: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getParent'): TypedContractMethod<
      [childAddress: AddressLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getPercents'): TypedContractMethod<
      [],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'getReferralPercents'): TypedContractMethod<
      [childAddress: AddressLike, ],
      [ReferralPercentsStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleAdmin'): TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'grantRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'hasRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'renounceRole'): TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setPercents'): TypedContractMethod<
      [percents: BigNumberish[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setSequence'): TypedContractMethod<
      [sequence: AddressLike[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;

    getEvent(key: 'PercentsSet'): TypedContractEvent<PercentsSetEvent.InputTuple, PercentsSetEvent.OutputTuple, PercentsSetEvent.OutputObject>;
getEvent(key: 'RelationAdded'): TypedContractEvent<RelationAddedEvent.InputTuple, RelationAddedEvent.OutputTuple, RelationAddedEvent.OutputObject>;
getEvent(key: 'RelationRemoved'): TypedContractEvent<RelationRemovedEvent.InputTuple, RelationRemovedEvent.OutputTuple, RelationRemovedEvent.OutputObject>;
getEvent(key: 'RoleAdminChanged'): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
getEvent(key: 'RoleGranted'): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
getEvent(key: 'RoleRevoked'): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;

    filters: {
      
      'PercentsSet(uint256[])': TypedContractEvent<PercentsSetEvent.InputTuple, PercentsSetEvent.OutputTuple, PercentsSetEvent.OutputObject>;
      PercentsSet: TypedContractEvent<PercentsSetEvent.InputTuple, PercentsSetEvent.OutputTuple, PercentsSetEvent.OutputObject>;
    

      'RelationAdded(address,address)': TypedContractEvent<RelationAddedEvent.InputTuple, RelationAddedEvent.OutputTuple, RelationAddedEvent.OutputObject>;
      RelationAdded: TypedContractEvent<RelationAddedEvent.InputTuple, RelationAddedEvent.OutputTuple, RelationAddedEvent.OutputObject>;
    

      'RelationRemoved(address,address)': TypedContractEvent<RelationRemovedEvent.InputTuple, RelationRemovedEvent.OutputTuple, RelationRemovedEvent.OutputObject>;
      RelationRemoved: TypedContractEvent<RelationRemovedEvent.InputTuple, RelationRemovedEvent.OutputTuple, RelationRemovedEvent.OutputObject>;
    

      'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
      RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    

      'RoleGranted(bytes32,address,address)': TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
      RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    

      'RoleRevoked(bytes32,address,address)': TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
      RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    
    };
  }