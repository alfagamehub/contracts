/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common.js"
  
    export type ReferralPercentsStruct = {parentAddress: AddressLike, percents: BigNumberish}

    export type ReferralPercentsStructOutput = [parentAddress: string, percents: bigint] & {parentAddress: string, percents: bigint }
  

  export interface IALFAReferralInterface extends Interface {
    getFunction(nameOrSignature: "addRelation" | "getChildren" | "getChildrenCount" | "getParent" | "getPercents" | "getReferralPercents" | "setSequence"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "PercentsSet" | "RelationAdded" | "RelationRemoved"): EventFragment;

    encodeFunctionData(functionFragment: 'addRelation', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'getChildren', values: [AddressLike, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getChildrenCount', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getParent', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getPercents', values?: undefined): string;
encodeFunctionData(functionFragment: 'getReferralPercents', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'setSequence', values: [AddressLike[]]): string;

    decodeFunctionResult(functionFragment: 'addRelation', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getChildren', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getChildrenCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getParent', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPercents', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getReferralPercents', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setSequence', data: BytesLike): Result;
  }

  
    export namespace PercentsSetEvent {
      export type InputTuple = [percents: BigNumberish[]];
      export type OutputTuple = [percents: bigint[]];
      export interface OutputObject {percents: bigint[] };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RelationAddedEvent {
      export type InputTuple = [parent: AddressLike, child: AddressLike];
      export type OutputTuple = [parent: string, child: string];
      export interface OutputObject {parent: string, child: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RelationRemovedEvent {
      export type InputTuple = [parent: AddressLike, child: AddressLike];
      export type OutputTuple = [parent: string, child: string];
      export interface OutputObject {parent: string, child: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface IALFAReferral extends BaseContract {
    
    connect(runner?: ContractRunner | null): IALFAReferral;
    waitForDeployment(): Promise<this>;

    interface: IALFAReferralInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addRelation: TypedContractMethod<
      [parentAddress: AddressLike, childAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    getChildren: TypedContractMethod<
      [parentAddress: AddressLike, offset: BigNumberish, limit: BigNumberish, ],
      [string[]],
      'view'
    >
    

    
    getChildrenCount: TypedContractMethod<
      [parentAddress: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getParent: TypedContractMethod<
      [childAddress: AddressLike, ],
      [string],
      'view'
    >
    

    
    getPercents: TypedContractMethod<
      [],
      [bigint[]],
      'view'
    >
    

    
    getReferralPercents: TypedContractMethod<
      [childAddress: AddressLike, ],
      [ReferralPercentsStructOutput[]],
      'view'
    >
    

    
    setSequence: TypedContractMethod<
      [sequence: AddressLike[], ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addRelation'): TypedContractMethod<
      [parentAddress: AddressLike, childAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getChildren'): TypedContractMethod<
      [parentAddress: AddressLike, offset: BigNumberish, limit: BigNumberish, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getChildrenCount'): TypedContractMethod<
      [parentAddress: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getParent'): TypedContractMethod<
      [childAddress: AddressLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getPercents'): TypedContractMethod<
      [],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'getReferralPercents'): TypedContractMethod<
      [childAddress: AddressLike, ],
      [ReferralPercentsStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'setSequence'): TypedContractMethod<
      [sequence: AddressLike[], ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'PercentsSet'): TypedContractEvent<PercentsSetEvent.InputTuple, PercentsSetEvent.OutputTuple, PercentsSetEvent.OutputObject>;
getEvent(key: 'RelationAdded'): TypedContractEvent<RelationAddedEvent.InputTuple, RelationAddedEvent.OutputTuple, RelationAddedEvent.OutputObject>;
getEvent(key: 'RelationRemoved'): TypedContractEvent<RelationRemovedEvent.InputTuple, RelationRemovedEvent.OutputTuple, RelationRemovedEvent.OutputObject>;

    filters: {
      
      'PercentsSet(uint256[])': TypedContractEvent<PercentsSetEvent.InputTuple, PercentsSetEvent.OutputTuple, PercentsSetEvent.OutputObject>;
      PercentsSet: TypedContractEvent<PercentsSetEvent.InputTuple, PercentsSetEvent.OutputTuple, PercentsSetEvent.OutputObject>;
    

      'RelationAdded(address,address)': TypedContractEvent<RelationAddedEvent.InputTuple, RelationAddedEvent.OutputTuple, RelationAddedEvent.OutputObject>;
      RelationAdded: TypedContractEvent<RelationAddedEvent.InputTuple, RelationAddedEvent.OutputTuple, RelationAddedEvent.OutputObject>;
    

      'RelationRemoved(address,address)': TypedContractEvent<RelationRemovedEvent.InputTuple, RelationRemovedEvent.OutputTuple, RelationRemovedEvent.OutputObject>;
      RelationRemoved: TypedContractEvent<RelationRemovedEvent.InputTuple, RelationRemovedEvent.OutputTuple, RelationRemovedEvent.OutputObject>;
    
    };
  }