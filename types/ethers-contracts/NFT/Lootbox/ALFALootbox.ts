/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common.js"
  
    export type DropChanceStruct = {tokenAddress: AddressLike, typeId: BigNumberish, chance: BigNumberish}

    export type DropChanceStructOutput = [tokenAddress: string, typeId: bigint, chance: bigint] & {tokenAddress: string, typeId: bigint, chance: bigint }
  

    export type HolderTokenStruct = {tokenId: BigNumberish, typeId: BigNumberish}

    export type HolderTokenStructOutput = [tokenId: bigint, typeId: bigint] & {tokenId: bigint, typeId: bigint }
  

    export type TokenTypeStruct = {typeId: BigNumberish, count: BigNumberish, typeName: string, typeURI: string, drop: DropChanceStruct[]}

    export type TokenTypeStructOutput = [typeId: bigint, count: bigint, typeName: string, typeURI: string, drop: DropChanceStructOutput[]] & {typeId: bigint, count: bigint, typeName: string, typeURI: string, drop: DropChanceStructOutput[] }
  

  export interface ALFALootboxInterface extends Interface {
    getFunction(nameOrSignature: "BURNER_ROLE" | "DEFAULT_ADMIN_ROLE" | "EDITOR_ROLE" | "MINTER_ROLE" | "addType" | "approve" | "balanceOf" | "burn" | "clearDrop" | "getApproved" | "getHolderAmounts" | "getRoleAdmin" | "getTokens" | "getTypeAmount" | "getTypeHolderAmount" | "getTypes" | "grantRole" | "hasRole" | "isApprovedForAll" | "mint" | "name" | "open" | "openFor" | "ownerOf" | "removeType" | "renounceRole" | "revokeRole" | "safeTransferFrom(address,address,uint256)" | "safeTransferFrom(address,address,uint256,bytes)" | "setApprovalForAll" | "supportsInterface" | "symbol" | "tokenType" | "tokenTypeId" | "tokenURI" | "transferFrom" | "updateType"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Approval" | "ApprovalForAll" | "DropRolled" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "TokenBurned" | "TokenMinted" | "Transfer" | "TypeAdded" | "TypeDropAdded" | "TypeDropCleared" | "TypeRemoved" | "TypeUpdated"): EventFragment;

    encodeFunctionData(functionFragment: 'BURNER_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'EDITOR_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'MINTER_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'addType', values: [string, string]): string;
encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'burn', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'clearDrop', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getHolderAmounts', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getTokens', values: [AddressLike, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getTypeAmount', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getTypeHolderAmount', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getTypes', values?: undefined): string;
encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'isApprovedForAll', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'mint', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'name', values?: undefined): string;
encodeFunctionData(functionFragment: 'open', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'openFor', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'removeType', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256)', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'setApprovalForAll', values: [AddressLike, boolean]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'tokenType', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'tokenTypeId', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'updateType', values: [BigNumberish, string, string]): string;

    decodeFunctionResult(functionFragment: 'BURNER_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'EDITOR_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MINTER_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addType', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'clearDrop', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getHolderAmounts', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTypeAmount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTypeHolderAmount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTypes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'open', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'openFor', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeType', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenType', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenTypeId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateType', data: BytesLike): Result;
  }

  
    export namespace ApprovalEvent {
      export type InputTuple = [owner: AddressLike, approved: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
      export interface OutputObject {owner: string, approved: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ApprovalForAllEvent {
      export type InputTuple = [owner: AddressLike, operator: AddressLike, approved: boolean];
      export type OutputTuple = [owner: string, operator: string, approved: boolean];
      export interface OutputObject {owner: string, operator: string, approved: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DropRolledEvent {
      export type InputTuple = [holder: AddressLike, typeId: BigNumberish, tokenId: BigNumberish, dropAddress: AddressLike, dropTypeId: BigNumberish, dropId: BigNumberish];
      export type OutputTuple = [holder: string, typeId: bigint, tokenId: bigint, dropAddress: string, dropTypeId: bigint, dropId: bigint];
      export interface OutputObject {holder: string, typeId: bigint, tokenId: bigint, dropAddress: string, dropTypeId: bigint, dropId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleAdminChangedEvent {
      export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
      export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
      export interface OutputObject {role: string, previousAdminRole: string, newAdminRole: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleGrantedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRevokedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokenBurnedEvent {
      export type InputTuple = [typeId: BigNumberish, holder: AddressLike, tokenId: BigNumberish, totalCount: BigNumberish];
      export type OutputTuple = [typeId: bigint, holder: string, tokenId: bigint, totalCount: bigint];
      export interface OutputObject {typeId: bigint, holder: string, tokenId: bigint, totalCount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokenMintedEvent {
      export type InputTuple = [typeId: BigNumberish, holder: AddressLike, tokenId: BigNumberish, totalCount: BigNumberish];
      export type OutputTuple = [typeId: bigint, holder: string, tokenId: bigint, totalCount: bigint];
      export interface OutputObject {typeId: bigint, holder: string, tokenId: bigint, totalCount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [from: string, to: string, tokenId: bigint];
      export interface OutputObject {from: string, to: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TypeAddedEvent {
      export type InputTuple = [typeId: BigNumberish, typeName: string, typeURI: string];
      export type OutputTuple = [typeId: bigint, typeName: string, typeURI: string];
      export interface OutputObject {typeId: bigint, typeName: string, typeURI: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TypeDropAddedEvent {
      export type InputTuple = [typeId: BigNumberish, dropIndex: BigNumberish, drop: DropChanceStruct];
      export type OutputTuple = [typeId: bigint, dropIndex: bigint, drop: DropChanceStructOutput];
      export interface OutputObject {typeId: bigint, dropIndex: bigint, drop: DropChanceStructOutput };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TypeDropClearedEvent {
      export type InputTuple = [typeId: BigNumberish];
      export type OutputTuple = [typeId: bigint];
      export interface OutputObject {typeId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TypeRemovedEvent {
      export type InputTuple = [typeId: BigNumberish];
      export type OutputTuple = [typeId: bigint];
      export interface OutputObject {typeId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TypeUpdatedEvent {
      export type InputTuple = [typeId: BigNumberish, typeName: string, typeURI: string];
      export type OutputTuple = [typeId: bigint, typeName: string, typeURI: string];
      export interface OutputObject {typeId: bigint, typeName: string, typeURI: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface ALFALootbox extends BaseContract {
    
    connect(runner?: ContractRunner | null): ALFALootbox;
    waitForDeployment(): Promise<this>;

    interface: ALFALootboxInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    BURNER_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    DEFAULT_ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    EDITOR_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    MINTER_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    addType: TypedContractMethod<
      [typeName: string, typeURI: string, ],
      [bigint],
      'nonpayable'
    >
    

    
    approve: TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    balanceOf: TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    burn: TypedContractMethod<
      [holder: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    clearDrop: TypedContractMethod<
      [typeId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getApproved: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getHolderAmounts: TypedContractMethod<
      [holder: AddressLike, ],
      [bigint[]],
      'view'
    >
    

    
    getRoleAdmin: TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >
    

    
    getTokens: TypedContractMethod<
      [holder: AddressLike, offset: BigNumberish, limit: BigNumberish, ],
      [[HolderTokenStructOutput[], bigint] & {count: bigint }],
      'view'
    >
    

    
    getTypeAmount: TypedContractMethod<
      [typeId: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getTypeHolderAmount: TypedContractMethod<
      [holder: AddressLike, typeId: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getTypes: TypedContractMethod<
      [],
      [TokenTypeStructOutput[]],
      'view'
    >
    

    
    grantRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    hasRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isApprovedForAll: TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    mint: TypedContractMethod<
      [receiver: AddressLike, typeId: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    name: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    open: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    openFor: TypedContractMethod<
      [holder: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    ownerOf: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    removeType: TypedContractMethod<
      [typeId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    renounceRole: TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    revokeRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    setApprovalForAll: TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    symbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    tokenType: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [TokenTypeStructOutput],
      'view'
    >
    

    
    tokenTypeId: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    tokenURI: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    transferFrom: TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    updateType: TypedContractMethod<
      [typeId: BigNumberish, typeName: string, typeURI: string, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'BURNER_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'DEFAULT_ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'EDITOR_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'MINTER_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'addType'): TypedContractMethod<
      [typeName: string, typeURI: string, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'approve'): TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'burn'): TypedContractMethod<
      [holder: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'clearDrop'): TypedContractMethod<
      [typeId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getApproved'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getHolderAmounts'): TypedContractMethod<
      [holder: AddressLike, ],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleAdmin'): TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getTokens'): TypedContractMethod<
      [holder: AddressLike, offset: BigNumberish, limit: BigNumberish, ],
      [[HolderTokenStructOutput[], bigint] & {count: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getTypeAmount'): TypedContractMethod<
      [typeId: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getTypeHolderAmount'): TypedContractMethod<
      [holder: AddressLike, typeId: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getTypes'): TypedContractMethod<
      [],
      [TokenTypeStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'grantRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'hasRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isApprovedForAll'): TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'mint'): TypedContractMethod<
      [receiver: AddressLike, typeId: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'name'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'open'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'openFor'): TypedContractMethod<
      [holder: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'ownerOf'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'removeType'): TypedContractMethod<
      [typeId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceRole'): TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256,bytes)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setApprovalForAll'): TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'symbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'tokenType'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [TokenTypeStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'tokenTypeId'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'tokenURI'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateType'): TypedContractMethod<
      [typeId: BigNumberish, typeName: string, typeURI: string, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'Approval'): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
getEvent(key: 'ApprovalForAll'): TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
getEvent(key: 'DropRolled'): TypedContractEvent<DropRolledEvent.InputTuple, DropRolledEvent.OutputTuple, DropRolledEvent.OutputObject>;
getEvent(key: 'RoleAdminChanged'): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
getEvent(key: 'RoleGranted'): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
getEvent(key: 'RoleRevoked'): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
getEvent(key: 'TokenBurned'): TypedContractEvent<TokenBurnedEvent.InputTuple, TokenBurnedEvent.OutputTuple, TokenBurnedEvent.OutputObject>;
getEvent(key: 'TokenMinted'): TypedContractEvent<TokenMintedEvent.InputTuple, TokenMintedEvent.OutputTuple, TokenMintedEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
getEvent(key: 'TypeAdded'): TypedContractEvent<TypeAddedEvent.InputTuple, TypeAddedEvent.OutputTuple, TypeAddedEvent.OutputObject>;
getEvent(key: 'TypeDropAdded'): TypedContractEvent<TypeDropAddedEvent.InputTuple, TypeDropAddedEvent.OutputTuple, TypeDropAddedEvent.OutputObject>;
getEvent(key: 'TypeDropCleared'): TypedContractEvent<TypeDropClearedEvent.InputTuple, TypeDropClearedEvent.OutputTuple, TypeDropClearedEvent.OutputObject>;
getEvent(key: 'TypeRemoved'): TypedContractEvent<TypeRemovedEvent.InputTuple, TypeRemovedEvent.OutputTuple, TypeRemovedEvent.OutputObject>;
getEvent(key: 'TypeUpdated'): TypedContractEvent<TypeUpdatedEvent.InputTuple, TypeUpdatedEvent.OutputTuple, TypeUpdatedEvent.OutputObject>;

    filters: {
      
      'Approval(address,address,uint256)': TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
      Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    

      'ApprovalForAll(address,address,bool)': TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
      ApprovalForAll: TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
    

      'DropRolled(address,uint256,uint256,address,uint256,uint256)': TypedContractEvent<DropRolledEvent.InputTuple, DropRolledEvent.OutputTuple, DropRolledEvent.OutputObject>;
      DropRolled: TypedContractEvent<DropRolledEvent.InputTuple, DropRolledEvent.OutputTuple, DropRolledEvent.OutputObject>;
    

      'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
      RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    

      'RoleGranted(bytes32,address,address)': TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
      RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    

      'RoleRevoked(bytes32,address,address)': TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
      RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    

      'TokenBurned(uint256,address,uint256,uint256)': TypedContractEvent<TokenBurnedEvent.InputTuple, TokenBurnedEvent.OutputTuple, TokenBurnedEvent.OutputObject>;
      TokenBurned: TypedContractEvent<TokenBurnedEvent.InputTuple, TokenBurnedEvent.OutputTuple, TokenBurnedEvent.OutputObject>;
    

      'TokenMinted(uint256,address,uint256,uint256)': TypedContractEvent<TokenMintedEvent.InputTuple, TokenMintedEvent.OutputTuple, TokenMintedEvent.OutputObject>;
      TokenMinted: TypedContractEvent<TokenMintedEvent.InputTuple, TokenMintedEvent.OutputTuple, TokenMintedEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    

      'TypeAdded(uint256,string,string)': TypedContractEvent<TypeAddedEvent.InputTuple, TypeAddedEvent.OutputTuple, TypeAddedEvent.OutputObject>;
      TypeAdded: TypedContractEvent<TypeAddedEvent.InputTuple, TypeAddedEvent.OutputTuple, TypeAddedEvent.OutputObject>;
    

      'TypeDropAdded(uint256,uint256,tuple)': TypedContractEvent<TypeDropAddedEvent.InputTuple, TypeDropAddedEvent.OutputTuple, TypeDropAddedEvent.OutputObject>;
      TypeDropAdded: TypedContractEvent<TypeDropAddedEvent.InputTuple, TypeDropAddedEvent.OutputTuple, TypeDropAddedEvent.OutputObject>;
    

      'TypeDropCleared(uint256)': TypedContractEvent<TypeDropClearedEvent.InputTuple, TypeDropClearedEvent.OutputTuple, TypeDropClearedEvent.OutputObject>;
      TypeDropCleared: TypedContractEvent<TypeDropClearedEvent.InputTuple, TypeDropClearedEvent.OutputTuple, TypeDropClearedEvent.OutputObject>;
    

      'TypeRemoved(uint256)': TypedContractEvent<TypeRemovedEvent.InputTuple, TypeRemovedEvent.OutputTuple, TypeRemovedEvent.OutputObject>;
      TypeRemoved: TypedContractEvent<TypeRemovedEvent.InputTuple, TypeRemovedEvent.OutputTuple, TypeRemovedEvent.OutputObject>;
    

      'TypeUpdated(uint256,string,string)': TypedContractEvent<TypeUpdatedEvent.InputTuple, TypeUpdatedEvent.OutputTuple, TypeUpdatedEvent.OutputObject>;
      TypeUpdated: TypedContractEvent<TypeUpdatedEvent.InputTuple, TypeUpdatedEvent.OutputTuple, TypeUpdatedEvent.OutputObject>;
    
    };
  }