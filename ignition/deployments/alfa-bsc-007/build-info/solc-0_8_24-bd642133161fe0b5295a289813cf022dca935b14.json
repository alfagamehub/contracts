{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_24-bd642133161fe0b5295a289813cf022dca935b14",
  "solcVersion": "0.8.24",
  "solcLongVersion": "0.8.24+commit.e11b9ed9",
  "userSourceNameMap": {
    "contracts/ALFAGame.sol": "project/contracts/ALFAGame.sol",
    "contracts/DAOStaking.sol": "project/contracts/DAOStaking.sol",
    "contracts/NFT/Key/ALFAKey.sol": "project/contracts/NFT/Key/ALFAKey.sol",
    "contracts/NFT/Key/IALFAKey.sol": "project/contracts/NFT/Key/IALFAKey.sol",
    "contracts/NFT/Lootbox/ALFALootbox.sol": "project/contracts/NFT/Lootbox/ALFALootbox.sol",
    "contracts/NFT/Lootbox/IALFALootbox.sol": "project/contracts/NFT/Lootbox/IALFALootbox.sol",
    "contracts/const.sol": "project/contracts/const.sol",
    "contracts/forge/ALFAForge.sol": "project/contracts/forge/ALFAForge.sol",
    "contracts/forge/IALFAForge.sol": "project/contracts/forge/IALFAForge.sol",
    "contracts/mocks/MockERC20.sol": "project/contracts/mocks/MockERC20.sol",
    "contracts/mocks/MockPancakeRouter.sol": "project/contracts/mocks/MockPancakeRouter.sol",
    "contracts/mocks/MockUSDT.sol": "project/contracts/mocks/MockUSDT.sol",
    "contracts/mocks/MockWBNB.sol": "project/contracts/mocks/MockWBNB.sol",
    "contracts/referral/ALFAReferral.sol": "project/contracts/referral/ALFAReferral.sol",
    "contracts/referral/interfaces/IALFAReferral.sol": "project/contracts/referral/interfaces/IALFAReferral.sol",
    "contracts/referral/interfaces/IALFAReferralPercents.sol": "project/contracts/referral/interfaces/IALFAReferralPercents.sol",
    "contracts/store/ALFAStore.sol": "project/contracts/store/ALFAStore.sol",
    "contracts/store/interfaces/IALFAStore.sol": "project/contracts/store/interfaces/IALFAStore.sol",
    "contracts/store/interfaces/IPancakeRouter.sol": "project/contracts/store/interfaces/IPancakeRouter.sol",
    "contracts/vault/ALFAVault.sol": "project/contracts/vault/ALFAVault.sol",
    "contracts/vault/interfaces/IALFAVault.sol": "project/contracts/vault/interfaces/IALFAVault.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": false
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/AccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/ERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {ERC721Utils} from \"./utils/ERC721Utils.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /// @inheritdoc IERC721\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /// @inheritdoc IERC721\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /// @inheritdoc IERC721\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /// @inheritdoc IERC721\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /// @inheritdoc IERC721\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /// @inheritdoc IERC721\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /// @inheritdoc IERC721\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /// @inheritdoc IERC721\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if:\n     * - `spender` does not have approval from `owner` for `tokenId`.\n     * - `spender` does not have approval to manage all of `owner`'s assets.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/extensions/IERC721Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/IERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/IERC721Receiver.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity >=0.5.0;\n\n/**\n * @title ERC-721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC-721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/utils/ERC721Utils.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/utils/ERC721Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721Receiver} from \"../IERC721Receiver.sol\";\nimport {IERC721Errors} from \"../../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Library that provide common ERC-721 utility functions.\n *\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\n *\n * _Available since v5.1._\n */\nlibrary ERC721Utils {\n    /**\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721Receiver-onERC721Received}\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\n     *\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\n     * the transfer.\n     */\n    function checkOnERC721Received(\n        address operator,\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    // Token rejected\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-IERC721Receiver implementer\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\n                } else {\n                    assembly (\"memory-safe\") {\n                        revert(add(reason, 0x20), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Arrays.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Arrays.sol)\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\n\npragma solidity ^0.8.20;\n\nimport {Comparators} from \"./Comparators.sol\";\nimport {SlotDerivation} from \"./SlotDerivation.sol\";\nimport {StorageSlot} from \"./StorageSlot.sol\";\nimport {Math} from \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    using SlotDerivation for bytes32;\n    using StorageSlot for bytes32;\n\n    /**\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\n     *\n     * This function does the sorting \"in place\", meaning that it overrides the input. The object is returned for\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\n     *\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\n     * consume more gas than is available in a block, leading to potential DoS.\n     *\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\n     */\n    function sort(\n        uint256[] memory array,\n        function(uint256, uint256) pure returns (bool) comp\n    ) internal pure returns (uint256[] memory) {\n        _quickSort(_begin(array), _end(array), comp);\n        return array;\n    }\n\n    /**\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\n     */\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\n        sort(array, Comparators.lt);\n        return array;\n    }\n\n    /**\n     * @dev Sort an array of address (in memory) following the provided comparator function.\n     *\n     * This function does the sorting \"in place\", meaning that it overrides the input. The object is returned for\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\n     *\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\n     * consume more gas than is available in a block, leading to potential DoS.\n     *\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\n     */\n    function sort(\n        address[] memory array,\n        function(address, address) pure returns (bool) comp\n    ) internal pure returns (address[] memory) {\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\n        return array;\n    }\n\n    /**\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\n     */\n    function sort(address[] memory array) internal pure returns (address[] memory) {\n        sort(_castToUint256Array(array), Comparators.lt);\n        return array;\n    }\n\n    /**\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\n     *\n     * This function does the sorting \"in place\", meaning that it overrides the input. The object is returned for\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\n     *\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\n     * consume more gas than is available in a block, leading to potential DoS.\n     *\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\n     */\n    function sort(\n        bytes32[] memory array,\n        function(bytes32, bytes32) pure returns (bool) comp\n    ) internal pure returns (bytes32[] memory) {\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\n        return array;\n    }\n\n    /**\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\n     */\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\n        sort(_castToUint256Array(array), Comparators.lt);\n        return array;\n    }\n\n    /**\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\n     * at end (exclusive). Sorting follows the `comp` comparator.\n     *\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\n     *\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\n     * be used only if the limits are within a memory array.\n     */\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\n        unchecked {\n            if (end - begin < 0x40) return;\n\n            // Use first element as pivot\n            uint256 pivot = _mload(begin);\n            // Position where the pivot should be at the end of the loop\n            uint256 pos = begin;\n\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\n                if (comp(_mload(it), pivot)) {\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\n                    // position of the pivot and move the value there.\n                    pos += 0x20;\n                    _swap(pos, it);\n                }\n            }\n\n            _swap(begin, pos); // Swap pivot into place\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\n        }\n    }\n\n    /**\n     * @dev Pointer to the memory location of the first element of `array`.\n     */\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\n        assembly (\"memory-safe\") {\n            ptr := add(array, 0x20)\n        }\n    }\n\n    /**\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\n     * that comes just after the last element of the array.\n     */\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\n        unchecked {\n            return _begin(array) + array.length * 0x20;\n        }\n    }\n\n    /**\n     * @dev Load memory word (as a uint256) at location `ptr`.\n     */\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\n        assembly {\n            value := mload(ptr)\n        }\n    }\n\n    /**\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\n     */\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\n        assembly {\n            let value1 := mload(ptr1)\n            let value2 := mload(ptr2)\n            mstore(ptr1, value2)\n            mstore(ptr2, value1)\n        }\n    }\n\n    /// @dev Helper: low level cast address memory array to uint256 memory array\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /// @dev Helper: low level cast address comp function to uint256 comp function\n    function _castToUint256Comp(\n        function(address, address) pure returns (bool) input\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\n    function _castToUint256Comp(\n        function(bytes32, bytes32) pure returns (bool) input\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\n     * contain no repeated elements.\n     *\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\n     * support for repeated elements in the array. The {lowerBound} function should\n     * be used instead.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Searches an `array` sorted in ascending order and returns the first\n     * index that contains a value greater or equal than `element`. If no such index\n     * exists (i.e. all values in the array are strictly less than `element`), the array\n     * length is returned. Time complexity O(log n).\n     *\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\n     */\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value < element) {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            } else {\n                high = mid;\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Searches an `array` sorted in ascending order and returns the first\n     * index that contains a value strictly greater than `element`. If no such index\n     * exists (i.e. all values in the array are strictly less than `element`), the array\n     * length is returned. Time complexity O(log n).\n     *\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\n     */\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Same as {lowerBound}, but with an array in memory.\n     */\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeMemoryAccess(array, mid) < element) {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            } else {\n                high = mid;\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Same as {upperBound}, but with an array in memory.\n     */\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeMemoryAccess(array, mid) > element) {\n                high = mid;\n            } else {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getUint256Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes[] storage arr, uint256 pos) internal pure returns (StorageSlot.BytesSlot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getBytesSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(string[] storage arr, uint256 pos) internal pure returns (StorageSlot.StringSlot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getStringSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(bytes[] memory arr, uint256 pos) internal pure returns (bytes memory res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(string[] memory arr, uint256 pos) internal pure returns (string memory res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(bytes[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(string[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Comparators.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides a set of functions to compare values.\n *\n * _Available since v5.1._\n */\nlibrary Comparators {\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\n        return a < b;\n    }\n\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\n        return a > b;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/math/Math.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Return the 512-bit addition of two uint256.\n     *\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\n     */\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        assembly (\"memory-safe\") {\n            low := add(a, b)\n            high := lt(low, a)\n        }\n    }\n\n    /**\n     * @dev Return the 512-bit multiplication of two uint256.\n     *\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\n     */\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = high * 2²⁵⁶ + low.\n        assembly (\"memory-safe\") {\n            let mm := mulmod(a, b, not(0))\n            low := mul(a, b)\n            high := sub(sub(mm, low), lt(mm, low))\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            success = c >= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a - b;\n            success = c <= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a * b;\n            assembly (\"memory-safe\") {\n                // Only true when the multiplication doesn't overflow\n                // (c / a == b) || (a == 0)\n                success := or(eq(div(c, a), b), iszero(a))\n            }\n            // equivalent to: success ? c : 0\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `DIV` opcode returns zero when the denominator is 0.\n                result := div(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `MOD` opcode returns zero when the denominator is 0.\n                result := mod(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryAdd(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\n     */\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        (, uint256 result) = trySub(a, b);\n        return result;\n    }\n\n    /**\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryMul(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (high == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return low / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= high) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [high low].\n            uint256 remainder;\n            assembly (\"memory-safe\") {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                high := sub(high, gt(remainder, low))\n                low := sub(low, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly (\"memory-safe\") {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [high low] by twos.\n                low := div(low, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from high into low.\n            low |= high * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\n            // is no longer required.\n            result = low * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n            if (high >= 1 << n) {\n                Panic.panic(Panic.UNDER_OVERFLOW);\n            }\n            return (high << (256 - n)) | (low >> n);\n        }\n    }\n\n    /**\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // If upper 8 bits of 16-bit half set, add 8 to result\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\n        // If upper 4 bits of 8-bit half set, add 4 to result\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\n\n        // Shifts value right by the current result and use it as an index into this lookup table:\n        //\n        // | x (4 bits) |  index  | table[index] = MSB position |\n        // |------------|---------|-----------------------------|\n        // |    0000    |    0    |        table[0] = 0         |\n        // |    0001    |    1    |        table[1] = 0         |\n        // |    0010    |    2    |        table[2] = 1         |\n        // |    0011    |    3    |        table[3] = 1         |\n        // |    0100    |    4    |        table[4] = 2         |\n        // |    0101    |    5    |        table[5] = 2         |\n        // |    0110    |    6    |        table[6] = 2         |\n        // |    0111    |    7    |        table[7] = 2         |\n        // |    1000    |    8    |        table[8] = 3         |\n        // |    1001    |    9    |        table[9] = 3         |\n        // |    1010    |   10    |        table[10] = 3        |\n        // |    1011    |   11    |        table[11] = 3        |\n        // |    1100    |   12    |        table[12] = 3        |\n        // |    1101    |   13    |        table[13] = 3        |\n        // |    1110    |   14    |        table[14] = 3        |\n        // |    1111    |   15    |        table[15] = 3        |\n        //\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\n        assembly (\"memory-safe\") {\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/math/SafeCast.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/math/SignedMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\n            int256 mask = n >> 255;\n\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\n            return uint256((n + mask) ^ mask);\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Panic.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/SlotDerivation.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/SlotDerivation.sol)\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\n * the solidity language / compiler.\n *\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\n *\n * Example usage:\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using StorageSlot for bytes32;\n *     using SlotDerivation for bytes32;\n *\n *     // Declare a namespace\n *     string private constant _NAMESPACE = \"<namespace>\"; // eg. OpenZeppelin.Slot\n *\n *     function setValueInNamespace(uint256 key, address newValue) internal {\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\n *     }\n *\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {StorageSlot}.\n *\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\n * upgrade safety will ignore the slots accessed through this library.\n *\n * _Available since v5.1._\n */\nlibrary SlotDerivation {\n    /**\n     * @dev Derive an ERC-7201 slot from a string (namespace).\n     */\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\n            slot := and(keccak256(0x00, 0x20), not(0xff))\n        }\n    }\n\n    /**\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\n     */\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\n        unchecked {\n            return bytes32(uint256(slot) + pos);\n        }\n    }\n\n    /**\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\n     */\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, slot)\n            result := keccak256(0x00, 0x20)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, and(key, shr(96, not(0))))\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, iszero(iszero(key)))\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, key)\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, key)\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, key)\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            let length := mload(key)\n            let begin := add(key, 0x20)\n            let end := add(begin, length)\n            let cache := mload(end)\n            mstore(end, slot)\n            result := keccak256(begin, add(length, 0x20))\n            mstore(end, cache)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            let length := mload(key)\n            let begin := add(key, 0x20)\n            let end := add(begin, length)\n            let cache := mload(end)\n            mstore(end, slot)\n            result := keccak256(begin, add(length, 0x20))\n            mstore(end, cache)\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/StorageSlot.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Strings.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SafeCast} from \"./math/SafeCast.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    using SafeCast for *;\n\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\n        (1 << 0x08) | // backspace\n            (1 << 0x09) | // tab\n            (1 << 0x0a) | // newline\n            (1 << 0x0c) | // form feed\n            (1 << 0x0d) | // carriage return\n            (1 << 0x22) | // double quote\n            (1 << 0x5c); // backslash\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev The string being parsed contains characters that are not in scope of the given base.\n     */\n    error StringsInvalidChar();\n\n    /**\n     * @dev The string being parsed is not a properly formatted address.\n     */\n    error StringsInvalidAddressFormat();\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            assembly (\"memory-safe\") {\n                ptr := add(add(buffer, 0x20), length)\n            }\n            while (true) {\n                ptr--;\n                assembly (\"memory-safe\") {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n     * representation, according to EIP-55.\n     */\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\n        bytes memory buffer = bytes(toHexString(addr));\n\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\n        uint256 hashValue;\n        assembly (\"memory-safe\") {\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\n        }\n\n        for (uint256 i = 41; i > 1; --i) {\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\n                // case shift by xoring with 0x20\n                buffer[i] ^= 0x20;\n            }\n            hashValue >>= 4;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input) internal pure returns (uint256) {\n        return parseUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        uint256 result = 0;\n        for (uint256 i = begin; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 9) return (false, 0);\n            result *= 10;\n            result += chr;\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `int256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input) internal pure returns (int256) {\n        return parseInt(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\n        (bool success, int256 value) = tryParseInt(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\n     * the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\n\n    /**\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character or if the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, int256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseIntUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseIntUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, int256 value) {\n        bytes memory buffer = bytes(input);\n\n        // Check presence of a negative sign.\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        bool positiveSign = sign == bytes1(\"+\");\n        bool negativeSign = sign == bytes1(\"-\");\n        uint256 offset = (positiveSign || negativeSign).toUint();\n\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\n\n        if (absSuccess && absValue < ABS_MIN_INT256) {\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\n            return (true, type(int256).min);\n        } else return (false, 0);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input) internal pure returns (uint256) {\n        return parseHexUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\n     * invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseHexUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        // skip 0x prefix if present\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 offset = hasPrefix.toUint() * 2;\n\n        uint256 result = 0;\n        for (uint256 i = begin + offset; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 15) return (false, 0);\n            result *= 16;\n            unchecked {\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\n                result += chr;\n            }\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input) internal pure returns (address) {\n        return parseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\n        (bool success, address value) = tryParseAddress(input, begin, end);\n        if (!success) revert StringsInvalidAddressFormat();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\n     * formatted address. See {parseAddress-string} requirements.\n     */\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\n        return tryParseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\n     */\n    function tryParseAddress(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, address value) {\n        if (end > bytes(input).length || begin > end) return (false, address(0));\n\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\n\n        // check that input is the correct length\n        if (end - begin == expectedLength) {\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\n            return (s, address(uint160(v)));\n        } else {\n            return (false, address(0));\n        }\n    }\n\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\n        uint8 value = uint8(chr);\n\n        // Try to parse `chr`:\n        // - Case 1: [0-9]\n        // - Case 2: [a-f]\n        // - Case 3: [A-F]\n        // - otherwise not supported\n        unchecked {\n            if (value > 47 && value < 58) value -= 48;\n            else if (value > 96 && value < 103) value -= 87;\n            else if (value > 64 && value < 71) value -= 55;\n            else return type(uint8).max;\n        }\n\n        return value;\n    }\n\n    /**\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\n     *\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\n     *\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\n     * characters that are not in this range, but other tooling may provide different results.\n     */\n    function escapeJSON(string memory input) internal pure returns (string memory) {\n        bytes memory buffer = bytes(input);\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\n        uint256 outputLength = 0;\n\n        for (uint256 i; i < buffer.length; ++i) {\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\n                output[outputLength++] = \"\\\\\";\n                if (char == 0x08) output[outputLength++] = \"b\";\n                else if (char == 0x09) output[outputLength++] = \"t\";\n                else if (char == 0x0a) output[outputLength++] = \"n\";\n                else if (char == 0x0c) output[outputLength++] = \"f\";\n                else if (char == 0x0d) output[outputLength++] = \"r\";\n                else if (char == 0x5c) output[outputLength++] = \"\\\\\";\n                else if (char == 0x22) {\n                    // solhint-disable-next-line quotes\n                    output[outputLength++] = '\"';\n                }\n            } else {\n                output[outputLength++] = char;\n            }\n        }\n        // write the actual length and deallocate unused memory\n        assembly (\"memory-safe\") {\n            mstore(output, outputLength)\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\n        }\n\n        return string(output);\n    }\n\n    /**\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\n     *\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\n     * assembly block as such would prevent some optimizations.\n     */\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\n        assembly (\"memory-safe\") {\n            value := mload(add(add(buffer, 0x20), offset))\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/structs/EnumerableSet.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\nimport {Arrays} from \"../Arrays.sol\";\nimport {Math} from \"../math/Math.sol\";\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n * - Set can be cleared (all elements removed) in O(n).\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * The following types are supported:\n *\n * - `bytes32` (`Bytes32Set`) since v3.3.0\n * - `address` (`AddressSet`) since v3.3.0\n * - `uint256` (`UintSet`) since v3.3.0\n * - `string` (`StringSet`) since v5.4.0\n * - `bytes` (`BytesSet`) since v5.4.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with set size. Developers should keep in mind that\n     * using it may render the function uncallable if the set grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function _clear(Set storage set) private {\n        uint256 len = _length(set);\n        for (uint256 i = 0; i < len; ++i) {\n            delete set._positions[set._values[i]];\n        }\n        Arrays.unsafeSetLength(set._values, 0);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set, uint256 start, uint256 end) private view returns (bytes32[] memory) {\n        unchecked {\n            end = Math.min(end, _length(set));\n            start = Math.min(start, end);\n\n            uint256 len = end - start;\n            bytes32[] memory result = new bytes32[](len);\n            for (uint256 i = 0; i < len; ++i) {\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\n            }\n            return result;\n        }\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(Bytes32Set storage set) internal {\n        _clear(set._inner);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner, start, end);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(AddressSet storage set) internal {\n        _clear(set._inner);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner, start, end);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(UintSet storage set) internal {\n        _clear(set._inner);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner, start, end);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    struct StringSet {\n        // Storage of set values\n        string[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(string value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(StringSet storage set, string memory value) internal returns (bool) {\n        if (!contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(StringSet storage set, string memory value) internal returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                string memory lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(StringSet storage set) internal {\n        uint256 len = length(set);\n        for (uint256 i = 0; i < len; ++i) {\n            delete set._positions[set._values[i]];\n        }\n        Arrays.unsafeSetLength(set._values, 0);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(StringSet storage set, string memory value) internal view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(StringSet storage set) internal view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(StringSet storage set, uint256 index) internal view returns (string memory) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(StringSet storage set) internal view returns (string[] memory) {\n        return set._values;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(StringSet storage set, uint256 start, uint256 end) internal view returns (string[] memory) {\n        unchecked {\n            end = Math.min(end, length(set));\n            start = Math.min(start, end);\n\n            uint256 len = end - start;\n            string[] memory result = new string[](len);\n            for (uint256 i = 0; i < len; ++i) {\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\n            }\n            return result;\n        }\n    }\n\n    struct BytesSet {\n        // Storage of set values\n        bytes[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(BytesSet storage set, bytes memory value) internal returns (bool) {\n        if (!contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(BytesSet storage set, bytes memory value) internal returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes memory lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(BytesSet storage set) internal {\n        uint256 len = length(set);\n        for (uint256 i = 0; i < len; ++i) {\n            delete set._positions[set._values[i]];\n        }\n        Arrays.unsafeSetLength(set._values, 0);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(BytesSet storage set, bytes memory value) internal view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(BytesSet storage set) internal view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(BytesSet storage set, uint256 index) internal view returns (bytes memory) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(BytesSet storage set) internal view returns (bytes[] memory) {\n        return set._values;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(BytesSet storage set, uint256 start, uint256 end) internal view returns (bytes[] memory) {\n        unchecked {\n            end = Math.min(end, length(set));\n            start = Math.min(start, end);\n\n            uint256 len = end - start;\n            bytes[] memory result = new bytes[](len);\n            for (uint256 i = 0; i < len; ++i) {\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\n            }\n            return result;\n        }\n    }\n}\n"
      },
      "project/contracts/ALFAGame.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.24;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/// @notice Project domain: alfagame.xyz\ncontract ALFAGame is ERC20 {\n\n    constructor(address initialHolder) ERC20(\"ALFA Game\", \"ALFA\") {\n        /// Mint 10 billion to initial holder\n        _mint(initialHolder, 10_000_000_000 * 10**18);\n    }\n\n}\n"
      },
      "project/contracts/const.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nuint8 constant PERCENT_DECIMALS = 6;\nuint256 constant PERCENT_PRECISION = 10**PERCENT_DECIMALS;"
      },
      "project/contracts/DAOStaking.sol": {
        "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nuint constant PERCENT_DECIMALS = 4;\nuint constant PERCENT_PRECISION = 10**4;\nuint constant MONTH_SECONDS = 3600 * 24 * 30;\nuint constant YEAR_SECONDS = MONTH_SECONDS * 12;\n\n/// @notice Staking variant structure\nstruct StakeVariant {\n    /// @notice Months of tokens lock\n    uint8 months;\n    /// @notice Account votes multiplies with 4 decimals (10000 = 100%)\n    uint24 votesMultiplier;\n    /// @notice APY with 4 decimals (10000 = 100%);\n    uint24 yearRewardMultiplier;\n}\n\n/// @notice Staking position structure\nstruct Stake {\n    /// @notice Staking position index\n    uint256 index;\n    /// @notice Months of tokens lock / Staking variant\n    uint8 months;\n    /// @notice Locked tokens\n    uint256 tokenAmount;\n    /// @notice Staking date timestamp\n    uint256 lockTimestamp;\n}\n\n/// @title DAOStaking\n/// @notice Staking for determining shares in the DAO\ncontract DAOStaking is AccessControl {\n\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /// @notice The ERC20 token used for mining rewards (immutable).\n    IERC20 immutable public token;\n\n    /// @notice Staking months set\n    EnumerableSet.UintSet private _months;\n    /// @notice Staking variants according to the months\n    mapping(uint8 months => StakeVariant variant) private _variants;\n\n    /// @notice Counter for staking indexes\n    uint256 private _lockCounter;\n    /// @notice Stake positions according to months of lock\n    mapping(uint8 months => EnumerableSet.UintSet index) private _stakesIndexes;\n    /// @notice Stake positions according to account\n    mapping(address account => EnumerableSet.UintSet index) private _accountStakes;\n    /// @notice Stake positions according to index\n    mapping(uint256 index => Stake) private _stakePositions;\n\n    /// @notice Pool of tokens locked by accounts\n    uint private _commonTokensLocked;\n    /// @notice Total number of votes\n    uint public commonVotes;\n    /// @notice Votes amounts according to accounts\n    mapping(address account => uint256 votes) public accountVotes;\n\n    constructor(address tokenAddress, address adminAddress) {\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _grantRole(DEFAULT_ADMIN_ROLE, address(this));\n\n        token = IERC20(tokenAddress);\n        /// No lock staking variant with x0.1 votes multiplier and 8% APY\n        addStakingVariant(0, 1000, 800);\n        /// 1 month lock staking variant with x0.25 votes multiplier and 24% APY\n        addStakingVariant(1, 2500, 2400);\n        /// 3 months lock staking variant with x0.75 votes multiplier and 36% APY\n        addStakingVariant(3, 7500, 3600);\n        /// 6 months lock staking variant with x1.5 votes multiplier and 50% APY\n        addStakingVariant(6, 15000, 5000);\n        /// 9 months lock staking variant with x1.75 votes multiplier and 64% APY\n        addStakingVariant(9, 17500, 6400);\n        /// 12 months lock staking variant with x3 votes multiplier and 88% APY\n        addStakingVariant(12, 30000, 8800);\n        /// 24 months lock staking variant with x5 votes multiplier and 108% APY\n        addStakingVariant(24, 50000, 10800);\n        /// 36 months lock staking variant with x7 votes multiplier and 148% APY\n        addStakingVariant(36, 70000, 14800);\n\n        _grantRole(DEFAULT_ADMIN_ROLE, adminAddress);\n        _revokeRole(DEFAULT_ADMIN_ROLE, address(this));\n        _revokeRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n\n    /// Events\n\n    event StakingVariantAdded(uint8 indexed months, uint24 votesMultiplier, uint24 yearRewardMultiplier);\n    event StakingVariantEdited(uint8 indexed months, uint24 votesMultiplier, uint24 yearRewardMultiplier);\n    event StakingVariandRemoved(uint8 indexed months);\n\n    event Staked(address indexed account, uint8 indexed months, uint256 tokenAmount, uint256 rewardAmount, uint256 lockAmount, uint256 votesAmount, uint256 lockTimestamp);\n    event Unstaked(address indexed account, uint8 indexed months, uint256 tokenAmount, uint256 rewardAmount, uint256 transferAmount, uint256 votesAmount, uint256 lockTimestamp, uint256 unlockTimestamp);\n\n    event Withdraw(address indexed account, uint256 tokenAmount);\n\n\n    /// Custom errors\n\n    /// @dev Not enough tokens in reward pool\n    /// @param available Available tokens in the reward pool\n    /// @param needed Needed tokens for the future reward\n    error NotEnoughTokensForReward(uint256 available, uint256 needed);\n\n    /// @dev The lock period is not over yet\n    /// @param currentTimestamp Current block timestamp\n    /// @param unlockTimestamp Timestamp when unlock will be available\n    error LockPeriodError(uint256 currentTimestamp, uint256 unlockTimestamp);\n\n\n    /// Internal methods\n\n    function _getVotesAmount(uint8 months, uint256 tokenAmount) internal view returns (uint256) {\n        return tokenAmount * _variants[months].votesMultiplier / PERCENT_PRECISION;\n    }\n\n    function _getRewardSize(uint8 months, uint256 tokenAmount, uint256 lockTimestamp) internal view returns (uint256) {\n        uint256 yearReward = tokenAmount * _variants[months].yearRewardMultiplier / PERCENT_PRECISION;\n        if (months > 0) {\n            return yearReward * months / 12;\n        } else {\n            uint256 time = block.timestamp - lockTimestamp;\n            return yearReward * time / YEAR_SECONDS;\n        }\n    }\n\n    function _getUnlockTimestamp(uint8 months, uint256 lockTimestamp) internal pure returns (uint256) {\n        return lockTimestamp + months * MONTH_SECONDS;\n    }\n\n\n    /// Admin methods\n    \n    /// @notice Add a new stacking variant.\n    /// @param months Lock period in months (255 max).\n    /// @param votesMultiplier Votes multiplier with 4 decimals (10000 = 100%).\n    /// @param yearRewardMultiplier Year reward with 4 decimals (10000 = 100%).\n    /// @dev The caller must have DEFAULT_ADMIN_ROLE role.\n    function addStakingVariant(uint8 months, uint24 votesMultiplier, uint24 yearRewardMultiplier)\n    public\n    onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(!_months.contains(months), \"This lock period is already exists\");\n\n        _months.add(months);\n        _variants[months] = StakeVariant(\n            months,\n            votesMultiplier,\n            yearRewardMultiplier\n        );\n\n        emit StakingVariantAdded(months, votesMultiplier, yearRewardMultiplier);\n    }\n\n    /// @notice Edit existing stacking variant.\n    /// @param months Lock period in months (255 max).\n    /// @param votesMultiplier Votes multiplier with 4 decimals (10000 = 100%).\n    /// @param yearRewardMultiplier Year reward with 4 decimals (10000 = 100%).\n    /// @dev The caller must have DEFAULT_ADMIN_ROLE role.\n    function editStakingVariant(uint8 months, uint24 votesMultiplier, uint24 yearRewardMultiplier)\n    public\n    onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(_months.contains(months), \"This lock period is not exists\");\n        require(_stakesIndexes[months].length() == 0, \"This lock period already in use\");\n\n        _variants[months].votesMultiplier = votesMultiplier;\n        _variants[months].yearRewardMultiplier = yearRewardMultiplier;\n\n        emit StakingVariantEdited(months, votesMultiplier, yearRewardMultiplier);\n    }\n\n    /// @notice Removes existing staking variant.\n    /// @param months Lock period in months (255 max).\n    /// @dev The caller must have DEFAULT_ADMIN_ROLE role.\n    function removeStakingVariant(uint8 months)\n    public\n    onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(_months.contains(months), \"This lock period is not exists\");\n        require(_stakesIndexes[months].length() == 0, \"This lock period already in use\");\n\n        _months.remove(months);\n\n        emit StakingVariandRemoved(months);\n    }\n\n    /// @notice Withdraws free funds not reserved by staking.\n    /// @param tokenAmount Amount of tokens to withdraw.\n    /// @dev The caller must have DEFAULT_ADMIN_ROLE role.\n    function withdraw(uint256 tokenAmount) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(getAvailablePoolBalance() >= tokenAmount, \"Not enough tokens in reward pool\");\n\n        token.transfer(_msgSender(), tokenAmount);\n        \n        emit Withdraw(_msgSender(), tokenAmount);\n    }\n\n\n    /// Public read methods\n\n    /// @notice Returns the amount of tokens reserved by participants.\n    /// @return Current pool balance locked by staking.\n    function getLockedPoolBalance() public view returns (uint256) {\n        return _commonTokensLocked;\n    }\n\n    /// @notice Tokens in the current pool balance released from locking.\n    /// @return Available tokens for use.\n    function getAvailablePoolBalance() public view returns (uint256) {\n        return token.balanceOf(address(this)) - getLockedPoolBalance();\n    }\n\n    /// @notice Returns account share in the DAO\n    /// @param account Account address\n    /// @return Share percents with 4 decimals (10000 = 100%)\n    function getAccountShare(address account) public view returns(uint24) {\n        return uint24(accountVotes[account] * PERCENT_PRECISION / commonVotes);\n    }\n\n    /// @notice Returns amount of account staking positions\n    /// @param account Account address\n    /// @return Account staking positions array length\n    function getAccountStakesLength(address account) public view returns(uint256) {\n        return _accountStakes[account].length();\n    }\n\n    /// @notice Returns account staking positions\n    /// @param account Account address\n    /// @param offset Offset from the beginning of the array\n    /// @param limit Number of positions to return\n    /// @return Array of account staking positions\n    /// @dev Limit can be greater than account stakes length\n    function getAccountStakes(address account, uint256 offset, uint256 limit) public view returns(Stake[] memory) {\n        uint256 available = _accountStakes[account].length();\n        uint256 realLimit = offset > available\n            ? 0\n            : available - offset;\n        if (limit < realLimit) {\n            realLimit = limit;\n        }\n        Stake[] memory locks = new Stake[](realLimit);\n        for (uint256 i = offset; i < offset + realLimit; i++) {\n            locks[i] = _stakePositions[_accountStakes[account].at(i)];\n        }\n        return locks;\n    }\n\n    /// @notice Returns staking positions according to staking variant\n    /// @param months Staking variant months\n    /// @param offset Offset from the beginning of the array\n    /// @param limit Number of positions to return\n    /// @return Array of account staking positions\n    function getVariantStakes(uint8 months, uint256 offset, uint256 limit) public view returns(Stake[] memory) {\n        uint256 available = _stakesIndexes[months].length();\n        uint256 realLimit = offset > available\n            ? 0\n            : available - offset;\n        if (limit < realLimit) {\n            realLimit = limit;\n        }\n        Stake[] memory locks = new Stake[](realLimit);\n        for (uint256 i = offset; i < offset + realLimit; i++) {\n            locks[i] = _stakePositions[_stakesIndexes[months].at(i)];\n        }\n        return locks;\n    }\n\n    /// @notice Returns staking variants\n    /// @return Array of staking variants\n    function getStakeVariants() public view returns(StakeVariant[] memory) {\n        StakeVariant[] memory variants = new StakeVariant[](_months.length());\n        for (uint256 i; i < variants.length; i++) {\n            uint8 month = uint8(_months.at(i));\n            variants[i] = _variants[month];\n        }\n        return variants;\n    }\n\n\n    /// Common write methods\n\n    /// @notice Stake specified amount of tokens for a specified number of months.\n    /// @param months Number of months of staking, from the list of staking variants.\n    /// @param tokenAmount Amount of ERC20 tokens.\n    /// @return Stacking index.\n    function stake(uint8 months, uint256 tokenAmount) public returns (uint256) {\n        address account = _msgSender();\n        require(_months.contains(months), \"This lock period is not exists\");\n        /// Transfer account tokens to the pool.\n        require(token.transferFrom(account, address(this), tokenAmount), \"Can't transfer token\");\n\n        /// Get future reward size and check reward pool.\n        uint256 rewardSize = _getRewardSize(months, tokenAmount, block.timestamp);\n        uint256 tokensToLock = tokenAmount + rewardSize;\n        if (getAvailablePoolBalance() < tokensToLock) {\n            revert NotEnoughTokensForReward(\n                getAvailablePoolBalance() - tokenAmount,\n                rewardSize\n            );\n        }\n        _commonTokensLocked += tokensToLock;\n\n        /// Increase votes pool.\n        uint256 votes = _getVotesAmount(months, tokenAmount);\n        accountVotes[account] += votes;\n        commonVotes += votes;\n\n        /// Create lock record.\n        uint256 index = _lockCounter++;\n        _stakesIndexes[months].add(index);\n        _accountStakes[account].add(index);\n        _stakePositions[index] = Stake(\n            index,\n            months,\n            tokenAmount,\n            block.timestamp\n        );\n\n        emit Staked(account, months, tokenAmount, rewardSize, tokensToLock, votes, block.timestamp);\n        return index;\n    }\n\n    /// @notice Returns tokens from staking with rewards.\n    /// @param index Staking index.\n    /// @dev The caller must be the stake owner.\n    function unstake(uint256 index) public {\n        address account = _msgSender();\n        require(_accountStakes[account].contains(index), \"You have no access to this position or position is not exists\");\n        Stake storage data = _stakePositions[index];\n        uint256 unlockTimestamp = _getUnlockTimestamp(data.months, data.lockTimestamp);\n        if (block.timestamp < unlockTimestamp) {\n            revert LockPeriodError(block.timestamp, unlockTimestamp);\n        }\n\n        uint256 rewardSize = _getRewardSize(data.months, data.tokenAmount, data.lockTimestamp);\n        uint256 votes = _getVotesAmount(data.months, data.tokenAmount);\n\n        /// Transfer tokens from the pool.\n        uint256 amountToTransfer = data.tokenAmount + rewardSize;\n        if (data.months > 0) {\n            require(token.transfer(account, amountToTransfer), \"Can't transfer token\");\n            _commonTokensLocked -= amountToTransfer;\n        } else {\n            uint256 available = getAvailablePoolBalance();\n            if (available < rewardSize) {\n                revert NotEnoughTokensForReward(available, rewardSize);\n            }\n            require(token.transfer(account, amountToTransfer), \"Can't transfer token\");\n            _commonTokensLocked -= data.tokenAmount;\n        }\n\n        /// Decrease votes pool.\n        accountVotes[account] -= votes;\n        commonVotes -= votes;\n\n        /// Remove account tokens lock.\n        _stakesIndexes[data.months].remove(index);\n        _accountStakes[account].remove(index);\n\n        emit Unstaked(account, data.months, data.tokenAmount, rewardSize, amountToTransfer, votes, data.lockTimestamp, block.timestamp);\n    }\n\n    /// @notice Returns tokens from all available caller stakings\n    function unstakeAvailable() public {\n        address account = _msgSender();\n        for (uint256 i; i < _accountStakes[account].length(); i++) {\n            uint256 index = _accountStakes[account].at(i);\n            if (_getUnlockTimestamp(_stakePositions[index].months, _stakePositions[index].lockTimestamp) >= block.timestamp) {\n                unstake(index);\n            }\n        }\n    }\n    \n}"
      },
      "project/contracts/forge/ALFAForge.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {AccessControl, IAccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {IALFAForge, UpgradeChance, UpgradePrice, NotEnoughTokens, NotEnoughAllowance} from \"./IALFAForge.sol\";\nimport {IALFAKey} from \"../NFT/Key/IALFAKey.sol\";\nimport {IALFAVault} from \"../vault/interfaces/IALFAVault.sol\";\nimport {IALFAReferral, ReferralPercents} from \"../referral/interfaces/IALFAReferral.sol\";\nimport {IPancakeRouter} from \"../store/interfaces/IPancakeRouter.sol\";\nimport {PERCENT_PRECISION} from \"../const.sol\";\n\n/// @title ALFA Forge\n/// @notice Upgrades ALFA Key NFTs by burning five source keys and minting a new key according to configured drop chances.\n/// @dev Accepts payments in ERC20 tokens or native BNB, quotes prices from USDT via PancakeSwap V2, and distributes proceeds among referrals, team, and burn account.\ncontract ALFAForge is AccessControl, IALFAForge {\n\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    bytes32 public constant EDITOR_ROLE = keccak256(\"EDITOR_ROLE\");\n\n    address private constant PANCAKE_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // V2 Router mainnet BSC\n    address private constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n    address private constant USDT = 0x55d398326f99059fF775485246999027B3197955; // Binance-Peg USDT\n\n    IPancakeRouter private constant router = IPancakeRouter(PANCAKE_ROUTER);\n\n    EnumerableSet.AddressSet private _tokens;\n    mapping(address tokenAddress => uint256 tokenDiscount) private _discount;\n\n    mapping (uint256 typeId => uint256 priceUSDT) private _prices;\n    mapping(uint256 typeId => UpgradeChance[] drop) internal _typeDrop;\n    IALFAKey public immutable key;\n    IALFAVault public immutable vault;\n    IALFAReferral private immutable _referral;\n\n    uint256 private _randomCounter;\n\n    address public teamAccount;\n    address public burnAccount;\n    uint256 public burnShare = 800_000;\n\n    /// @notice Initializes the forge with key, burn, referral, and vault contracts; sets initial upgrade prices and drop tables.\n    /// @dev Deployer receives DEFAULT_ADMIN_ROLE and EDITOR_ROLE; `teamAccount` is initially the deployer.\n    /// @param keyAddress Address of the ALFA Key contract.\n    /// @param burnAccountAddress Address that receives the burn share of proceeds.\n    /// @param referralAddress Address of the referral contract used for payout distribution.\n    /// @param vaultAddress Address of the vault contract (used for sale schedule checks, e.g., unlock date).\n    constructor(\n        address keyAddress,\n        address burnAccountAddress,\n        address referralAddress,\n        address vaultAddress\n        ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _grantRole(EDITOR_ROLE, _msgSender());\n\n        teamAccount = _msgSender();\n        burnAccount = burnAccountAddress;\n\n        key = IALFAKey(keyAddress);\n        vault = IALFAVault(vaultAddress);\n        _referral = IALFAReferral(referralAddress);\n\n        _addToken(address(0));\n\n\n        uint256[] memory initialPrices = new uint256[](5);\n        initialPrices[0] = 0;\n        initialPrices[1] = 25 * 1e17;\n        initialPrices[2] = 25 * 1e18;\n        initialPrices[3] = 25 * 1e19;\n        initialPrices[4] = 25 * 1e20;\n        _setPrices(initialPrices);\n\n        _addDrop(1, UpgradeChance(0, 200000));\n        _addDrop(1, UpgradeChance(2, 780000));\n        _addDrop(1, UpgradeChance(3,  17500));\n        _addDrop(1, UpgradeChance(4,   2400));\n        _addDrop(1, UpgradeChance(5,    100));\n\n        _addDrop(2, UpgradeChance(0, 400000));\n        _addDrop(2, UpgradeChance(3, 560000));\n        _addDrop(2, UpgradeChance(4,  39500));\n        _addDrop(2, UpgradeChance(5,    500));\n\n        _addDrop(3, UpgradeChance(0, 600000));\n        _addDrop(3, UpgradeChance(4, 399000));\n        _addDrop(3, UpgradeChance(5,   1000));\n\n        _addDrop(4, UpgradeChance(0, 800000));\n        _addDrop(4, UpgradeChance(5, 200000));\n    }\n\n    /// @notice Accepts native BNB transfers. Attempts to forward funds to the team account; if forwarding fails, funds remain in the contract.\n    /// @dev We deliberately do not revert here to avoid breaking blind transfers. Use explicit functions for accounting-sensitive deposits.\n    receive() external payable {\n        (bool sent,) = address(teamAccount).call{value: msg.value}(\"\");\n        // If the vault has no payable receive/fallback, keep funds in the store to avoid reverting user transfers.\n        if (!sent) {\n            // no-op; funds remain in this contract\n        }\n    }\n\n\n    /// Read methods\n\n    /// @notice Returns a matrix of upgrade prices for each key type and each accepted payment token.\n    /// @dev Rows correspond to target upgrade typeId (1..N-1), columns correspond to tokens from the internal allowlist `_tokens`.\n    ///      Each cell contains the quoted token amount required to pay the USDT-denominated upgrade price for that type.\n    /// @return upgradePrice A 2D array [typeIdIndex][tokenIndex] with token address, typeId and amount.\n    function getPrices() public view returns (UpgradePrice[][] memory) {\n        UpgradePrice[][] memory upgradePrice = new UpgradePrice[][](key.getTypes().length - 1);\n\n        for (uint256 i; i < upgradePrice.length; i++) {\n            upgradePrice[i] = new UpgradePrice[](_tokens.length());\n\n            for (uint256 t; t < _tokens.length(); t++) {\n                upgradePrice[i][t].typeId = i + 1;\n                upgradePrice[i][t].tokenAddress = _tokens.at(t);\n                if (upgradePrice[i][t].tokenAddress == address(0)) {\n                    upgradePrice[i][t].amount = _quoteBNBForUSDT(_prices[i + 1]);\n                } else {\n                    upgradePrice[i][t].amount = _quoteTokenForUSDT(upgradePrice[i][t].tokenAddress, _prices[i + 1]);\n                }\n            }\n        }\n        return upgradePrice;\n    }\n\n    /// @notice Checks whether a payment token is currently allowed for upgrades.\n    /// @param tokenAddress Address of the payment token (use address(0) for BNB).\n    /// @return True if the token is enabled, false otherwise.\n    function getTokenAvailable(address tokenAddress) public view returns (bool) {\n        return _tokens.contains(tokenAddress);\n    }\n\n\n    /// Write methods\n\n    /// @notice Upgrades a key by paying with an ERC20 token.\n    /// @dev Requires exactly 5 token IDs of the same type owned by the caller. Charges the quoted price, distributes proceeds, burns the five source keys, and mints a new key based on drop chances.\n    /// @param tokenId Array of exactly 5 key IDs to upgrade (all must belong to the caller and be of the same type).\n    /// @param tokenAddress ERC20 token used for payment (must be in the allowlist).\n    /// @return newItemId ID of the newly minted key if upgrade hits a non-zero type; otherwise emits burn-only event.\n    function upgrade(uint256[] memory tokenId, address tokenAddress) public returns (uint256 newItemId) {\n        uint256 typeId = _pay(tokenId, tokenAddress);\n        newItemId = _upgrade(tokenId, typeId);\n    }\n\n    /// @notice Upgrades a key by paying with native BNB.\n    /// @dev Requires exactly 5 token IDs of the same type owned by the caller. Quotes USDT price to BNB, distributes proceeds, burns the five source keys, mints a new key per drop table, and refunds excess BNB.\n    /// @param tokenId Array of exactly 5 key IDs to upgrade (all must belong to the caller and be of the same type).\n    /// @return newItemId ID of the newly minted key if upgrade hits a non-zero type; otherwise emits burn-only event.\n    function upgrade(uint256[] memory tokenId) public payable returns (uint256 newItemId) {\n        uint256 typeId = _pay(tokenId, address(0));\n        newItemId = _upgrade(tokenId, typeId);\n    }\n\n\n    /// Admin methods\n\n    /// @notice Sets USDT-denominated upgrade prices per key type.\n    /// @dev Only callable by DEFAULT_ADMIN_ROLE. Emits `PriceSet` for each typeId (starting from 1).\n    /// @param prices Array of prices in USDT (raw units), indexed by typeId.\n    function setPrices(uint256[] memory prices) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setPrices(prices);\n    }\n\n    /// @notice Sets the burn share percentage (scaled by PERCENT_PRECISION).\n    /// @dev Must be &lt;= 100% (PERCENT_PRECISION). The remainder after referrals and the burn share is paid to the team.\n    /// @param sharePercents New burn share in PERCENT_PRECISION units.\n    function setBurnShare(uint256 sharePercents) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(sharePercents <= PERCENT_PRECISION, \"Share exceeds 100%\");\n        burnShare = sharePercents;\n        emit BurnShareSet(sharePercents);\n    }\n\n    /// @notice Updates the burn payout account.\n    /// @dev Only callable by DEFAULT_ADMIN_ROLE.\n    /// @param accountAddress Address to receive the burn part of the revenue.\n    function setBurnAccount(address accountAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        burnAccount = accountAddress;\n        emit BurnAccountSet(accountAddress);\n    }\n\n    /// @notice Updates the team payout account.\n    /// @dev Only callable by DEFAULT_ADMIN_ROLE.\n    /// @param accountAddress Address to receive the team part of the revenue.\n    function setTeamAccount(address accountAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        teamAccount = accountAddress;\n        emit TeamAccountSet(accountAddress);\n    }\n\n    /// @notice Adds a payment token to the allowlist.\n    /// @dev Only callable by DEFAULT_ADMIN_ROLE. Reverts if the token is already allowed.\n    /// @param tokenAddress Address of the token to add (use address(0) for native BNB).\n    /// @return newIndex Index of the token inside the allowlist.\n    function addToken(address tokenAddress) public onlyRole(DEFAULT_ADMIN_ROLE) returns (uint256 newIndex) {\n        return _addToken(tokenAddress);\n    }\n\n    /// @notice Removes a payment token from the allowlist.\n    /// @dev Only callable by DEFAULT_ADMIN_ROLE. Reverts if the token is not currently allowed.\n    /// @param tokenAddress Address of the token to remove (use address(0) for native BNB).\n    function removeToken(address tokenAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _removeToken(tokenAddress);\n    }\n\n    /// @notice Sets a discount percentage for a specific payment token.\n    /// @dev Discount is applied as `price -= price * discount / PERCENT_PRECISION`. Use 0 for no discount.\n    /// @param tokenAddress Payment token to discount (use address(0) for native BNB).\n    /// @param discountPercents Discount in PERCENT_PRECISION units.\n    function setTokenDiscount(address tokenAddress, uint256 discountPercents) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _discount[tokenAddress] = discountPercents;\n        emit TokenDiscountSet(tokenAddress, discountPercents);\n    }\n\n\n    /// Internal methods\n\n    /// @notice Reverts if the payment token is not in the Forge allowlist.\n    /// @dev Native payments use `address(0)`. ERC20 tokens must be present in `_tokens`.\n    /// @param tokenAddress Address of the payment token (use address(0) for BNB).\n    function _requireTokenAvailable(address tokenAddress) internal view {\n        require(_tokens.contains(tokenAddress), \"Token is not allowed\");\n    }\n\n    function _requireSameType(uint256[] memory tokenId) internal view returns (uint256 typeId) {\n        require(tokenId.length == 5, \"Not enough keys for upgrade\");\n        typeId = key.tokenTypeId(tokenId[0]);\n        for (uint256 i = 1; i < tokenId.length; i++) {\n            require(key.tokenTypeId(tokenId[i]) == typeId, \"All keys must be of the same type\");\n        }\n    }\n\n    /// @notice Appends a drop chance entry for a given upgrade type.\n    /// @dev `drop.typeId` is the resulting type; `drop.chance` is in PERCENT_PRECISION. Returns the new entry index (1-based).\n    /// @param typeId Source key type to configure.\n    /// @param drop UpgradeChance structure to append.\n    /// @return newDropId Index of the newly added drop entry for `typeId` (1-based).\n    function _addDrop(uint256 typeId, UpgradeChance memory drop) internal returns (uint256 newDropId) {\n        _typeDrop[typeId].push(drop);\n        newDropId = _typeDrop[typeId].length;\n        emit TypeDropAdded(typeId, newDropId, drop);\n        return newDropId;\n    }\n\n    /// @notice Adds a payment token to the internal allowlist.\n    /// @dev Emits `TokenAdded`. Reverts if the token is already present.\n    /// @param tokenAddress Address of the token to add (use address(0) for native BNB).\n    /// @return newIndex Index of the token inside the allowlist.\n    function _addToken(address tokenAddress) internal returns (uint256 newIndex) {\n        require(!_tokens.contains(tokenAddress), \"Token is already allowed\");\n        _tokens.add(tokenAddress);\n        emit TokenAdded(tokenAddress);\n        return _tokens.length() - 1;\n    }\n\n    /// @notice Removes a payment token from the internal allowlist.\n    /// @dev Emits `TokenRemoved`. Reverts if the token is not present.\n    /// @param tokenAddress Address of the token to remove (use address(0) for native BNB).\n    function _removeToken(address tokenAddress) internal {\n        require(_tokens.contains(tokenAddress), \"Token is not allowed\");\n        _tokens.remove(tokenAddress);\n        emit TokenRemoved(tokenAddress);\n    }\n\n    /// @notice Pseudo-random generator for testing/low-stakes selection.\n    /// @dev Uses block.prevrandao, timestamp, and an incrementing counter; not suitable for adversarial settings.\n    /// @param mod Modulo for the returned value.\n    /// @return Random value in [0, mod).\n    function _pseudoRandom(uint256 mod) internal returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(block.prevrandao, block.timestamp, ++_randomCounter)))\n            % mod;\n    }\n\n    /// @notice Rolls the drop table for a given type and returns the resulting rarity index.\n    /// @dev Aggregates from the end of the array assuming ascending rarity; returns 0 if no threshold matched.\n    /// @param typeId Source key type.\n    /// @return Index of the selected rarity in the `_typeDrop[typeId]` array.\n    function _rollDrop(uint256 typeId) internal returns (uint256) {\n        uint rand = _pseudoRandom(PERCENT_PRECISION);\n        uint chance;\n        if (_typeDrop[typeId].length > 1) {\n            for (uint256 rarity = _typeDrop[typeId].length - 1; rarity > 0; rarity--) {\n                chance += _typeDrop[typeId][rarity].chance;\n                if (rand <= chance) {\n                    return rarity;\n                }\n            }\n        }\n        return 0;\n    }\n\n    /// @notice Burns the five source keys and mints a new key according to the rolled drop.\n    /// @dev Emits `KeyUpgraded` when a new key is minted; otherwise emits `KeyBurned`.\n    /// @param tokenId Array of exactly 5 key IDs being upgraded (already validated/paid by caller).\n    /// @return nftItemId New key ID if minted, otherwise 0.\n    function _upgrade(uint256[] memory tokenId, uint256 typeId) internal returns (uint256 nftItemId) {\n        address holder = _msgSender();\n\n        uint256 rarity = _rollDrop(typeId);\n        UpgradeChance storage drop = _typeDrop[typeId][rarity];\n\n        if (drop.typeId > 0) {\n            for (uint256 i; i < tokenId.length; i++) {\n                key.burn(holder, tokenId[i]);\n            }\n            nftItemId = key.mint(holder, drop.typeId);\n            emit KeyUpgraded(holder, typeId, tokenId, drop.typeId, nftItemId);\n        } else {\n            key.burn(holder, tokenId[0]);\n            emit KeyBurned(holder, typeId, tokenId[0]);\n        }\n    }\n\n    /// @notice Internal helper to set USDT-denominated prices per typeId and emit events.\n    /// @param prices Array of prices in USDT (raw units), indexed by typeId.\n    function _setPrices(uint256[] memory prices) internal {\n        for (uint256 i = 1; i < prices.length; i++) {\n            _prices[i] = prices[i];\n            emit PriceSet(i, prices[i]);\n        }\n    }\n\n    /// @notice Quotes how many `tokenOut` are needed for the given USDT amount using PancakeSwap V2.\n    /// @dev Tries the direct USDT→tokenOut path; if it fails, falls back to USDT→WBNB→tokenOut.\n    /// @param tokenOut The output token address (use WBNB for native BNB).\n    /// @param usdtAmount Amount in USDT (raw units) to convert.\n    /// @return amountOut Quoted amount of `tokenOut` (raw units).\n    function _quoteTokenForUSDT(address tokenOut, uint256 usdtAmount) internal view returns (uint256 amountOut) {\n        if (tokenOut == USDT) {\n            // 1 USDT = 1 USDT\n            return usdtAmount;\n        }\n\n        // 1) Try direct USDT -> tokenOut path\n        {\n            address[] memory path = new address[](2);\n            path[0] = USDT;\n            path[1] = tokenOut;\n            try router.getAmountsOut(usdtAmount, path) returns (uint[] memory amounts) {\n                return amounts[1];\n            } catch { /* fallback below */ }\n        }\n\n        // 2) Fallback via WBNB: USDT -> WBNB -> tokenOut\n        {\n            address[] memory path = new address[](3);\n            path[0] = USDT;\n            path[1] = WBNB;\n            path[2] = tokenOut;\n            uint[] memory amounts = router.getAmountsOut(usdtAmount, path);\n            return amounts[2];\n        }\n    }\n\n    /// @notice Quotes how much BNB (via WBNB) is needed for the given USDT amount using PancakeSwap V2.\n    /// @param usdtAmount Amount in USDT (raw units) to convert.\n    /// @return wbnbOut Quoted amount of WBNB (raw units), numerically equal to BNB.\n    function _quoteBNBForUSDT(uint256 usdtAmount) internal view returns (uint256 wbnbOut) {\n        address[] memory path = new address[](2);\n        path[0] = USDT;\n        path[1] = WBNB;\n        uint[] memory amounts = router.getAmountsOut(usdtAmount, path);\n        return amounts[1];\n    }\n\n    /// @notice Sends payment from buyer to a recipient in either native BNB or ERC20.\n    /// @dev For ERC20, requires prior allowance from `from` to this contract.\n    /// @param tokenAddress Payment token (address(0) for BNB).\n    /// @param from Payer address (usually buyer).\n    /// @param to Recipient address.\n    /// @param amount Amount to transfer (raw units).\n    function _send(address tokenAddress, address from, address to, uint256 amount) internal {\n        if (tokenAddress == address(0)) {\n            (bool sent,) = address(to).call{value: amount}(\"\");\n            require(sent, \"Failed to send BNB\");\n        } else {\n            require(IERC20(tokenAddress).transferFrom(from, to, amount), \"Can't send payment token\");\n        }\n    }\n\n    /// @notice Distributes a payment across referral parents, team, and burn account according to configured percentages.\n    /// @dev Returns the remaining share after paying referrals and team, which is then sent to the burn account.\n    /// @param holder Buyer address used as the base of the referral chain.\n    /// @param refs Referral distribution data (ordered from closest parent).\n    /// @param tokenAddress Payment token (address(0) for BNB).\n    /// @param amount Total payment amount to distribute (raw units).\n    /// @return percentsLeft Remaining percentage (in PERCENT_PRECISION) after referral payouts, capped to `burnShare`.\n    function _distributePayment(address holder, ReferralPercents[] memory refs, address tokenAddress, uint256 amount) internal returns (uint256 percentsLeft) {\n        percentsLeft = PERCENT_PRECISION;\n        /// Current step refer;\n        address refer = holder;\n        /// Loop for all available refers;\n        uint r;\n        while (r < refs.length) {\n            /// Current parent; Stop if there is no parents left;\n            address parent = refs[r].parentAddress;\n            /// Stop loop is there is no referer or he is blocked\n            if (parent == address(0)) {\n                break;\n            }\n            /// Decrease total percents\n            percentsLeft -= refs[r].percents;\n            /// Send tokens\n            uint256 referralAmount = refs[r].percents * amount / PERCENT_PRECISION;\n            _send(tokenAddress, holder, parent, referralAmount);\n            emit ReferralRewardSent(holder, parent, refer, tokenAddress, referralAmount);\n            /// Next loop step;\n            refer = parent;\n            r++;\n        }\n\n        /// Send to the team\n        if (percentsLeft > burnShare) {\n            uint256 teamShareAmount = (percentsLeft - burnShare) * amount / PERCENT_PRECISION;\n            _send(tokenAddress, holder, teamAccount, teamShareAmount);\n            emit TeamRewardSent(holder, teamAccount, tokenAddress, teamShareAmount);\n            percentsLeft = burnShare;\n        }\n\n        /// Send to the vault\n        uint256 burnShareAmount = percentsLeft * amount / PERCENT_PRECISION;\n        _send(tokenAddress, holder, address(burnAccount), burnShareAmount);\n        emit BurnAccountRefilled(holder, tokenAddress, burnShareAmount);\n    }\n\n    /// @notice Validates ownership and availability, computes the price (including discounts), and collects payment.\n    /// @dev Requires exactly 5 token IDs of the same type owned by the caller. Dispatches to native or ERC20 branch; on native, refunds excess to caller (or forwards to vault if refund fails).\n    /// @param tokenId Array of exactly 5 key IDs to upgrade.\n    /// @param tokenAddress Payment token (address(0) for BNB).\n    /// @return typeId The source key type shared by the provided IDs.\n    function _pay(uint256[] memory tokenId, address tokenAddress) internal returns (uint256 typeId) {\n        typeId = _requireSameType(tokenId);\n        address holder = _msgSender();\n        for (uint256 i = 0; i < tokenId.length; i++) {\n            require(holder == key.ownerOf(tokenId[i]), \"Wrong token owner\");\n        }\n        require(block.timestamp < vault.unlockDate(), \"Sale is not available\");\n        require(typeId < key.getTypes().length && _prices[typeId] > 0, \"Upgrade of this NFT type is not available\");\n        _requireTokenAvailable(tokenAddress);\n        \n        /// Get initial data\n        ReferralPercents[] memory refs = _referral.getReferralPercents(holder);\n        uint256 price = tokenAddress == address(0)\n            ? _quoteBNBForUSDT(_prices[typeId])\n            : _quoteTokenForUSDT(tokenAddress, _prices[typeId]);\n        price -= price * _discount[tokenAddress] / PERCENT_PRECISION;\n\n        if (tokenAddress == address(0)) {\n            /// BNB amount check\n            if (msg.value < price) {\n                revert NotEnoughTokens(price, msg.value);\n            }\n            /// Distribute payment\n            _distributePayment(holder, refs, tokenAddress, price);\n            /// Cashback with reminder\n            uint256 reminder = msg.value - price;\n            if (reminder > 0) {\n                (bool reminderSent,) = holder.call{value: reminder}(\"\");\n                if (!reminderSent) {\n                    address(vault).call{value: reminder}(\"\");\n                }\n            }\n        } else {\n            /// ERC20 token amount check\n            IERC20 token = IERC20(tokenAddress);\n            uint256 allowance = token.allowance(holder, address(this));\n            uint256 balance = token.balanceOf(holder);\n            if (balance < price) {\n                revert NotEnoughTokens(price, balance);\n            } else if (allowance < price) {\n                revert NotEnoughAllowance(price, allowance);\n            }\n            /// Distribute payment\n            _distributePayment(holder, refs, tokenAddress, price);\n        }\n    }\n\n\n}"
      },
      "project/contracts/forge/IALFAForge.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IALFAKey} from \"../NFT/Key/IALFAKey.sol\";\nimport {IALFAVault} from \"../vault/interfaces/IALFAVault.sol\";\n\nstruct UpgradeChance {\n    uint256 typeId;\n    uint256 chance;\n}\n\nstruct UpgradePrice {\n    uint256 typeId;\n    address tokenAddress;\n    uint256 amount;\n}\n\nerror NotEnoughTokens(uint256 required, uint256 received);\nerror NotEnoughAllowance(uint256 required, uint256 received);\n\ninterface IALFAForge {\n\n    event TypeDropAdded(uint256 indexed typeId, uint256 dropIndex, UpgradeChance drop);\n    event TypeDropCleared(uint256 indexed typeId);\n\n    event KeyUpgraded(address indexed holder, uint256 typeId, uint256[] tokenId, uint256 newTypeId, uint256 newTokenId);\n    event KeyBurned(address indexed holder, uint256 typeId, uint256 tokenId);\n\n    event PriceSet(uint256 typeId, uint256 price);\n    event ReferralRewardSent(address indexed holder, address indexed receiver, address indexed child, address tokenAddress, uint256 tokenAmount);\n    event BurnAccountRefilled(address indexed holder, address tokenAddress, uint256 tokenAmount);\n    event TeamRewardSent(address indexed holder, address indexed teamAccount, address tokenAddress, uint256 tokenAmount);\n    event TeamAccountSet(address accountAddress);\n    event BurnAccountSet(address accountAddress);\n    event BurnShareSet(uint256 sharePercents);\n    event TokenDiscountSet(address tokenAddress, uint256 discountPercents);\n    event TokenAdded(address indexed tokenAddress);\n    event TokenRemoved(address indexed tokenAddress);\n\n    // -------- View getters (derived from public state) --------\n\n    /// @notice Returns the ALFA Key contract used by the forge.\n    function key() external view returns (IALFAKey);\n\n    /// @notice Returns the vault contract used for schedule checks and to receive refunds on failures.\n    function vault() external view returns (IALFAVault);\n\n    /// @notice Returns the current team payout account.\n    function teamAccount() external view returns (address);\n\n    /// @notice Returns the current burn payout account.\n    function burnAccount() external view returns (address);\n\n    /// @notice Returns the configured burn share percentage (scaled by PERCENT_PRECISION).\n    function burnShare() external view returns (uint256);\n\n    /// @notice Checks whether a payment token is currently allowed for upgrades.\n    /// @param tokenAddress Address of the payment token (use address(0) for BNB).\n    function getTokenAvailable(address tokenAddress) external view returns (bool);\n\n    // -------- Read methods --------\n\n    /// @notice Returns a matrix of upgrade prices for each key type and each accepted payment token.\n    /// @dev Rows correspond to target upgrade typeId (1..N-1); columns to accepted payment tokens.\n    /// @return upgradePrice A 2D array [typeIdIndex][tokenIndex] with token address, typeId and amount.\n    function getPrices() external view returns (UpgradePrice[][] memory upgradePrice);\n\n    // -------- Write methods --------\n\n    /// @notice Upgrades a key by paying with an ERC20 token.\n    /// @param tokenId ID of the key to upgrade (must be owned by caller).\n    /// @param tokenAddress ERC20 token used for payment (must be in the allowlist).\n    /// @return newItemId ID of the newly minted key if upgrade hits a non-zero type; otherwise 0.\n    function upgrade(uint256[] memory tokenId, address tokenAddress) external returns (uint256 newItemId);\n\n    /// @notice Upgrades a key by paying with native BNB.\n    /// @param tokenId ID of the key to upgrade (must be owned by caller).\n    /// @return newItemId ID of the newly minted key if upgrade hits a non-zero type; otherwise 0.\n    function upgrade(uint256[] memory tokenId) external payable returns (uint256 newItemId);\n\n    /// @notice Sets USDT-denominated upgrade prices per key type.\n    /// @param prices Array of prices in USDT (raw units), indexed by typeId.\n    function setPrices(uint256[] calldata prices) external;\n\n    /// @notice Sets the burn share percentage (scaled by PERCENT_PRECISION).\n    /// @param sharePercents New burn share in PERCENT_PRECISION units.\n    function setBurnShare(uint256 sharePercents) external;\n\n    /// @notice Updates the burn payout account.\n    /// @param accountAddress Address to receive the burn part of the revenue.\n    function setBurnAccount(address accountAddress) external;\n\n    /// @notice Updates the team payout account.\n    /// @param accountAddress Address to receive the team part of the revenue.\n    function setTeamAccount(address accountAddress) external;\n\n    /// @notice Sets a discount percentage for a specific payment token.\n    /// @param tokenAddress Payment token to discount (use address(0) for native BNB).\n    /// @param discountPercents Discount in PERCENT_PRECISION units.\n    function setTokenDiscount(address tokenAddress, uint256 discountPercents) external;\n\n    /// @notice Adds a payment token to the allowlist.\n    /// @param tokenAddress Address of the token to add (use address(0) for native BNB).\n    /// @return newIndex Index of the token inside the allowlist.\n    function addToken(address tokenAddress) external returns (uint256 newIndex);\n\n    /// @notice Removes a payment token from the allowlist.\n    /// @param tokenAddress Address of the token to remove (use address(0) for native BNB).\n    function removeToken(address tokenAddress) external;\n}\n"
      },
      "project/contracts/mocks/MockERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @title MockERC20\n/// @notice Simple mintable/burnable ERC20 for testing with configurable decimals.\ncontract MockERC20 {\n    string public name;\n    string public symbol;\n    uint8  public decimals;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    uint256 public totalSupply;\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /// @notice Initializes the token after code injection (constructor-less).\n    /// @dev Can only be called once; sets name, symbol, decimals.\n    /// @param _name Token name\n    /// @param _symbol Token symbol\n    /// @param _decimals Token decimals\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals) public {\n        require(bytes(name).length == 0 && bytes(symbol).length == 0, \"Already initialized\");\n        name = _name;\n        symbol = _symbol;\n        assembly { sstore(decimals.slot, _decimals) }\n    }\n\n    function approve(address spender, uint256 amount) external returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) external returns (bool) {\n        _transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\n        uint256 allowed = allowance[from][msg.sender];\n        require(allowed >= amount, \"ALLOWANCE\");\n        if (allowed != type(uint256).max) {\n            allowance[from][msg.sender] = allowed - amount;\n        }\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function mint(address to, uint256 amount) external {\n        totalSupply += amount;\n        balanceOf[to] += amount;\n        emit Transfer(address(0), to, amount);\n    }\n\n    function burn(address from, uint256 amount) external {\n        require(balanceOf[from] >= amount, \"BAL_LOW\");\n        balanceOf[from] -= amount;\n        totalSupply -= amount;\n        emit Transfer(from, address(0), amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) internal {\n        require(balanceOf[from] >= amount, \"BAL_LOW\");\n        balanceOf[from] -= amount;\n        balanceOf[to] += amount;\n        emit Transfer(from, to, amount);\n    }\n}"
      },
      "project/contracts/mocks/MockPancakeRouter.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"../store/interfaces/IPancakeRouter.sol\";\n\n/// @title MockPancakeRouter\n/// @notice Simple router mock that returns preconfigured rates for pairs along a given path.\n/// @dev Store rational rates as (numerator, denominator) per directed edge tokenIn->tokenOut:\n///      amountOut = amountIn * num / den. For symmetric pricing set both directions.\ncontract MockPancakeRouter is IPancakeRouter {\n    struct Rate {\n        uint256 num; // numerator\n        uint256 den; // denominator\n    }\n\n    // tokenIn => tokenOut => rate\n    mapping(address => mapping(address => Rate)) public rate;\n\n    event RateSet(address indexed tokenIn, address indexed tokenOut, uint256 num, uint256 den);\n\n    /// @notice Set rate for a directed pair tokenIn->tokenOut\n    /// @param tokenIn  Input token\n    /// @param tokenOut Output token\n    /// @param num      Numerator in the fraction\n    /// @param den      Denominator in the fraction (must be > 0)\n    function setRate(address tokenIn, address tokenOut, uint256 num, uint256 den) public {\n        require(den != 0, \"DEN=0\");\n        rate[tokenIn][tokenOut] = Rate({num: num, den: den});\n        emit RateSet(tokenIn, tokenOut, num, den);\n    }\n\n    /// @notice Batch set for convenience\n    function setRates(address[] calldata ins, address[] calldata outs, uint256[] calldata nums, uint256[] calldata dens) external {\n        require(ins.length == outs.length && ins.length == nums.length && nums.length == dens.length, \"LEN\");\n        for (uint256 i; i < ins.length; i++) {\n            setRate(ins[i], outs[i], nums[i], dens[i]);\n        }\n    }\n\n    /// @inheritdoc IPancakeRouter\n    function getAmountsOut(uint amountIn, address[] calldata path)\n    external\n    view\n    override\n    returns (uint[] memory amounts)\n    {\n        require(path.length >= 2, \"PATH\");\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n\n        for (uint256 i = 0; i < path.length - 1; i++) {\n            Rate memory r = rate[path[i]][path[i + 1]];\n            require(r.den != 0, \"NO_RATE\");\n            // amountOut = amountIn * num / den\n            amounts[i + 1] = amounts[i] * r.num / r.den;\n        }\n    }\n}"
      },
      "project/contracts/mocks/MockUSDT.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"./MockERC20.sol\";\n\n/// @title MockUSDT\n/// @notice Test USDT token; choose decimals in constructor (6 or 18 typically).\ncontract MockUSDT is MockERC20 {\n    /// @notice Initializes the mock USDT token after code injection (constructor-less).\n    /// @dev Can only be called once; sets decimals to match USDT variants.\n    /// @param usdtDecimals Number of decimals (6 or 18 typically).\n    function initialize(uint8 usdtDecimals) public {\n        require(decimals == 0, \"Already initialized\");\n        assembly { sstore(decimals.slot, usdtDecimals) }\n    }\n}"
      },
      "project/contracts/mocks/MockWBNB.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"./MockERC20.sol\";\n\n/// @title MockWBNB\n/// @notice Minimal WBNB wrapper with deposit/withdraw for tests.\ncontract MockWBNB is MockERC20 {\n\n    /// @notice Initializes Wrapped BNB mock metadata after code injection (constructor-less).\n    /// @dev Calls parent initializer once to set name/symbol/decimals.\n    function initialize() external {\n        // Call the parent external initializer via an external call to this contract\n        MockERC20(address(this)).initialize(\"Wrapped BNB (Mock)\", \"WBNB\", 18);\n    }\n\n    /// @notice Wrap native BNB to WBNB 1:1\n    receive() external payable {\n        _mint(msg.sender, msg.value);\n    }\n\n    function deposit() external payable {\n        _mint(msg.sender, msg.value);\n    }\n\n    /// @notice Unwrap WBNB back to native BNB\n    function withdraw(uint256 wad) external {\n        require(balanceOf[msg.sender] >= wad, \"BAL_LOW\");\n        _burn(msg.sender, wad);\n        (bool ok,) = msg.sender.call{value: wad}(\"\");\n        require(ok, \"SEND_FAIL\");\n    }\n\n    // internal mint/burn using inherited storage\n    function _mint(address to, uint256 amount) internal {\n        totalSupply += amount;\n        balanceOf[to] += amount;\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal {\n        balanceOf[from] -= amount;\n        totalSupply -= amount;\n        emit Transfer(from, address(0), amount);\n    }\n}"
      },
      "project/contracts/NFT/Key/ALFAKey.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {ERC721, IERC721, IERC165, IERC721Metadata} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport {AccessControl, IAccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {IALFAKey, TokenType, HolderToken} from \"./IALFAKey.sol\";\n\n/// @title ALFA Key NFT\n/// @notice Typed NFT\ncontract ALFAKey is ERC721, AccessControl, IALFAKey {\n\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    bytes32 public constant EDITOR_ROLE = keccak256(\"EDITOR_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n    \n    uint256 internal _typesIndex = 1;\n    uint256 internal _tokenIndex = 1;\n\n    EnumerableSet.UintSet internal _types;\n    mapping(uint256 typeId => string typeName) internal _typeName;\n    mapping(uint256 typeId => string typeURI) internal _typeURI;\n    mapping(uint256 typeId => uint256 count) internal _typeCount;\n\n    mapping(uint256 tokenId => uint256 typeId) internal _tokenType;\n    mapping(address holder => EnumerableSet.UintSet tokens) internal _holderTokens;\n    mapping(address holder => mapping (uint256 typeId => uint256 amount)) internal _holderAmounts;\n\n    /// @notice Initializes the ALFAKey contract with predefined token types and assigns roles to the deployer\n    /// @dev Grants DEFAULT_ADMIN_ROLE and EDITOR_ROLE to the deployer and adds initial token types\n    constructor() ERC721(\"ALFA Key\", \"ALKEY\") {\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _grantRole(MINTER_ROLE, _msgSender());\n        _grantRole(BURNER_ROLE, _msgSender());\n        _grantRole(EDITOR_ROLE, _msgSender());\n\n        _addType(\"Green Gorilla\", \"https://api.alfagame.xyz/static/keys/green.mp4\");\n        _addType(\"Blue Cobra\", \"https://api.alfagame.xyz/static/keys/blue.mp4\");\n        _addType(\"Yellow Bear\", \"https://api.alfagame.xyz/static/keys/yellow.mp4\");\n        _addType(\"Red Tiger\", \"https://api.alfagame.xyz/static/keys/red.mp4\");\n        _addType(\"Violet Dragon\", \"https://api.alfagame.xyz/static/keys/violet.mp4\");\n    }\n\n\n    /// Read methods\n\n    /// @notice Returns the list of all token types with their metadata and counts\n    /// @return An array of TokenType structs representing all existing token types\n    function getTypes() public view returns (TokenType[] memory) {\n        uint256 length = _types.length();\n        TokenType[] memory list = new TokenType[](length);\n        for (uint256 i; i < length; i++) {\n            list[i].typeId = _types.at(i);\n            list[i].count = _typeCount[list[i].typeId];\n            list[i].typeName = _typeName[list[i].typeId];\n            list[i].typeURI = _typeURI[list[i].typeId];\n        }\n        return list;\n    }\n\n    /// @notice Returns a paginated list of tokens owned by a specific holder\n    /// @param holder The address of the token holder\n    /// @param offset The starting index from which to return tokens\n    /// @param limit The maximum number of tokens to return\n    /// @return An array of HolderToken structs representing the holder's tokens in the specified range\n    /// @return count The total count of tokens owned by the holder\n    function getTokens(address holder, uint256 offset, uint256 limit) public view returns (HolderToken[] memory, uint256 count) {\n        count = _holderTokens[holder].length();\n        if (offset >= count || limit == 0) return (new HolderToken[](0), count);\n        uint256 length = count - offset;\n        if (limit < length) length = limit;\n        HolderToken[] memory data = new HolderToken[](length);\n        for (uint256 i; i < length; i++) {\n            data[i].tokenId = _holderTokens[holder].at(offset + i);\n            data[i].typeId = _tokenType[data[i].tokenId];\n        }\n        return (data, count);\n    }\n\n    /// @notice Returns the URI of the token's image based on its type\n    /// @param tokenId The identifier of the token\n    /// @return The URI string of the token's image\n    function tokenURI(uint256 tokenId) public view override(ERC721, IERC721Metadata) returns (string memory) {\n        _requireOwned(tokenId);\n        return _typeURI[tokenTypeId(tokenId)];\n    }\n\n    /// @notice Returns detailed information about the token's type\n    /// @param tokenId The identifier of the token\n    /// @return data A TokenType struct containing metadata about the token's type\n    function tokenType(uint256 tokenId) public view returns (TokenType memory data) {\n        uint256 typeId = tokenTypeId(tokenId);\n\n        data.typeId = typeId;\n        data.count = _typeCount[typeId];\n        data.typeName = _typeName[typeId];\n        data.typeURI = _typeURI[typeId];\n    }\n\n    /// @notice Returns the type identifier of a specific token\n    /// @param tokenId The identifier of the token\n    /// @return The typeId associated with the token\n    function tokenTypeId(uint256 tokenId) public view returns (uint256) {\n        _requireOwned(tokenId);\n        return _tokenType[tokenId];\n    }\n\n    /// @notice Returns the total number of tokens of a specified type\n    /// @param typeId The identifier of the token type\n    /// @return The total count of tokens of the specified type\n    function getTypeAmount(uint256 typeId) public view returns (uint256) {\n        return _typeCount[typeId];\n    }\n\n    /// @notice Returns the number of tokens of a specified type owned by a given holder\n    /// @param holder The address of the token holder\n    /// @param typeId The identifier of the token type\n    /// @return The count of tokens of the specified type owned by the holder\n    function getTypeHolderAmount(address holder, uint256 typeId) public view returns (uint256) {\n        return _holderAmounts[holder][typeId];\n    }\n\n    /// @notice Returns an array of token counts owned by a holder, separated by each token type\n    /// @param holder The address of the token holder\n    /// @return An array of uint256 representing the count of tokens per type owned by the holder\n    function getHolderAmounts(address holder) public view returns (uint256[] memory) {\n        uint256[] memory amounts = new uint256[](_types.length());\n        for (uint256 i; i < _types.length(); i++) {\n            amounts[i] = _holderAmounts[holder][_types.at(i)];\n        }\n        return amounts;\n    }\n\n\n    /// External methods\n\n    /// @notice Mints a new token of a specified type to a receiver address\n    /// @dev Caller must have MINTER_ROLE\n    /// @param receiver The address to receive the minted token\n    /// @param typeId The type identifier of the token to mint\n    /// @return newTokenId The identifier of the newly minted token\n    function mint(address receiver, uint256 typeId) external onlyRole(MINTER_ROLE) returns (uint256 newTokenId) {\n        _requireTypeExists(typeId);\n        newTokenId = _tokenIndex++;\n\n        _tokenType[newTokenId] = typeId;\n        _mint(receiver, newTokenId);\n        emit TokenMinted(typeId, receiver, newTokenId, _typeCount[typeId]);\n    }\n\n    /// @notice Burns a token owned by a holder\n    /// @dev Caller must have BURNER_ROLE; the holder must be the actual owner of the token\n    /// @param holder The address of the token holder\n    /// @param tokenId The identifier of the token to burn\n    function burn(address holder, uint256 tokenId) external onlyRole(BURNER_ROLE) {\n        address realOwner = _requireOwned(tokenId);\n        if (holder != realOwner) {\n            revert ERC721IncorrectOwner(holder, tokenId, realOwner);\n        }\n        uint256 typeId = _tokenType[tokenId];\n\n        _burn(tokenId);\n        emit TokenBurned(typeId, holder, tokenId, _typeCount[typeId]);\n    }\n\n    /// @notice Checks if the contract supports a given interface\n    /// @param interfaceId The interface identifier to check\n    /// @return True if the interface is supported, false otherwise\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721, AccessControl) returns (bool) {\n        return\n            ERC721.supportsInterface(interfaceId)\n            || AccessControl.supportsInterface(interfaceId);\n    }\n\n\n    /// Admin methods\n\n    /// @notice Adds a new token type with a name and URI\n    /// @dev Caller must have EDITOR_ROLE\n    /// @param typeName The name of the new token type\n    /// @param typeURI The URI associated with the new token type\n    /// @return newTypeId The identifier of the newly added token type\n    function addType(string calldata typeName, string calldata typeURI) public onlyRole(EDITOR_ROLE) returns (uint256 newTypeId) {\n        return _addType(typeName, typeURI);\n    }\n\n    /// @notice Removes an existing token type if it has no tokens in use\n    /// @dev Caller must have EDITOR_ROLE; type count must be zero\n    /// @param typeId The identifier of the token type to remove\n    function removeType(uint256 typeId) public onlyRole(EDITOR_ROLE) {\n        _requireTypeExists(typeId);\n        require(_typeCount[typeId] == 0, \"Type already in use\");\n        _types.remove(typeId);\n\n        emit TypeRemoved(typeId);\n    }\n\n    /// @notice Updates the name and URI of an existing token type\n    /// @dev Caller must have EDITOR_ROLE\n    /// @param typeId The identifier of the token type to update\n    /// @param typeName The new name for the token type\n    /// @param typeURI The new URI for the token type\n    function updateType(uint256 typeId, string calldata typeName, string calldata typeURI) public onlyRole(EDITOR_ROLE) {\n        _requireTypeExists(typeId);\n        _typeName[typeId] = typeName;\n        _typeURI[typeId] = typeURI;\n\n        emit TypeUpdated(typeId, typeName, typeURI);\n    }\n\n\n    /// Internal methods\n\n    function _addType(string memory typeName, string memory typeURI) internal returns (uint256 newTypeId) {\n        newTypeId = _typesIndex++;\n        _types.add(newTypeId);\n        _typeName[newTypeId] = typeName;\n        _typeURI[newTypeId] = typeURI;\n\n        emit TypeAdded(newTypeId, typeName, typeURI);\n    }\n\n    function _requireTypeExists(uint256 typeId) internal view {\n        require(_types.contains(typeId), \"Type is not exists\");\n    }\n\n    function _update(address to, uint256 tokenId, address auth) internal override returns (address) {\n        address from = _ownerOf(tokenId);\n        uint256 typeId = _tokenType[tokenId];\n\n        if (from == address(0)) {\n            _typeCount[typeId]++;\n        } else {\n            _holderAmounts[from][typeId]--;\n            _holderTokens[from].remove(tokenId);\n        }\n\n        super._update(to, tokenId, auth);\n\n        if (to == address(0)) {\n            _typeCount[typeId]--;\n        } else {\n            _holderAmounts[to][typeId]++;\n            _holderTokens[to].add(tokenId);\n        }\n\n        return from;\n    }\n\n}"
      },
      "project/contracts/NFT/Key/IALFAKey.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC721Metadata} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\nstruct TokenType {\n    uint256 typeId;\n    uint256 count;\n    string typeName;\n    string typeURI;\n}\n\nstruct HolderToken {\n    uint256 tokenId;\n    uint256 typeId;\n}\n\ninterface IALFAKey is IERC721, IERC721Metadata {\n\n    event TypeAdded(uint256 indexed typeId, string typeName, string typeURI);\n    event TypeRemoved(uint256 indexed typeId);\n    event TypeUpdated(uint256 indexed typeId, string typeName, string typeURI);\n\n    event TokenMinted(uint256 indexed typeId, address indexed holder, uint256 tokenId, uint256 totalCount);\n    event TokenBurned(uint256 indexed typeId, address indexed holder, uint256 tokenId, uint256 totalCount);\n\n    function getTypes() external view returns (TokenType[] memory);\n    function getTokens(address holder, uint256 offset, uint256 limit) external view returns (HolderToken[] memory, uint256 count);\n\n    function getTypeAmount(uint256 typeId) external view returns (uint256);\n    function getTypeHolderAmount(address holder, uint256 typeId) external view returns (uint256);\n    function getHolderAmounts(address holder) external view returns (uint256[] memory);\n\n    function tokenType(uint256 tokenId) external view returns (TokenType memory data);\n    function tokenTypeId(uint256 tokenId) external view returns (uint256);\n\n    function mint(address receiver, uint256 typeId) external returns (uint256 newTokenId);\n    function burn(address holder, uint256 tokenId) external;\n\n    function addType(string calldata typeName, string calldata typeURI) external returns (uint256 newTypeId);\n    function removeType(uint256 typeId) external;\n    function updateType(uint256 typeId, string calldata typeName, string calldata typeURI) external;\n\n}"
      },
      "project/contracts/NFT/Lootbox/ALFALootbox.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {ERC721, IERC721, IERC165, IERC721Metadata} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport {AccessControl, IAccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {IALFALootbox, TokenType, HolderToken, DropChance} from \"./IALFALootbox.sol\";\nimport {PERCENT_PRECISION} from \"../../const.sol\";\n\n/// @title ALFA Lootbox NFT\n/// @notice Typed NFT\ncontract ALFALootbox is ERC721, AccessControl, IALFALootbox {\n\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    bytes32 public constant EDITOR_ROLE = keccak256(\"EDITOR_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n    \n    uint256 internal _typesIndex = 1;\n    uint256 internal _tokenIndex = 1;\n\n    EnumerableSet.UintSet internal _types;\n    mapping(uint256 typeId => string typeName) internal _typeName;\n    mapping(uint256 typeId => string typeURI) internal _typeURI;\n    mapping(uint256 typeId => DropChance[] drop) internal _typeDrop;\n    mapping(uint256 typeId => uint256 count) internal _typeCount;\n\n    mapping(uint256 tokenId => uint256 typeId) internal _tokenType;\n    mapping(address holder => EnumerableSet.UintSet tokens) internal _holderTokens;\n    mapping(address holder => mapping (uint256 typeId => uint256 amount)) internal _holderAmounts;\n\n    uint256 private _randomCounter;\n\n    /// @notice Initializes the ALFA Lootbox contract with predefined types and drop chances\n    /// @param keysAddress Address of the keys token contract used for drops\n    constructor(address keysAddress) ERC721(\"ALFA Lootbox\", \"ALBOX\") {\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _grantRole(MINTER_ROLE, _msgSender());\n        _grantRole(BURNER_ROLE, _msgSender());\n        _grantRole(EDITOR_ROLE, _msgSender());\n\n        _addType(\"Common\", \"https://api.alfagame.xyz/static/boxes/green.mp4\");\n        _addDrop(1, DropChance(keysAddress, 1, 970000));\n        _addDrop(1, DropChance(keysAddress, 2,  24000));\n        _addDrop(1, DropChance(keysAddress, 3,   5100));\n        _addDrop(1, DropChance(keysAddress, 4,    800));\n        _addDrop(1, DropChance(keysAddress, 5,    100));\n\n        _addType(\"Rare\", \"https://api.alfagame.xyz/static/boxes/blue.mp4\");\n        _addDrop(2, DropChance(keysAddress, 1, 230000));\n        _addDrop(2, DropChance(keysAddress, 2, 740000));\n        _addDrop(2, DropChance(keysAddress, 3,  25500));\n        _addDrop(2, DropChance(keysAddress, 4,   4000));\n        _addDrop(2, DropChance(keysAddress, 5,    500));\n\n        _addType(\"Epic\", \"https://api.alfagame.xyz/static/boxes/yellow.mp4\");\n        _addDrop(3, DropChance(keysAddress, 1,  10000));\n        _addDrop(3, DropChance(keysAddress, 2, 250000));\n        _addDrop(3, DropChance(keysAddress, 3, 716500));\n        _addDrop(3, DropChance(keysAddress, 4,  20000));\n        _addDrop(3, DropChance(keysAddress, 5,   3500));\n\n        _addType(\"Legendary\", \"https://api.alfagame.xyz/static/boxes/red.mp4\");\n        _addDrop(4, DropChance(keysAddress, 1,   1000));\n        _addDrop(4, DropChance(keysAddress, 2,  10000));\n        _addDrop(4, DropChance(keysAddress, 3, 270000));\n        _addDrop(4, DropChance(keysAddress, 4, 699000));\n        _addDrop(4, DropChance(keysAddress, 5,  20000));\n\n        _addType(\"Mystic\", \"https://api.alfagame.xyz/static/boxes/purple.mp4\");\n        _addDrop(5, DropChance(keysAddress, 1,      0));\n        _addDrop(5, DropChance(keysAddress, 2,      0));\n        _addDrop(5, DropChance(keysAddress, 3,      0));\n        _addDrop(5, DropChance(keysAddress, 4,  50000));\n        _addDrop(5, DropChance(keysAddress, 5, 950000));\n    }\n\n\n    /// Read methods\n\n    /// @notice Returns the list of all token types with their metadata and drop chances\n    /// @return Array of TokenType structs representing all available types\n    function getTypes() public view returns (TokenType[] memory) {\n        uint256 length = _types.length();\n        TokenType[] memory list = new TokenType[](length);\n        for (uint256 i; i < length; i++) {\n            list[i].typeId = _types.at(i);\n            list[i].count = _typeCount[list[i].typeId];\n            list[i].typeName = _typeName[list[i].typeId];\n            list[i].typeURI = _typeURI[list[i].typeId];\n            list[i].drop = _typeDrop[list[i].typeId];\n        }\n        return list;\n    }\n\n    /// @notice Returns a paginated list of tokens owned by a holder\n    /// @param holder Address of the token holder\n    /// @param offset Index offset to start from\n    /// @param limit Maximum number of tokens to return\n    /// @return Array of HolderToken structs representing the tokens\n    /// @return count Total number of tokens owned by the holder\n    function getTokens(address holder, uint256 offset, uint256 limit) public view returns (HolderToken[] memory, uint256 count) {\n        count = _holderTokens[holder].length();\n        if (offset >= count || limit == 0) return (new HolderToken[](0), count);\n        uint256 length = count - offset;\n        if (limit < length) length = limit;\n        HolderToken[] memory data = new HolderToken[](length);\n        for (uint256 i; i < length; i++) {\n            data[i].tokenId = _holderTokens[holder].at(offset + i);\n            data[i].typeId = _tokenType[data[i].tokenId];\n        }\n        return (data, count);\n    }\n\n    /// @notice Returns the metadata URI of a given token\n    /// @param tokenId Identifier of the token\n    /// @return URI string of the token's metadata\n    function tokenURI(uint256 tokenId) public view override(ERC721, IERC721Metadata) returns (string memory) {\n        _requireOwned(tokenId);\n        return _typeURI[tokenTypeId(tokenId)];\n    }\n\n    /// @notice Returns the TokenType struct for a given token\n    /// @param tokenId Identifier of the token\n    /// @return data TokenType struct containing type metadata and drop chances\n    function tokenType(uint256 tokenId) public view returns (TokenType memory data) {\n        uint256 typeId = tokenTypeId(tokenId);\n\n        data.typeId = typeId;\n        data.count = _typeCount[typeId];\n        data.typeName = _typeName[typeId];\n        data.typeURI = _typeURI[typeId];\n    }\n\n    /// @notice Returns the type identifier of a given token\n    /// @param tokenId Identifier of the token\n    /// @return Type identifier of the token\n    function tokenTypeId(uint256 tokenId) public view returns (uint256) {\n        _requireOwned(tokenId);\n        return _tokenType[tokenId];\n    }\n\n    /// @notice Returns the total number of tokens of a specific type\n    /// @param typeId Identifier of the token type\n    /// @return Number of tokens of the specified type\n    function getTypeAmount(uint256 typeId) public view returns (uint256) {\n        return _typeCount[typeId];\n    }\n\n    /// @notice Returns the number of tokens of a specific type owned by a holder\n    /// @param holder Address of the token holder\n    /// @param typeId Identifier of the token type\n    /// @return Number of tokens of the specified type owned by the holder\n    function getTypeHolderAmount(address holder, uint256 typeId) public view returns (uint256) {\n        return _holderAmounts[holder][typeId];\n    }\n\n    /// @notice Returns an array of token counts owned by a holder, separated by token type\n    /// @param holder Address of the token holder\n    /// @return Array of token counts indexed by token type\n    function getHolderAmounts(address holder) public view returns (uint256[] memory) {\n        uint256[] memory amounts = new uint256[](_types.length());\n        for (uint256 i; i < _types.length(); i++) {\n            amounts[i] = _holderAmounts[holder][_types.at(i)];\n        }\n        return amounts;\n    }\n\n\n    /// Write methods\n\n    /// @notice Opens a lootbox token, rolling for a drop and burning the lootbox\n    /// @param tokenId Identifier of the lootbox token to open\n    function open(uint256 tokenId) public {\n        address user = _requireOwned(tokenId);\n        if (user != _msgSender()) {\n            revert ERC721InvalidOwner(user);\n        }\n        _open(tokenId);\n    }\n\n\n    /// External methods\n\n    /// @notice Mints a new lootbox token of a specific type to a receiver\n    /// @dev Only callable by accounts with MINTER_ROLE\n    /// @param receiver Address to receive the minted token\n    /// @param typeId Identifier of the token type to mint\n    /// @return newTokenId Identifier of the newly minted token\n    function mint(address receiver, uint256 typeId) external onlyRole(MINTER_ROLE) returns (uint256 newTokenId) {\n        _requireTypeExists(typeId);\n        newTokenId = _tokenIndex++;\n\n        _tokenType[newTokenId] = typeId;\n        _mint(receiver, newTokenId);\n        emit TokenMinted(typeId, receiver, newTokenId, _typeCount[typeId]);\n    }\n\n    /// @notice Burns a token owned by a holder\n    /// @dev Only callable by accounts with BURNER_ROLE\n    /// @param holder Address of the token holder\n    /// @param tokenId Identifier of the token to burn\n    function burn(address holder, uint256 tokenId) external onlyRole(BURNER_ROLE) {\n        address realOwner = _requireOwned(tokenId);\n        if (holder != realOwner) {\n            revert ERC721IncorrectOwner(holder, tokenId, realOwner);\n        }\n\n        _burnToken(tokenId);\n    }\n\n    /// @notice Opens a lootbox token on behalf of a holder, rolling for a drop and burning the lootbox\n    /// @dev Only callable by accounts with BURNER_ROLE\n    /// @param holder Address of the token holder\n    /// @param tokenId Identifier of the lootbox token to open\n    function openFor(address holder, uint256 tokenId) external onlyRole(BURNER_ROLE) {\n        address user = _requireOwned(tokenId);\n        if (user != holder) {\n            revert ERC721InvalidOwner(user);\n        }\n        _open(tokenId);\n    }\n\n    /// @notice Checks if the contract supports a given interface\n    /// @param interfaceId Interface identifier (ERC-165)\n    /// @return True if the interface is supported, false otherwise\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721, AccessControl) returns (bool) {\n        return\n            ERC721.supportsInterface(interfaceId)\n            || AccessControl.supportsInterface(interfaceId);\n    }\n\n\n    /// Admin methods\n\n    /// @notice Adds a new token type with a name and URI\n    /// @dev Only callable by accounts with EDITOR_ROLE\n    /// @param typeName Name of the new token type\n    /// @param typeURI Metadata URI of the new token type\n    /// @return newTypeId Identifier of the newly added token type\n    function addType(string calldata typeName, string calldata typeURI) public onlyRole(EDITOR_ROLE) returns (uint256 newTypeId) {\n        return _addType(typeName, typeURI);\n    }\n\n    /// @notice Removes a token type if it is not currently in use\n    /// @dev Only callable by accounts with EDITOR_ROLE\n    /// @param typeId Identifier of the token type to remove\n    function removeType(uint256 typeId) public onlyRole(EDITOR_ROLE) {\n        _requireTypeExists(typeId);\n        require(_typeCount[typeId] == 0, \"Type already in use\");\n        _clearDrop(typeId);\n        _types.remove(typeId);\n\n        emit TypeRemoved(typeId);\n    }\n\n    /// @notice Clears all drop chances associated with a token type\n    /// @dev Only callable by accounts with EDITOR_ROLE\n    /// @param typeId Identifier of the token type\n    function clearDrop(uint256 typeId) public onlyRole(EDITOR_ROLE) {\n        _clearDrop(typeId);\n    }\n\n    /// @notice Updates the name and URI of an existing token type\n    /// @dev Only callable by accounts with EDITOR_ROLE\n    /// @param typeId Identifier of the token type to update\n    /// @param typeName New name for the token type\n    /// @param typeURI New metadata URI for the token type\n    function updateType(uint256 typeId, string calldata typeName, string calldata typeURI) public onlyRole(EDITOR_ROLE) {\n        _requireTypeExists(typeId);\n        _typeName[typeId] = typeName;\n        _typeURI[typeId] = typeURI;\n\n        emit TypeUpdated(typeId, typeName, typeURI);\n    }\n\n\n    /// Internal methods\n\n    function _addType(string memory typeName, string memory typeURI) internal returns (uint256 newTypeId) {\n        newTypeId = _typesIndex++;\n        _types.add(newTypeId);\n        _typeName[newTypeId] = typeName;\n        _typeURI[newTypeId] = typeURI;\n\n        emit TypeAdded(newTypeId, typeName, typeURI);\n    }\n\n    function _addDrop(uint256 typeId, DropChance memory drop) internal returns (uint256 newDropId) {\n        _typeDrop[typeId].push(drop);\n        newDropId = _typeDrop[typeId].length;\n        emit TypeDropAdded(typeId, newDropId, drop);\n        return newDropId;\n    }\n\n    function _clearDrop(uint256 typeId) internal {\n        _requireTypeExists(typeId);\n        delete _typeDrop[typeId];\n        emit TypeDropCleared(typeId);\n    }\n\n    function _requireTypeExists(uint256 typeId) internal view {\n        require(_types.contains(typeId), \"Type is not exists\");\n    }\n\n    function _pseudoRandom(uint256 mod) internal returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(block.prevrandao, block.timestamp, ++_randomCounter)))\n            % mod;\n    }\n\n    function _rollDrop(uint256 typeId) internal returns (uint256) {\n        uint rand = _pseudoRandom(PERCENT_PRECISION);\n        uint chance;\n        if (_typeDrop[typeId].length > 1) {\n            for (uint256 rarity = _typeDrop[typeId].length - 1; rarity > 0; rarity--) {\n                chance += _typeDrop[typeId][rarity].chance;\n                if (rand <= chance) {\n                    return rarity;\n                }\n            }\n        }\n        return 0;\n    }\n\n    function _open(uint256 tokenId) internal {\n        address holder = _requireOwned(tokenId);\n        uint256 typeId = _tokenType[tokenId];\n        uint256 rarity = _rollDrop(typeId);\n        DropChance storage drop = _typeDrop[typeId][rarity];\n        uint256 nftItemId = IALFALootbox(drop.tokenAddress).mint(holder, drop.typeId);\n        emit DropRolled(holder, typeId, tokenId, drop.tokenAddress, drop.typeId, nftItemId);\n        /// Burn lootbox\n        _burnToken(tokenId);\n    }\n\n    function _burnToken(uint256 tokenId) internal {\n        address holder = _requireOwned(tokenId);\n        uint256 typeId = _tokenType[tokenId];\n\n        _burn(tokenId);\n        emit TokenBurned(typeId, holder, tokenId, _typeCount[typeId]);\n    }\n\n    function _update(address to, uint256 tokenId, address auth) internal override returns (address) {\n        address from = _ownerOf(tokenId);\n        uint256 typeId = _tokenType[tokenId];\n\n        if (from == address(0)) {\n            _typeCount[typeId]++;\n        } else {\n            _holderAmounts[from][typeId]--;\n            _holderTokens[from].remove(tokenId);\n        }\n\n        super._update(to, tokenId, auth);\n\n        if (to == address(0)) {\n            _typeCount[typeId]--;\n        } else {\n            _holderAmounts[to][typeId]++;\n            _holderTokens[to].add(tokenId);\n        }\n\n        return from;\n    }\n\n}"
      },
      "project/contracts/NFT/Lootbox/IALFALootbox.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC721Metadata} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\nstruct DropChance {\n    address tokenAddress;\n    uint256 typeId;\n    uint256 chance;\n}\n\nstruct TokenType {\n    uint256 typeId;\n    uint256 count;\n    string typeName;\n    string typeURI;\n    DropChance[] drop;\n}\n\nstruct HolderToken {\n    uint256 tokenId;\n    uint256 typeId;\n}\n\ninterface IALFALootbox is IERC721, IERC721Metadata {\n\n    event TypeAdded(uint256 indexed typeId, string typeName, string typeURI);\n    event TypeRemoved(uint256 indexed typeId);\n    event TypeUpdated(uint256 indexed typeId, string typeName, string typeURI);\n    event TypeDropAdded(uint256 indexed typeId, uint256 dropIndex, DropChance drop);\n    event TypeDropCleared(uint256 indexed typeId);\n\n    event TokenMinted(uint256 indexed typeId, address indexed holder, uint256 tokenId, uint256 totalCount);\n    event TokenBurned(uint256 indexed typeId, address indexed holder, uint256 tokenId, uint256 totalCount);\n    event DropRolled(address indexed holder, uint256 indexed typeId, uint256 indexed tokenId, address dropAddress, uint256 dropTypeId, uint256 dropId);\n\n    function getTypes() external view returns (TokenType[] memory);\n    function getTokens(address holder, uint256 offset, uint256 limit) external view returns (HolderToken[] memory, uint256 count);\n\n    function getTypeAmount(uint256 typeId) external view returns (uint256);\n    function getTypeHolderAmount(address holder, uint256 typeId) external view returns (uint256);\n    function getHolderAmounts(address holder) external view returns (uint256[] memory);\n\n    function tokenType(uint256 tokenId) external view returns (TokenType memory data);\n    function tokenTypeId(uint256 tokenId) external view returns (uint256);\n\n    function mint(address receiver, uint256 typeId) external returns (uint256 newTokenId);\n    function burn(address holder, uint256 tokenId) external;\n\n    function addType(string calldata typeName, string calldata typeURI) external returns (uint256 newTypeId);\n    function removeType(uint256 typeId) external;\n    function updateType(uint256 typeId, string calldata typeName, string calldata typeURI) external;\n\n}"
      },
      "project/contracts/referral/ALFAReferral.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {IALFAReferral, ReferralPercents} from \"./interfaces/IALFAReferral.sol\";\nimport {PERCENT_PRECISION} from \"../const.sol\";\n\n/// @title ALFA Referral\n/// @notice Maintains a parent-child referral tree and level-based referral percentages.\n/// @dev Provides read helpers, pagination over children, and admin/connector operations to manage relations and percents.\ncontract ALFAReferral is AccessControl, IALFAReferral {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    bytes32 public constant CONNECTOR_ROLE = keccak256(\"CONNECTOR_ROLE\");\n\n    mapping(address child => address parent) private _parents;\n    mapping(address parent => EnumerableSet.AddressSet children) private _children;\n\n    uint256[] private _percents = [80000, 40000, 20000, 10000, 10000];\n\n    /// @notice Contract constructor. Grants admin and connector roles to contract deployer.\n    /// @dev Grants DEFAULT_ADMIN_ROLE and CONNECTOR_ROLE to the deployer address.\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _grantRole(CONNECTOR_ROLE, _msgSender());\n    }\n\n    /// @notice Returns the configured referral percentages for each level.\n    /// @dev Values are scaled by PERCENT_PRECISION (e.g., 100% == PERCENT_PRECISION).\n    /// @return percents Array of percent values per referral level.\n    function getPercents() external view returns (uint256[] memory) {\n        return _percents;\n    }\n\n    /// @notice Returns the referral percent structure for a given child address.\n    /// @dev Traverses up the referral tree from the child, returning each parent and their percent.\n    /// @param childAddress The address of the child whose referral percents are being queried.\n    /// @return result An array of ReferralPercents structs containing parent addresses and percents.\n    function getReferralPercents(address childAddress) external view returns (ReferralPercents[] memory) {\n        ReferralPercents[] memory result = new ReferralPercents[](_percents.length);\n        address parent = _parents[childAddress];\n        for (uint256 i; i < _percents.length; i++) {\n            result[i].parentAddress = parent;\n            result[i].percents = _percents[i];\n            parent = _parents[parent];\n        }\n        return result;\n    }\n\n    /// @notice Returns the parent address for a given child.\n    /// @dev Returns address(0) if the child has no parent.\n    /// @param childAddress The address of the child whose parent is being queried.\n    /// @return The parent address of the specified child.\n    function getParent(address childAddress) public view returns (address) {\n        return _parents[childAddress];\n    }\n\n    /// @notice Returns the number of children for a given parent.\n    /// @dev Returns zero if the parent has no children.\n    /// @param parentAddress The address of the parent whose children count is being queried.\n    /// @return The number of children addresses linked to the parent.\n    function getChildrenCount(address parentAddress) public view returns (uint256) {\n        return _children[parentAddress].length();\n    }\n\n    /// @notice Returns a paginated list of children addresses for a given parent.\n    /// @dev Returns an empty array if offset is greater than or equal to the number of children.\n    /// @param parentAddress The address of the parent whose children are being queried.\n    /// @param offset The starting index in the children list.\n    /// @param limit The maximum number of children addresses to return.\n    /// @return An array of child addresses belonging to the parent.\n    function getChildren(address parentAddress, uint256 offset, uint256 limit) public view returns (address[] memory) {\n        uint256 count = getChildrenCount(parentAddress);\n        if (offset >= count) return new address[](0);\n        count -= offset;\n        uint256 length = count < limit\n            ? count\n            : limit;\n        address[] memory children = new address[](length);\n        for (uint256 i = offset; i < offset + limit; i++) {\n            children[i - offset] = _children[parentAddress].at(i);\n        }\n        return children;\n    }\n\n    /// @notice Adds a referral relation between a parent and a child address.\n    /// @dev Removes any existing parent relation for the child before adding the new one.\n    ///      Only callable by accounts with CONNECTOR_ROLE.\n    /// @param parentAddress The address to be set as the parent.\n    /// @param childAddress The address to be set as the child.\n    function addRelation(address parentAddress, address childAddress) public onlyRole(CONNECTOR_ROLE) {\n        _addRelation(parentAddress, childAddress);\n    }\n\n    /// @notice Establishes a referral chain for the caller by linking consecutive addresses.\n    /// @dev `sequence[0]` is the child (typically msg.sender), each subsequent address is its parent in order.\n    ///      The function links addresses until it hits an existing parent or the sequence ends.\n    ///      Reverts if the sequence is empty or exceeds the number of configured levels.\n    /// @param sequence Array of addresses: [child, parent1, parent2, ...].\n    function setSequence(address[] calldata sequence) public onlyRole(CONNECTOR_ROLE) {\n        require(sequence.length >= 1, \"Referral sequence is to short\");\n        require(sequence.length <= _percents.length + 1, \"Referral sequence is too long\");\n        uint256 i;\n        address parent = getParent(sequence[i]);\n        while (i < sequence.length - 1\n            && parent == address(0)\n            && sequence[i + 1] != sequence[i]\n        ) {\n            _addRelation(sequence[i + 1], sequence[i]);\n            parent = getParent(sequence[++i]);\n        }\n    }\n\n    /// @notice Sets the referral percents for each referral level.\n    /// @dev Only callable by accounts with DEFAULT_ADMIN_ROLE.\n    ///      Percents should use PERCENT_PRECISION for scaling.\n    /// @param percents An array of percent values for each referral level.\n    function setPercents(uint256[] calldata percents) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _percents = percents;\n        emit PercentsSet(percents);\n    }\n\n    /// @notice (Internal) Creates a parent-child relation, replacing any existing parent for the child.\n    /// @dev Emits RelationAdded. Also removes the prior relation if present.\n    /// @param parentAddress Address to set as the parent.\n    /// @param childAddress Address to set as the child.\n    function _addRelation(address parentAddress, address childAddress) internal {\n        _removeRelation(childAddress);\n        _parents[childAddress] = parentAddress;\n        _children[parentAddress].add(childAddress);\n        emit RelationAdded(parentAddress, childAddress);\n    }\n\n    /// @notice (Internal) Removes the existing parent-child relation for the given child, if any.\n    /// @dev Emits RelationRemoved when a relation existed and was removed.\n    /// @param childAddress Child address whose relation should be removed.\n    function _removeRelation(address childAddress) internal {\n        address parentAddress = _parents[childAddress];\n        if (parentAddress != address(0)) {\n            delete _parents[childAddress];\n            _children[parentAddress].remove(childAddress);\n            emit RelationRemoved(parentAddress, childAddress);\n        }\n    }\n\n}"
      },
      "project/contracts/referral/interfaces/IALFAReferral.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IALFAReferralPercents, ReferralPercents} from \"./IALFAReferralPercents.sol\";\n\ninterface IALFAReferral is IALFAReferralPercents {\n\n    event RelationAdded(address indexed parent, address indexed child);\n    event RelationRemoved(address indexed parent, address indexed child);\n    event PercentsSet(uint256[] percents);\n    \n    function addRelation(address parentAddress, address childAddress) external;\n    function setSequence(address[] calldata sequence) external;\n\n    function getPercents() external view returns (uint256[] memory);\n\n    function getParent(address childAddress) external view returns (address);\n    function getChildrenCount(address parentAddress) external view returns (uint256);\n    function getChildren(address parentAddress, uint256 offset, uint256 limit) external view returns (address[] memory);\n\n}"
      },
      "project/contracts/referral/interfaces/IALFAReferralPercents.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nstruct ReferralPercents {\n    address parentAddress;\n    uint256 percents;\n}\n\ninterface IALFAReferralPercents {\n\n    function getReferralPercents(address childAddress) external view returns (ReferralPercents[] memory);\n\n}"
      },
      "project/contracts/store/ALFAStore.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {AccessControl, IAccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {IALFAStore, LootBoxPrice, NotEnoughTokens, NotEnoughAllowance} from \"./interfaces/IALFAStore.sol\";\nimport {IALFAVault, TokenInfo} from \"../vault/interfaces/IALFAVault.sol\";\nimport {IALFALootbox, TokenType} from \"../NFT/Lootbox/IALFALootbox.sol\";\nimport {IALFAReferral, ReferralPercents} from \"../referral/interfaces/IALFAReferral.sol\";\nimport {IPancakeRouter} from \"./interfaces/IPancakeRouter.sol\";\nimport {PERCENT_PRECISION} from \"../const.sol\";\n\n/// @title ALFA Store\n/// @notice Sells ALFA Lootboxes for USDT-equivalent prices, accepts payments in ERC20 tokens or native BNB, and distributes revenue between referrals, the team, and the vault.\n/// @dev Prices are stored in USDT units (raw decimals as on BSC). Quotes for other tokens are obtained via PancakeSwap V2 router.\ncontract ALFAStore is AccessControl, IALFAStore {\n\n    IALFAVault public immutable vault;\n    IALFALootbox public immutable lootBox;\n    IALFAReferral private immutable _referral;\n\n    address private constant PANCAKE_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // V2 Router mainnet BSC\n    address private constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n    address private constant USDT = 0x55d398326f99059fF775485246999027B3197955; // Binance-Peg USDT\n\n    IPancakeRouter private constant router = IPancakeRouter(PANCAKE_ROUTER);\n\n    mapping (uint256 typeId => uint256 priceUSDT) private _prices;\n    uint256 public vaultShare = 800_000;\n    address public teamAccount;\n\n    /// @notice Initializes the store with vault, lootbox, referral contracts and initial prices.\n    /// @dev If `prices` is empty, a default tiered price table is set. The deployer receives DEFAULT_ADMIN_ROLE and becomes the initial team account.\n    /// @param vaultAddress Address of the ALFAVault contract to receive the vault share and hold assets.\n    /// @param lootBoxAddress Address of the ALFALootbox contract to mint lootboxes.\n    /// @param referralAddress Address of the ALFAReferral contract used for referral distribution.\n    /// @param prices Array of lootbox prices in USDT (raw token units), indexed by typeId.\n    constructor(\n        address vaultAddress,\n        address lootBoxAddress,\n        address referralAddress,\n        uint256[] memory prices\n        ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        teamAccount = _msgSender();\n\n        vault = IALFAVault(vaultAddress);\n        lootBox = IALFALootbox(lootBoxAddress);\n        _referral = IALFAReferral(referralAddress);\n\n        if (prices.length > 0) {\n            _setPrices(prices);\n        } else {\n            uint256[] memory initialPrices = new uint256[](6);\n            initialPrices[0] = 0;\n            initialPrices[1] = 1e18;\n            initialPrices[2] = 10 * 1e18;\n            initialPrices[3] = 100 * 1e18;\n            initialPrices[4] = 1_000 * 1e18;\n            initialPrices[5] = 10_000 * 1e18;\n            _setPrices(initialPrices);\n        }\n    }\n\n    /// @notice Accepts native BNB transfers. Tries to forward funds to the vault; if forwarding fails, funds remain here.\n    /// @dev Forwarding may fail if the vault has no payable receive/fallback. We intentionally do not revert to avoid breaking user transfers.\n    receive() external payable {\n        (bool sent,) = address(vault).call{value: msg.value}(\"\");\n        // If the vault has no payable receive/fallback, keep funds in the store to avoid reverting user transfers.\n        if (!sent) {\n            // no-op; funds remain in this contract\n        }\n    }\n\n\n    /// Read methods\n\n    /// @notice Returns a matrix of lootbox prices for all token types in all accepted tokens.\n    /// @dev Rows correspond to lootbox typeId, columns correspond to tokens returned by `vault.getVaultTokens()`.\n    ///      Each cell is the quoted amount of a token needed to pay the USDT-denominated price for that lootbox type.\n    /// @return lootBoxPrice A 2D array [typeId][tokenIndex] with token address, typeId and amount.\n    function getPrices() public view returns (LootBoxPrice[][] memory) {\n        TokenInfo[] memory tokens = vault.getVaultTokens();\n        LootBoxPrice[][] memory lootBoxPrice = new LootBoxPrice[][](lootBox.getTypes().length);\n\n        for (uint256 i; i < lootBoxPrice.length; i++) {\n            lootBoxPrice[i] = new LootBoxPrice[](tokens.length);\n\n            for (uint256 t; t < tokens.length; t++) {\n                lootBoxPrice[i][t].typeId = i + 1;\n                lootBoxPrice[i][t].tokenAddress = tokens[t].tokenAddress;\n                if (tokens[t].tokenAddress == address(0)) {\n                    lootBoxPrice[i][t].amount = _quoteBNBForUSDT(_prices[i + 1]);\n                } else {\n                    lootBoxPrice[i][t].amount = _quoteTokenForUSDT(tokens[t].tokenAddress, _prices[i + 1]);\n                }\n            }\n        }\n        return lootBoxPrice;\n    }\n\n\n    /// Write methods\n\n    /// @notice Buys lootboxes with an ERC20 token and optional referral parents chain.\n    /// @dev Uses PancakeSwap quotes from USDT to `tokenAddress`. Performs referral/ team/ vault distribution via `_distributePayment`.\n    /// @param typeId Lootbox type identifier.\n    /// @param tokenAddress Payment token address (must be allowed by the vault).\n    /// @param boxAmount Number of lootboxes to buy (must be > 0).\n    /// @param parents Referral chain (closest parent first). May be empty.\n    /// @return tokenId Array of minted lootbox token IDs.\n    function buy(uint256 typeId, address tokenAddress, uint256 boxAmount, address[] memory parents) public returns (uint256[] memory) {\n        _updateReferralSequence(parents);\n        return _buy(typeId, tokenAddress, boxAmount);\n    }\n\n    /// @notice Buys lootboxes with native BNB and optional referral parents chain.\n    /// @dev Quotes USDT price to BNB via PancakeSwap and distributes payment accordingly. Excess BNB is refunded to the buyer; if refund fails, it is forwarded to the vault.\n    /// @param typeId Lootbox type identifier.\n    /// @param boxAmount Number of lootboxes to buy (must be > 0).\n    /// @param parents Referral chain (closest parent first). May be empty.\n    /// @return tokenId Array of minted lootbox token IDs.\n    function buy(uint256 typeId, uint256 boxAmount, address[] memory parents) public payable returns (uint256[] memory) {\n        _updateReferralSequence(parents);\n        return _buy(typeId, address(0), boxAmount);\n    }\n\n\n    /// Admin methods\n\n\n    /// @notice Sets USDT-denominated prices per lootbox type.\n    /// @dev Only callable by DEFAULT_ADMIN_ROLE. Emits `PriceSet` for each typeId.\n    /// @param prices Array of prices in USDT (raw units), indexed by typeId.\n    function setPrices(uint256[] memory prices) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setPrices(prices);\n    }\n\n    /// @notice Sets the store's vault share percentage (scaled by PERCENT_PRECISION).\n    /// @dev Must be &lt;= 100% (PERCENT_PRECISION). The remainder after referrals and vault share is paid to the team.\n    /// @param sharePercents New vault share in PERCENT_PRECISION units.\n    function setVaultShare(uint256 sharePercents) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(sharePercents <= PERCENT_PRECISION, \"Share exceeds 100%\");\n        vaultShare = sharePercents;\n        emit VaultShareSet(sharePercents);\n    }\n\n    /// @notice Updates the team payout account.\n    /// @dev Only callable by DEFAULT_ADMIN_ROLE.\n    /// @param accountAddress Address to receive the team part of the revenue.\n    function setTeamAccount(address accountAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        teamAccount = accountAddress;\n        emit TeamAccountSet(accountAddress);\n    }\n\n\n    /// Internal methods\n\n    /// @notice Reverts if a non-native payment token is not allowed by the vault.\n    /// @dev Native payments use `address(0)`. ERC20 tokens must be enabled in the vault.\n    /// @param tokenAddress Address of the payment token (use address(0) for BNB).\n    function _requireTokenAvailable(address tokenAddress) internal view {\n        require(vault.getTokenAvailable(tokenAddress), \"Token is not allowed\");\n    }\n\n    /// @notice Internal helper to set USDT-denominated prices per typeId and emit events.\n    /// @param prices Array of prices in USDT (raw units), indexed by typeId.\n    function _setPrices(uint256[] memory prices) internal {\n        for (uint256 i = 1; i < prices.length; i++) {\n            _prices[i] = prices[i];\n            emit PriceSet(i, prices[i]);\n        }\n    }\n\n    /// @notice Quotes how many `tokenOut` are needed for the given USDT amount using PancakeSwap V2.\n    /// @dev Tries the direct USDT→tokenOut path; if it fails, falls back to USDT→WBNB→tokenOut.\n    /// @param tokenOut The output token address (use WBNB for native BNB).\n    /// @param usdtAmount Amount in USDT (raw units) to convert.\n    /// @return amountOut Quoted amount of `tokenOut` (raw units).\n    function _quoteTokenForUSDT(address tokenOut, uint256 usdtAmount) internal view returns (uint256 amountOut) {\n        if (tokenOut == USDT) {\n            // 1 USDT = 1 USDT\n            return usdtAmount;\n        }\n\n        // 1) Try direct USDT -> tokenOut path\n        {\n            address[] memory path = new address[](2);\n            path[0] = USDT;\n            path[1] = tokenOut;\n            try router.getAmountsOut(usdtAmount, path) returns (uint[] memory amounts) {\n                return amounts[1];\n            } catch { /* fallback below */ }\n        }\n\n        // 2) Fallback via WBNB: USDT -> WBNB -> tokenOut\n        {\n            address[] memory path = new address[](3);\n            path[0] = USDT;\n            path[1] = WBNB;\n            path[2] = tokenOut;\n            uint[] memory amounts = router.getAmountsOut(usdtAmount, path);\n            return amounts[2];\n        }\n    }\n\n    /// @notice Quotes how much BNB (via WBNB) is needed for the given USDT amount using PancakeSwap V2.\n    /// @param usdtAmount Amount in USDT (raw units) to convert.\n    /// @return wbnbOut Quoted amount of WBNB (raw units), numerically equal to BNB.\n    function _quoteBNBForUSDT(uint256 usdtAmount) internal view returns (uint256 wbnbOut) {\n        address[] memory path = new address[](2);\n        path[0] = USDT;\n        path[1] = WBNB;\n        uint[] memory amounts = router.getAmountsOut(usdtAmount, path);\n        return amounts[1];\n    }\n\n    /// @notice Updates the referral sequence for the caller if provided.\n    /// @dev Reverts if the sequence length exceeds the number of configured referral levels.\n    /// @param parents Referral chain where parents[0] is the direct referrer; may be empty.\n    function _updateReferralSequence(address[] memory parents) internal {\n        if (parents.length == 0) return;\n        require(parents.length <= _referral.getPercents().length, \"Referral sequence is too long\");\n        address[] memory sequence = new address[](parents.length + 1);\n        sequence[0] = _msgSender();\n        for (uint256 i; i < parents.length; i++) {\n            sequence[i + 1] = parents[i];\n        }\n        _referral.setSequence(sequence);\n    }\n\n    /// @notice Sends payment from buyer to a recipient in either native BNB or ERC20.\n    /// @dev For ERC20, requires prior allowance from `from` to this contract.\n    /// @param tokenAddress Payment token (address(0) for BNB).\n    /// @param from Payer address (usually buyer).\n    /// @param to Recipient address.\n    /// @param amount Amount to transfer (raw units).\n    function _send(address tokenAddress, address from, address to, uint256 amount) internal {\n        if (tokenAddress == address(0)) {\n            (bool sent,) = address(to).call{value: amount}(\"\");\n            require(sent, \"Failed to send BNB\");\n        } else {\n            require(IERC20(tokenAddress).transferFrom(from, to, amount), \"Can't send payment token\");\n        }\n    }\n\n    /// @notice Distributes a payment across referral parents, team, and vault according to configured percentages.\n    /// @dev Returns the remaining share after paying referrals and team, which is then sent to the vault.\n    /// @param holder Buyer address used as the base of the referral chain.\n    /// @param refs Referral distribution data (ordered from closest parent).\n    /// @param tokenAddress Payment token (address(0) for BNB).\n    /// @param amount Total payment amount to distribute (raw units).\n    /// @return percentsLeft Remaining percentage (in PERCENT_PRECISION) after referral payouts, capped to `vaultShare`.\n    function _distributePayment(address holder, ReferralPercents[] memory refs, address tokenAddress, uint256 amount) internal returns (uint256 percentsLeft) {\n        percentsLeft = PERCENT_PRECISION;\n        /// Current step refer;\n        address refer = holder;\n        /// Loop for all available refers;\n        uint r;\n        while (r < refs.length) {\n            /// Current parent; Stop if there is no parents left;\n            address parent = refs[r].parentAddress;\n            /// Stop loop is there is no referer or he is blocked\n            if (parent == address(0)) {\n                break;\n            }\n            /// Decrease total percents\n            percentsLeft -= refs[r].percents;\n            /// Send tokens\n            uint256 referralAmount = refs[r].percents * amount / PERCENT_PRECISION;\n            _send(tokenAddress, holder, parent, referralAmount);\n            emit ReferralRewardSent(holder, parent, refer, tokenAddress, referralAmount);\n            /// Next loop step;\n            refer = parent;\n            r++;\n        }\n\n        /// Send to the team\n        if (percentsLeft > vaultShare) {\n            uint256 teamShareAmount = (percentsLeft - vaultShare) * amount / PERCENT_PRECISION;\n            _send(tokenAddress, holder, teamAccount, teamShareAmount);\n            emit TeamRewardSent(holder, teamAccount, tokenAddress, teamShareAmount);\n            percentsLeft = vaultShare;\n        }\n\n        /// Send to the vault\n        uint256 vaultShareAmount = percentsLeft * amount / PERCENT_PRECISION;\n        _send(tokenAddress, holder, address(vault), vaultShareAmount);\n        emit VaultRefilled(holder, tokenAddress, vaultShareAmount);\n    }\n\n    /// @notice Core purchase logic: validates input, computes price, collects payment, mints lootboxes, and emits events.\n    /// @dev Handles both native and ERC20 payments. For native payments, refunds any excess back to the buyer (or forwards to the vault if refund fails).\n    /// @param typeId Lootbox type identifier to purchase.\n    /// @param tokenAddress Payment token (address(0) for BNB).\n    /// @param boxAmount Number of lootboxes to buy (must be > 0).\n    /// @return tokenId Array of minted lootbox token IDs.\n    function _buy(uint256 typeId, address tokenAddress, uint256 boxAmount) internal returns (uint256[] memory tokenId) {\n        require(boxAmount > 0, \"Can't sell 0 boxes\");\n        require(block.timestamp < vault.unlockDate(), \"Sale is not available\");\n        require(typeId <= lootBox.getTypes().length, \"NFT type is not available\");\n        require(_prices[typeId] > 0, \"NFT type in not on sale\");\n        _requireTokenAvailable(tokenAddress);\n        \n        /// Get initial data\n        address holder = _msgSender();\n        ReferralPercents[] memory refs = _referral.getReferralPercents(holder);\n        uint256 price = tokenAddress == address(0)\n            ? _quoteBNBForUSDT(_prices[typeId])\n            : _quoteTokenForUSDT(tokenAddress, _prices[typeId]);\n        price *= boxAmount;\n\n        if (tokenAddress == address(0)) {\n            /// BNB amount check\n            if (msg.value < price) {\n                revert NotEnoughTokens(price, msg.value);\n            }\n            /// Distribute payment\n            _distributePayment(holder, refs, tokenAddress, price);\n            /// Cashback with reminder\n            uint256 reminder = msg.value - price;\n            if (reminder > 0) {\n                (bool reminderSent,) = holder.call{value: reminder}(\"\");\n                if (!reminderSent) {\n                    address(vault).call{value: reminder}(\"\");\n                }\n            }\n        } else {\n            /// ERC20 token amount check\n            IERC20 token = IERC20(tokenAddress);\n            uint256 allowance = token.allowance(holder, address(this));\n            uint256 balance = token.balanceOf(holder);\n            if (balance < price) {\n                revert NotEnoughTokens(price, balance);\n            } else if (allowance < price) {\n                revert NotEnoughAllowance(price, allowance);\n            }\n            /// Distribute payment\n            _distributePayment(holder, refs, tokenAddress, price);\n        }\n\n        /// Mint LootBoxes\n        tokenId = new uint256[](boxAmount);\n        for (uint256 i; i < boxAmount; i++) {\n            tokenId[i] = lootBox.mint(holder, typeId);\n        }\n        emit LootBoxSold(holder, typeId, tokenId, tokenAddress, price);\n    }\n\n}"
      },
      "project/contracts/store/interfaces/IALFAStore.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IALFAVault, TokenInfo} from \"../../vault/interfaces/IALFAVault.sol\";\n\nstruct LootBoxPrice {\n    uint256 typeId;\n    address tokenAddress;\n    uint256 amount;\n}\n\nerror NotEnoughTokens(uint256 required, uint256 received);\nerror NotEnoughAllowance(uint256 required, uint256 received);\n\ninterface IALFAStore {\n\n    event PriceSet(uint256 typeId, uint256 price);\n    event LootBoxSold(address indexed holder, uint256 indexed typeId, uint256[] tokenId, address tokenAddress, uint256 tokenAmount);\n    event ReferralRewardSent(address indexed holder, address indexed receiver, address indexed child, address tokenAddress, uint256 tokenAmount);\n    event TeamRewardSent(address indexed holder, address indexed teamAccount, address tokenAddress, uint256 tokenAmount);\n    event VaultRefilled(address indexed holder, address tokenAddress, uint256 tokenAmount);\n    event TeamAccountSet(address accountAddress);\n    event VaultShareSet(uint256 sharePercents);\n\n    /// @notice Returns the configured vault share (scaled by PERCENT_PRECISION).\n    function vaultShare() external view returns (uint256);\n\n    /// @notice Returns the current team payout account.\n    function teamAccount() external view returns (address);\n\n    // -------- Read methods --------\n\n    /// @notice Returns a matrix of lootbox prices for all token types in all accepted tokens.\n    /// @dev Rows correspond to lootbox typeId, columns correspond to tokens returned by `vault.getVaultTokens()`.\n    ///      Each cell is the quoted amount of a token needed to pay the USDT-denominated price for that lootbox type.\n    /// @return lootBoxPrice A 2D array [typeId][tokenIndex] with token address and amount.\n    function getPrices() external view returns (LootBoxPrice[][] memory lootBoxPrice);\n\n    // -------- Write methods --------\n\n    /// @notice Buys lootboxes with an ERC20 token and optional referral parents chain.\n    /// @param typeId Lootbox type identifier.\n    /// @param tokenAddress Payment token address (must be allowed by the vault).\n    /// @param boxAmount Number of lootboxes to buy (must be > 0).\n    /// @param parents Referral chain (closest parent first). May be empty.\n    /// @return tokenId Array of minted lootbox token IDs.\n    function buy(uint256 typeId, address tokenAddress, uint256 boxAmount, address[] calldata parents)\n        external\n        returns (uint256[] memory tokenId);\n\n    /// @notice Buys lootboxes with native BNB and optional referral parents chain.\n    /// @param typeId Lootbox type identifier.\n    /// @param boxAmount Number of lootboxes to buy (must be > 0).\n    /// @param parents Referral chain (closest parent first). May be empty.\n    /// @return tokenId Array of minted lootbox token IDs.\n    function buy(uint256 typeId, uint256 boxAmount, address[] calldata parents)\n        external\n        payable\n        returns (uint256[] memory tokenId);\n\n    /// @notice Sets USDT-denominated prices per lootbox type.\n    /// @param prices Array of prices in USDT (raw units), indexed by typeId.\n    function setPrices(uint256[] calldata prices) external;\n\n    /// @notice Sets the store's vault share percentage (scaled by PERCENT_PRECISION).\n    /// @param sharePercents New vault share in PERCENT_PRECISION units (must be &lt;= 100%).\n    function setVaultShare(uint256 sharePercents) external;\n\n    /// @notice Updates the team payout account.\n    /// @param accountAddress Address to receive the team part of the revenue.\n    function setTeamAccount(address accountAddress) external;\n\n}"
      },
      "project/contracts/store/interfaces/IPancakeRouter.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface IPancakeRouter {\n    function getAmountsOut(uint amountIn, address[] calldata path)\n        external\n        view\n        returns (uint[] memory amounts);\n}"
      },
      "project/contracts/vault/ALFAVault.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {AccessControl, IAccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {IALFAVault, TokenInfo} from \"./interfaces/IALFAVault.sol\";\nimport {IALFAKey} from \"../NFT/Key/IALFAKey.sol\";\nimport {PERCENT_PRECISION} from \"../const.sol\";\n\ncontract ALFAVault is AccessControl, IALFAVault {\n\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    EnumerableSet.AddressSet private _tokens;\n    IALFAKey private _keys;\n    uint256 private _masterKeyTypeId;\n    uint256 public unlockDate;\n    uint256 public redeemUntilDate;\n\n    /// @notice Deploys the ALFAVault contract with initial configuration.\n    /// @dev Grants admin role to deployer, sets keys contract, tokens, unlock, and redeem dates.\n    /// @param alfaKeyAddress The address of the ALFAKey NFT contract.\n    /// @param tokens The list of ERC20 token addresses to be managed by the vault.\n    /// @param unlockDateSeconds The timestamp after which rewards can be redeemed.\n    /// @param redeemUntilDateSeconds The timestamp until which rewards can be redeemed.\n    constructor(\n        address alfaKeyAddress,\n        address[] memory tokens,\n        uint256 unlockDateSeconds,\n        uint256 redeemUntilDateSeconds\n        ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _keys = IALFAKey(alfaKeyAddress);\n        _masterKeyTypeId = 5;\n        for (uint256 i; i < tokens.length; i++) {\n            _addToken(tokens[i]);\n        }\n\n        unlockDate = unlockDateSeconds;\n        emit UnlockDateSet(unlockDateSeconds);\n\n        redeemUntilDate = redeemUntilDateSeconds;\n        emit RedeemUntilDateSet(redeemUntilDateSeconds);\n    }\n\n    receive() external payable {}\n\n\n    /// Write methods\n\n    /// @notice Redeems rewards for a valid master key NFT.\n    /// @dev Caller must own the key, key type must match the master key, and redemption must be within allowed period.\n    /// @param tokenId The ID of the NFT key used for redemption.\n    function redeem(uint256 tokenId) public {\n        require(_keys.tokenTypeId(tokenId) == _masterKeyTypeId, \"Selected key is not valid\");\n        require(block.timestamp >= unlockDate, \"Redeem is not available yet\");\n        require(block.timestamp <= redeemUntilDate, \"Redeem is not available anymore\");\n\n        address holder = _msgSender();\n        uint256 total = _getKeysTotalAmount();\n        for (uint256 i; i < _tokens.length(); i++) {\n            uint256 amount = _getBalance(_tokens.at(i)) / total;\n            if (_tokens.at(i) == address(0)) {\n                (bool sent,) = holder.call{value: amount}(\"\");\n                require(sent, \"Failed to send BNB\");\n            } else {\n                require(IERC20(_tokens.at(i)).transfer(holder, amount), \"Can't transfer reward\");\n            }\n            emit RewardRedeemed(holder, _tokens.at(i), amount, tokenId);\n        }\n        _keys.burn(holder, tokenId);\n    }\n\n\n    /// Read methods\n\n    /// @notice Returns information about all tokens held in the vault.\n    /// @dev Each TokenInfo contains token address and current vault balance.\n    /// @return Array of TokenInfo for each token in the vault.\n    function getVaultTokens() public view returns (TokenInfo[] memory) {\n        TokenInfo[] memory result = new TokenInfo[](_tokens.length());\n        for (uint256 i; i < _tokens.length(); i++) {\n            result[i].tokenAddress = _tokens.at(i);\n            result[i].amount = _getBalance(result[i].tokenAddress);\n        }\n        return result;\n    }\n\n    /// @notice Returns the share of the vault a holder owns, as a percentage.\n    /// @dev Share is calculated as holder's master keys over total, scaled by PERCENT_PRECISION.\n    /// @param holder The address of the holder to query.\n    /// @return The percent share (scaled by PERCENT_PRECISION) owned by the holder.\n    function getHolderShare(address holder) public view returns (uint256) {\n        uint256 total = _getKeysTotalAmount();\n        return total > 0\n            ? _getKeysHolderAmount(holder) * PERCENT_PRECISION / total\n            : 0;\n    }\n\n    /// @notice Returns the total amount of master keys issued.\n    /// @dev Queries the keys contract for the amount of master key type.\n    /// @return The total number of master keys.\n    function getKeysTotalAmount() public view returns (uint256) {\n        return _getKeysTotalAmount();\n    }\n\n    /// @notice Returns vault summary information.\n    /// @dev Includes tokens, total master keys, unlock date, and redeem until date.\n    /// @return tokens Array of TokenInfo for each token.\n    /// @return keysTotalAmount The total number of master keys.\n    /// @return unlockDateSeconds The unlock date timestamp.\n    /// @return redeemUntilDateSeconds The redeem until date timestamp.\n    function getInfo() public view returns (\n        TokenInfo[] memory tokens,\n        uint256 keysTotalAmount,\n        uint256 unlockDateSeconds,\n        uint256 redeemUntilDateSeconds\n    ) {\n        return (getVaultTokens(), _getKeysTotalAmount(), unlockDate, redeemUntilDate);\n    }\n\n    /// @notice Checks if a given token address is part of the allowed vault tokens.\n    /// @dev Supports both ERC20 token addresses and the native token placeholder (address(0)) if added.\n    /// @param tokenAddress The address of the token to check.\n    /// @return True if the token is currently allowed in the vault, false otherwise.\n    function getTokenAvailable(address tokenAddress) public view returns (bool) {\n        return _tokens.contains(tokenAddress);\n    }\n\n\n    /// Admin methods\n\n    /// @notice Adds a new ERC20 token to the vault.\n    /// @dev Only callable by admin. The token must not already be allowed.\n    /// @param tokenAddress The address of the ERC20 token to add.\n    function addToken(address tokenAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _addToken(tokenAddress);\n    }\n\n    /// @notice Removes an ERC20 token from the vault.\n    /// @dev Only callable by admin. The token must be currently allowed.\n    /// @param tokenAddress The address of the ERC20 token to remove.\n    function removeToken(address tokenAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _removeToken(tokenAddress);\n    }\n\n    /// @notice Sets the master key type ID for redemption eligibility.\n    /// @dev Only callable by admin.\n    /// @param masterKeyIndex The new master key type ID.\n    function setMasterKey(uint256 masterKeyIndex) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _masterKeyTypeId = masterKeyIndex;\n        emit MasterKeySet(masterKeyIndex);\n    }\n\n    /// @notice Sets the unlock date after which rewards can be redeemed.\n    /// @dev Only callable by admin.\n    /// @param unlockDateSeconds The new unlock date as a timestamp.\n    function setUnlockDate(uint256 unlockDateSeconds) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        unlockDate = unlockDateSeconds;\n        emit UnlockDateSet(unlockDateSeconds);\n    }\n\n    /// @notice Sets the final date until which rewards can be redeemed.\n    /// @dev Only callable by admin.\n    /// @param redeemUntilDateSeconds The new redeem until date as a timestamp.\n    function setRedeemUntilDate(uint256 redeemUntilDateSeconds) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        redeemUntilDate = redeemUntilDateSeconds;\n        emit RedeemUntilDateSet(redeemUntilDateSeconds);\n    }\n\n    /// @notice Withdraws a specific amount of a token after redemption period ends.\n    /// @dev Only callable by admin. Withdrawals only allowed after redeem period.\n    /// @param tokenAddress The address of the ERC20 token to withdraw.\n    /// @param amount The amount of tokens to withdraw.\n    function withdraw(address tokenAddress, uint256 amount) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _withdraw(tokenAddress, amount);\n    }\n\n    /// @notice Withdraws the entire balance of a token after redemption period ends.\n    /// @dev Only callable by admin. Withdrawals only allowed after redeem period.\n    /// @param tokenAddress The address of the ERC20 token to withdraw.\n    function withdraw(address tokenAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _withdraw(tokenAddress, _getBalance(tokenAddress));\n    }\n\n    /// @notice Withdraws the entire balance of all tokens after redemption period ends.\n    /// @dev Only callable by admin. Withdrawals only allowed after redeem period.\n    function withdraw() public onlyRole(DEFAULT_ADMIN_ROLE) {\n        for (uint256 i; i < _tokens.length(); i++) {\n            _withdraw(_tokens.at(i), _getBalance(_tokens.at(i)));\n        }\n    }\n\n\n    /// Internal methods\n\n    function _addToken(address tokenAddress) internal returns (uint256) {\n        require(!_tokens.contains(tokenAddress), \"Token is already allowed\");\n        _tokens.add(tokenAddress);\n        emit TokenAdded(tokenAddress);\n        return _tokens.length() - 1;\n    }\n\n    function _removeToken(address tokenAddress) internal {\n        _requireTokenExists(tokenAddress);\n        _tokens.remove(tokenAddress);\n        emit TokenRemoved(tokenAddress);\n    }\n\n    function _requireTokenExists(address tokenAddress) internal view {\n        require(_tokens.contains(tokenAddress), \"Token is not allowed\");\n    }\n    \n    function _getBalance(address tokenAddress) internal view returns (uint256) {\n        return tokenAddress == address(0)\n            ? address(this).balance\n            : IERC20(tokenAddress).balanceOf(address(this));\n    }\n\n    function _getKeysTotalAmount() internal view returns (uint256) {\n        return _keys.getTypeAmount(_masterKeyTypeId);\n    }\n\n    function _getKeysHolderAmount(address holder) internal view returns (uint256) {\n        return _keys.getTypeHolderAmount(holder, _masterKeyTypeId);\n    }\n\n    function _withdraw(address tokenAddress, uint256 amount) internal {\n        if (_tokens.contains(tokenAddress)) {\n            require(block.timestamp > redeemUntilDate, \"Holders still can redeem their reward\");\n        }\n        if (tokenAddress == address(0)) {\n            (bool sent,) = _msgSender().call{value: amount}(\"\");\n            require(sent, \"Failed to send BNB\");\n        } else {\n            require(IERC20(tokenAddress).transfer(_msgSender(), amount), \"Can't transfer reward\");\n        }\n        emit RewardWithdrawn(tokenAddress, amount, _msgSender());\n    }\n\n}"
      },
      "project/contracts/vault/interfaces/IALFAVault.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nstruct TokenInfo {\n    address tokenAddress;\n    uint256 amount;\n}\n\ninterface IALFAVault {\n\n    event TokenAdded(address indexed tokenAddress);\n    event TokenRemoved(address indexed tokenAddress);\n    event MasterKeySet(uint256 keyIndex);\n    event UnlockDateSet(uint256 unlockDateSeconds);\n    event RedeemUntilDateSet(uint256 redeemUntilDateSeconds);\n    event RewardRedeemed(address indexed holder, address indexed tokenAddres, uint256 amount, uint256 keyTokenId);\n    event RewardWithdrawn(address indexed tokenAddress, uint256 amount, address receiver);\n\n    /// @notice Returns the configured unlock date timestamp.\n    function unlockDate() external view returns (uint256);\n\n    /// @notice Returns the final redeem-until date timestamp.\n    function redeemUntilDate() external view returns (uint256);\n\n    /// @notice Returns information about all ERC20 tokens held in the vault.\n    function getVaultTokens() external view returns (TokenInfo[] memory);\n\n    /// @notice Returns the holder's share of the vault in percent scaled by PERCENT_PRECISION.\n    /// @param holder The address of the holder to query.\n    function getHolderShare(address holder) external view returns (uint256);\n\n    /// @notice Returns total number of master keys issued.\n    function getKeysTotalAmount() external view returns (uint256);\n\n    /// @notice Returns a summary of the vault state.\n    /// @return tokens Array of TokenInfo.\n    /// @return keysTotalAmount Total master keys.\n    /// @return unlockDateSeconds Unlock date timestamp.\n    /// @return redeemUntilDateSeconds Redeem-until date timestamp.\n    function getInfo() external view returns (\n        TokenInfo[] memory tokens,\n        uint256 keysTotalAmount,\n        uint256 unlockDateSeconds,\n        uint256 redeemUntilDateSeconds\n    );\n\n    /// @notice Checks whether a token is currently allowed in the vault.\n    /// @param tokenAddress ERC20 token address to check.\n    function getTokenAvailable(address tokenAddress) external view returns (bool);\n\n    /// @notice Redeems rewards using a valid master key NFT.\n    /// @param tokenId The NFT key tokenId used to redeem.\n    function redeem(uint256 tokenId) external;\n\n    /// @notice Adds an ERC20 token to the allowed tokens list.\n    /// @param tokenAddress ERC20 token address to add.\n    function addToken(address tokenAddress) external;\n\n    /// @notice Removes an ERC20 token from the allowed tokens list.\n    /// @param tokenAddress ERC20 token address to remove.\n    function removeToken(address tokenAddress) external;\n\n    /// @notice Sets the master key type index used for redemption eligibility.\n    /// @param masterKeyIndex New master key type id.\n    function setMasterKey(uint256 masterKeyIndex) external;\n\n    /// @notice Sets the unlock date timestamp.\n    /// @param unlockDateSeconds New unlock date.\n    function setUnlockDate(uint256 unlockDateSeconds) external;\n\n    /// @notice Sets the redeem-until date timestamp.\n    /// @param redeemUntilDateSeconds New redeem-until date.\n    function setRedeemUntilDate(uint256 redeemUntilDateSeconds) external;\n\n    /// @notice Withdraws a specific token amount (after redeem period ends).\n    /// @param tokenAddress ERC20 token to withdraw.\n    /// @param amount Amount to withdraw.\n    function withdraw(address tokenAddress, uint256 amount) external;\n\n    /// @notice Withdraws entire balance of a specific token (after redeem period ends).\n    /// @param tokenAddress ERC20 token to withdraw entirely.\n    function withdraw(address tokenAddress) external;\n\n    /// @notice Withdraws entire balance of all tokens (after redeem period ends).\n    function withdraw() external;\n}"
      }
    }
  }
}